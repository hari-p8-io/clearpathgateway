spring:
  application:
    name: fast-inward-clearing-processor
  profiles:
    active: local
  cloud:
    gcp:
      core:
        enabled: true
        project-id: test-project
      spanner:
        enabled: true
        instance-id: test-instance
        database: test-database
        emulator:
          enabled: true
          host: localhost:9010

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      retries: 3
      acks: all
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
        schema.registry.basic.auth.user.info: ${SCHEMA_REGISTRY_USERNAME:}:${SCHEMA_REGISTRY_PASSWORD:}
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      auto-offset-reset: earliest
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
        schema.registry.basic.auth.user.info: ${SCHEMA_REGISTRY_USERNAME:}:${SCHEMA_REGISTRY_PASSWORD:}
        specific.avro.reader: false

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000

server:
  port: 8080
  shutdown: graceful

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# Application Configuration
app:
  name: Fast Inward Clearing Processor
  version: 21.0.0-apeafast-SNAPSHOT

  # Kafka Topic Configuration
  kafka:
    topics:
      input: transactions.incoming
      output: transactions.processed
      dlq: transactions.dlq

    producer:
      acks: all
      retries: 3
    schema-registry:
      url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
      username: ${SCHEMA_REGISTRY_USERNAME:}
      password: ${SCHEMA_REGISTRY_PASSWORD:}

  # Business Rules Configuration
  business-rules:
    max-amount: SGD 1000000
    high-risk-countries: XX,YY,ZZ

  # Idempotency Configuration
  idempotency:
    ttl-hours: 24

  # Processing Configuration
  processing:
    node-id: inward-processor-01

  # SLA Configuration
  sla:
    timeout-seconds: ${SLA_TIMEOUT_SECONDS:4.5}
    warning-threshold-seconds: 3.0

  # External service endpoints
  external:
    vam-endpoint: ${VAM_ENDPOINT:http://localhost:8445/vam}
    midanz-endpoint: ${MIDANZ_ENDPOINT:http://localhost:8446/midanz}
    liquidity-service-url: ${LIQUIDITY_SERVICE_URL:http://fast-liquidity-service:8084}
    sender-service-url: ${SENDER_SERVICE_URL:http://fast-sender-service:8083}

  # Circuit breaker configuration
  circuit-breaker:
    failure-rate-threshold: 50
    wait-duration-in-open-state: 30s
    sliding-window-size: 10

logging:
  level:
    com.anz.fastpayment: DEBUG
    org.springframework.statemachine: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%X{traceId}] - %msg%n"



---
spring:
  config:
    activate:
      on-profile: local
  kafka:
    producer:
      properties:
        enable.idempotence: true
    listener:
      concurrency: 3
      ack-mode: manual
      type: single
      # Retry configuration
      retry:
        enabled: true
        initial-interval: 1s
        max-attempts: 3
        multiplier: 2.0
        max-interval: 10s
  cloud:
    gcp:
      spanner:
        instance-id: ${SPANNER_INSTANCE:payment-gateway-local}
        database: ${SPANNER_DATABASE:inward-processor-db}
        emulator:
          enabled: true

---
spring:
  config:
    activate:
      on-profile: gcp
  kafka:
    producer:
      properties:
        enable.idempotence: true
    listener:
      concurrency: 3
      ack-mode: manual
      type: single
      # Retry configuration
      retry:
        enabled: true
        initial-interval: 1s
        max-attempts: 3
        multiplier: 2.0
        max-interval: 10s
  cloud:
    gcp:
      project-id: ${GCP_PROJECT_ID:anz-fastpayment-sg}
      spanner:
        instance-id: ${SPANNER_INSTANCE:payment-gateway}
        database: ${SPANNER_DATABASE:inward-processor-db}