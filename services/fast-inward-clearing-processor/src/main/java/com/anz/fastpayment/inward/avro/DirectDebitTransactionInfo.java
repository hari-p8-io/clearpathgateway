/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DirectDebitTransactionInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7709090674343765766L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DirectDebitTransactionInfo\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"PmtId\",\"type\":{\"type\":\"record\",\"name\":\"PaymentId\",\"fields\":[{\"name\":\"InstrId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"TxId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EndToEndId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ClrSysRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"IntrBkSttlmAmt\",\"type\":\"double\",\"doc\":\"Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)\"},{\"name\":\"IntrBkSttlmAmtMinor\",\"type\":\"long\",\"doc\":\"Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation\",\"default\":0},{\"name\":\"IntrBkSttlmCCY\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"IntrBkSttlmDt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InstgAgt\",\"type\":{\"type\":\"record\",\"name\":\"InstructingAgent\",\"fields\":[{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"InstdAgt\",\"type\":{\"type\":\"record\",\"name\":\"InstructedAgent\",\"fields\":[{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Dbtr\",\"type\":{\"type\":\"record\",\"name\":\"Debtor\",\"fields\":[{\"name\":\"Nm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"DbtrAcct\",\"type\":{\"type\":\"record\",\"name\":\"DebtorAccount\",\"fields\":[{\"name\":\"AcctId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},{\"name\":\"DbtrAgt\",\"type\":{\"type\":\"record\",\"name\":\"DebtorAgent\",\"fields\":[{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"CdtrAgt\",\"type\":{\"type\":\"record\",\"name\":\"CreditorAgent\",\"fields\":[{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Cdtr\",\"type\":{\"type\":\"record\",\"name\":\"Creditor\",\"fields\":[{\"name\":\"Nm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"CdtrAcct\",\"type\":{\"type\":\"record\",\"name\":\"CreditorAccount\",\"fields\":[{\"name\":\"AcctId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},{\"name\":\"Purp\",\"type\":{\"type\":\"record\",\"name\":\"Purpose\",\"fields\":[{\"name\":\"Cd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"RmtInf\",\"type\":{\"type\":\"record\",\"name\":\"RemittanceInformation\",\"fields\":[{\"name\":\"Ustrd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"DrctDbtTx\",\"type\":{\"type\":\"record\",\"name\":\"DirectDebitTransaction\",\"fields\":[{\"name\":\"MndtRltdInf\",\"type\":{\"type\":\"record\",\"name\":\"MandateRelatedInformation\",\"fields\":[{\"name\":\"MndtId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DirectDebitTransactionInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DirectDebitTransactionInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DirectDebitTransactionInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DirectDebitTransactionInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DirectDebitTransactionInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DirectDebitTransactionInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DirectDebitTransactionInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DirectDebitTransactionInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DirectDebitTransactionInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.anz.fastpayment.inward.avro.PaymentId PmtId;
  /** Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision) */
  private double IntrBkSttlmAmt;
  /** Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation */
  private long IntrBkSttlmAmtMinor;
  private java.lang.String IntrBkSttlmCCY;
  private java.lang.String IntrBkSttlmDt;
  private com.anz.fastpayment.inward.avro.InstructingAgent InstgAgt;
  private com.anz.fastpayment.inward.avro.InstructedAgent InstdAgt;
  private com.anz.fastpayment.inward.avro.Debtor Dbtr;
  private com.anz.fastpayment.inward.avro.DebtorAccount DbtrAcct;
  private com.anz.fastpayment.inward.avro.DebtorAgent DbtrAgt;
  private com.anz.fastpayment.inward.avro.CreditorAgent CdtrAgt;
  private com.anz.fastpayment.inward.avro.Creditor Cdtr;
  private com.anz.fastpayment.inward.avro.CreditorAccount CdtrAcct;
  private com.anz.fastpayment.inward.avro.Purpose Purp;
  private com.anz.fastpayment.inward.avro.RemittanceInformation RmtInf;
  private com.anz.fastpayment.inward.avro.DirectDebitTransaction DrctDbtTx;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DirectDebitTransactionInfo() {}

  /**
   * All-args constructor.
   * @param PmtId The new value for PmtId
   * @param IntrBkSttlmAmt Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
   * @param IntrBkSttlmAmtMinor Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param IntrBkSttlmCCY The new value for IntrBkSttlmCCY
   * @param IntrBkSttlmDt The new value for IntrBkSttlmDt
   * @param InstgAgt The new value for InstgAgt
   * @param InstdAgt The new value for InstdAgt
   * @param Dbtr The new value for Dbtr
   * @param DbtrAcct The new value for DbtrAcct
   * @param DbtrAgt The new value for DbtrAgt
   * @param CdtrAgt The new value for CdtrAgt
   * @param Cdtr The new value for Cdtr
   * @param CdtrAcct The new value for CdtrAcct
   * @param Purp The new value for Purp
   * @param RmtInf The new value for RmtInf
   * @param DrctDbtTx The new value for DrctDbtTx
   */
  public DirectDebitTransactionInfo(com.anz.fastpayment.inward.avro.PaymentId PmtId, java.lang.Double IntrBkSttlmAmt, java.lang.Long IntrBkSttlmAmtMinor, java.lang.String IntrBkSttlmCCY, java.lang.String IntrBkSttlmDt, com.anz.fastpayment.inward.avro.InstructingAgent InstgAgt, com.anz.fastpayment.inward.avro.InstructedAgent InstdAgt, com.anz.fastpayment.inward.avro.Debtor Dbtr, com.anz.fastpayment.inward.avro.DebtorAccount DbtrAcct, com.anz.fastpayment.inward.avro.DebtorAgent DbtrAgt, com.anz.fastpayment.inward.avro.CreditorAgent CdtrAgt, com.anz.fastpayment.inward.avro.Creditor Cdtr, com.anz.fastpayment.inward.avro.CreditorAccount CdtrAcct, com.anz.fastpayment.inward.avro.Purpose Purp, com.anz.fastpayment.inward.avro.RemittanceInformation RmtInf, com.anz.fastpayment.inward.avro.DirectDebitTransaction DrctDbtTx) {
    this.PmtId = PmtId;
    this.IntrBkSttlmAmt = IntrBkSttlmAmt;
    this.IntrBkSttlmAmtMinor = IntrBkSttlmAmtMinor;
    this.IntrBkSttlmCCY = IntrBkSttlmCCY;
    this.IntrBkSttlmDt = IntrBkSttlmDt;
    this.InstgAgt = InstgAgt;
    this.InstdAgt = InstdAgt;
    this.Dbtr = Dbtr;
    this.DbtrAcct = DbtrAcct;
    this.DbtrAgt = DbtrAgt;
    this.CdtrAgt = CdtrAgt;
    this.Cdtr = Cdtr;
    this.CdtrAcct = CdtrAcct;
    this.Purp = Purp;
    this.RmtInf = RmtInf;
    this.DrctDbtTx = DrctDbtTx;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return PmtId;
    case 1: return IntrBkSttlmAmt;
    case 2: return IntrBkSttlmAmtMinor;
    case 3: return IntrBkSttlmCCY;
    case 4: return IntrBkSttlmDt;
    case 5: return InstgAgt;
    case 6: return InstdAgt;
    case 7: return Dbtr;
    case 8: return DbtrAcct;
    case 9: return DbtrAgt;
    case 10: return CdtrAgt;
    case 11: return Cdtr;
    case 12: return CdtrAcct;
    case 13: return Purp;
    case 14: return RmtInf;
    case 15: return DrctDbtTx;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: PmtId = (com.anz.fastpayment.inward.avro.PaymentId)value$; break;
    case 1: IntrBkSttlmAmt = (java.lang.Double)value$; break;
    case 2: IntrBkSttlmAmtMinor = (java.lang.Long)value$; break;
    case 3: IntrBkSttlmCCY = value$ != null ? value$.toString() : null; break;
    case 4: IntrBkSttlmDt = value$ != null ? value$.toString() : null; break;
    case 5: InstgAgt = (com.anz.fastpayment.inward.avro.InstructingAgent)value$; break;
    case 6: InstdAgt = (com.anz.fastpayment.inward.avro.InstructedAgent)value$; break;
    case 7: Dbtr = (com.anz.fastpayment.inward.avro.Debtor)value$; break;
    case 8: DbtrAcct = (com.anz.fastpayment.inward.avro.DebtorAccount)value$; break;
    case 9: DbtrAgt = (com.anz.fastpayment.inward.avro.DebtorAgent)value$; break;
    case 10: CdtrAgt = (com.anz.fastpayment.inward.avro.CreditorAgent)value$; break;
    case 11: Cdtr = (com.anz.fastpayment.inward.avro.Creditor)value$; break;
    case 12: CdtrAcct = (com.anz.fastpayment.inward.avro.CreditorAccount)value$; break;
    case 13: Purp = (com.anz.fastpayment.inward.avro.Purpose)value$; break;
    case 14: RmtInf = (com.anz.fastpayment.inward.avro.RemittanceInformation)value$; break;
    case 15: DrctDbtTx = (com.anz.fastpayment.inward.avro.DirectDebitTransaction)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'PmtId' field.
   * @return The value of the 'PmtId' field.
   */
  public com.anz.fastpayment.inward.avro.PaymentId getPmtId() {
    return PmtId;
  }


  /**
   * Sets the value of the 'PmtId' field.
   * @param value the value to set.
   */
  public void setPmtId(com.anz.fastpayment.inward.avro.PaymentId value) {
    this.PmtId = value;
  }

  /**
   * Gets the value of the 'IntrBkSttlmAmt' field.
   * @return Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
   */
  public double getIntrBkSttlmAmt() {
    return IntrBkSttlmAmt;
  }


  /**
   * Sets the value of the 'IntrBkSttlmAmt' field.
   * Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
   * @param value the value to set.
   */
  public void setIntrBkSttlmAmt(double value) {
    this.IntrBkSttlmAmt = value;
  }

  /**
   * Gets the value of the 'IntrBkSttlmAmtMinor' field.
   * @return Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
   */
  public long getIntrBkSttlmAmtMinor() {
    return IntrBkSttlmAmtMinor;
  }


  /**
   * Sets the value of the 'IntrBkSttlmAmtMinor' field.
   * Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param value the value to set.
   */
  public void setIntrBkSttlmAmtMinor(long value) {
    this.IntrBkSttlmAmtMinor = value;
  }

  /**
   * Gets the value of the 'IntrBkSttlmCCY' field.
   * @return The value of the 'IntrBkSttlmCCY' field.
   */
  public java.lang.String getIntrBkSttlmCCY() {
    return IntrBkSttlmCCY;
  }


  /**
   * Sets the value of the 'IntrBkSttlmCCY' field.
   * @param value the value to set.
   */
  public void setIntrBkSttlmCCY(java.lang.String value) {
    this.IntrBkSttlmCCY = value;
  }

  /**
   * Gets the value of the 'IntrBkSttlmDt' field.
   * @return The value of the 'IntrBkSttlmDt' field.
   */
  public java.lang.String getIntrBkSttlmDt() {
    return IntrBkSttlmDt;
  }


  /**
   * Sets the value of the 'IntrBkSttlmDt' field.
   * @param value the value to set.
   */
  public void setIntrBkSttlmDt(java.lang.String value) {
    this.IntrBkSttlmDt = value;
  }

  /**
   * Gets the value of the 'InstgAgt' field.
   * @return The value of the 'InstgAgt' field.
   */
  public com.anz.fastpayment.inward.avro.InstructingAgent getInstgAgt() {
    return InstgAgt;
  }


  /**
   * Sets the value of the 'InstgAgt' field.
   * @param value the value to set.
   */
  public void setInstgAgt(com.anz.fastpayment.inward.avro.InstructingAgent value) {
    this.InstgAgt = value;
  }

  /**
   * Gets the value of the 'InstdAgt' field.
   * @return The value of the 'InstdAgt' field.
   */
  public com.anz.fastpayment.inward.avro.InstructedAgent getInstdAgt() {
    return InstdAgt;
  }


  /**
   * Sets the value of the 'InstdAgt' field.
   * @param value the value to set.
   */
  public void setInstdAgt(com.anz.fastpayment.inward.avro.InstructedAgent value) {
    this.InstdAgt = value;
  }

  /**
   * Gets the value of the 'Dbtr' field.
   * @return The value of the 'Dbtr' field.
   */
  public com.anz.fastpayment.inward.avro.Debtor getDbtr() {
    return Dbtr;
  }


  /**
   * Sets the value of the 'Dbtr' field.
   * @param value the value to set.
   */
  public void setDbtr(com.anz.fastpayment.inward.avro.Debtor value) {
    this.Dbtr = value;
  }

  /**
   * Gets the value of the 'DbtrAcct' field.
   * @return The value of the 'DbtrAcct' field.
   */
  public com.anz.fastpayment.inward.avro.DebtorAccount getDbtrAcct() {
    return DbtrAcct;
  }


  /**
   * Sets the value of the 'DbtrAcct' field.
   * @param value the value to set.
   */
  public void setDbtrAcct(com.anz.fastpayment.inward.avro.DebtorAccount value) {
    this.DbtrAcct = value;
  }

  /**
   * Gets the value of the 'DbtrAgt' field.
   * @return The value of the 'DbtrAgt' field.
   */
  public com.anz.fastpayment.inward.avro.DebtorAgent getDbtrAgt() {
    return DbtrAgt;
  }


  /**
   * Sets the value of the 'DbtrAgt' field.
   * @param value the value to set.
   */
  public void setDbtrAgt(com.anz.fastpayment.inward.avro.DebtorAgent value) {
    this.DbtrAgt = value;
  }

  /**
   * Gets the value of the 'CdtrAgt' field.
   * @return The value of the 'CdtrAgt' field.
   */
  public com.anz.fastpayment.inward.avro.CreditorAgent getCdtrAgt() {
    return CdtrAgt;
  }


  /**
   * Sets the value of the 'CdtrAgt' field.
   * @param value the value to set.
   */
  public void setCdtrAgt(com.anz.fastpayment.inward.avro.CreditorAgent value) {
    this.CdtrAgt = value;
  }

  /**
   * Gets the value of the 'Cdtr' field.
   * @return The value of the 'Cdtr' field.
   */
  public com.anz.fastpayment.inward.avro.Creditor getCdtr() {
    return Cdtr;
  }


  /**
   * Sets the value of the 'Cdtr' field.
   * @param value the value to set.
   */
  public void setCdtr(com.anz.fastpayment.inward.avro.Creditor value) {
    this.Cdtr = value;
  }

  /**
   * Gets the value of the 'CdtrAcct' field.
   * @return The value of the 'CdtrAcct' field.
   */
  public com.anz.fastpayment.inward.avro.CreditorAccount getCdtrAcct() {
    return CdtrAcct;
  }


  /**
   * Sets the value of the 'CdtrAcct' field.
   * @param value the value to set.
   */
  public void setCdtrAcct(com.anz.fastpayment.inward.avro.CreditorAccount value) {
    this.CdtrAcct = value;
  }

  /**
   * Gets the value of the 'Purp' field.
   * @return The value of the 'Purp' field.
   */
  public com.anz.fastpayment.inward.avro.Purpose getPurp() {
    return Purp;
  }


  /**
   * Sets the value of the 'Purp' field.
   * @param value the value to set.
   */
  public void setPurp(com.anz.fastpayment.inward.avro.Purpose value) {
    this.Purp = value;
  }

  /**
   * Gets the value of the 'RmtInf' field.
   * @return The value of the 'RmtInf' field.
   */
  public com.anz.fastpayment.inward.avro.RemittanceInformation getRmtInf() {
    return RmtInf;
  }


  /**
   * Sets the value of the 'RmtInf' field.
   * @param value the value to set.
   */
  public void setRmtInf(com.anz.fastpayment.inward.avro.RemittanceInformation value) {
    this.RmtInf = value;
  }

  /**
   * Gets the value of the 'DrctDbtTx' field.
   * @return The value of the 'DrctDbtTx' field.
   */
  public com.anz.fastpayment.inward.avro.DirectDebitTransaction getDrctDbtTx() {
    return DrctDbtTx;
  }


  /**
   * Sets the value of the 'DrctDbtTx' field.
   * @param value the value to set.
   */
  public void setDrctDbtTx(com.anz.fastpayment.inward.avro.DirectDebitTransaction value) {
    this.DrctDbtTx = value;
  }

  /**
   * Creates a new DirectDebitTransactionInfo RecordBuilder.
   * @return A new DirectDebitTransactionInfo RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder();
  }

  /**
   * Creates a new DirectDebitTransactionInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DirectDebitTransactionInfo RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder newBuilder(com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder(other);
    }
  }

  /**
   * Creates a new DirectDebitTransactionInfo RecordBuilder by copying an existing DirectDebitTransactionInfo instance.
   * @param other The existing instance to copy.
   * @return A new DirectDebitTransactionInfo RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder newBuilder(com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for DirectDebitTransactionInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DirectDebitTransactionInfo>
    implements org.apache.avro.data.RecordBuilder<DirectDebitTransactionInfo> {

    private com.anz.fastpayment.inward.avro.PaymentId PmtId;
    private com.anz.fastpayment.inward.avro.PaymentId.Builder PmtIdBuilder;
    /** Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision) */
    private double IntrBkSttlmAmt;
    /** Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation */
    private long IntrBkSttlmAmtMinor;
    private java.lang.String IntrBkSttlmCCY;
    private java.lang.String IntrBkSttlmDt;
    private com.anz.fastpayment.inward.avro.InstructingAgent InstgAgt;
    private com.anz.fastpayment.inward.avro.InstructingAgent.Builder InstgAgtBuilder;
    private com.anz.fastpayment.inward.avro.InstructedAgent InstdAgt;
    private com.anz.fastpayment.inward.avro.InstructedAgent.Builder InstdAgtBuilder;
    private com.anz.fastpayment.inward.avro.Debtor Dbtr;
    private com.anz.fastpayment.inward.avro.Debtor.Builder DbtrBuilder;
    private com.anz.fastpayment.inward.avro.DebtorAccount DbtrAcct;
    private com.anz.fastpayment.inward.avro.DebtorAccount.Builder DbtrAcctBuilder;
    private com.anz.fastpayment.inward.avro.DebtorAgent DbtrAgt;
    private com.anz.fastpayment.inward.avro.DebtorAgent.Builder DbtrAgtBuilder;
    private com.anz.fastpayment.inward.avro.CreditorAgent CdtrAgt;
    private com.anz.fastpayment.inward.avro.CreditorAgent.Builder CdtrAgtBuilder;
    private com.anz.fastpayment.inward.avro.Creditor Cdtr;
    private com.anz.fastpayment.inward.avro.Creditor.Builder CdtrBuilder;
    private com.anz.fastpayment.inward.avro.CreditorAccount CdtrAcct;
    private com.anz.fastpayment.inward.avro.CreditorAccount.Builder CdtrAcctBuilder;
    private com.anz.fastpayment.inward.avro.Purpose Purp;
    private com.anz.fastpayment.inward.avro.Purpose.Builder PurpBuilder;
    private com.anz.fastpayment.inward.avro.RemittanceInformation RmtInf;
    private com.anz.fastpayment.inward.avro.RemittanceInformation.Builder RmtInfBuilder;
    private com.anz.fastpayment.inward.avro.DirectDebitTransaction DrctDbtTx;
    private com.anz.fastpayment.inward.avro.DirectDebitTransaction.Builder DrctDbtTxBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.PmtId)) {
        this.PmtId = data().deepCopy(fields()[0].schema(), other.PmtId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPmtIdBuilder()) {
        this.PmtIdBuilder = com.anz.fastpayment.inward.avro.PaymentId.newBuilder(other.getPmtIdBuilder());
      }
      if (isValidValue(fields()[1], other.IntrBkSttlmAmt)) {
        this.IntrBkSttlmAmt = data().deepCopy(fields()[1].schema(), other.IntrBkSttlmAmt);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.IntrBkSttlmAmtMinor)) {
        this.IntrBkSttlmAmtMinor = data().deepCopy(fields()[2].schema(), other.IntrBkSttlmAmtMinor);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.IntrBkSttlmCCY)) {
        this.IntrBkSttlmCCY = data().deepCopy(fields()[3].schema(), other.IntrBkSttlmCCY);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.IntrBkSttlmDt)) {
        this.IntrBkSttlmDt = data().deepCopy(fields()[4].schema(), other.IntrBkSttlmDt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.InstgAgt)) {
        this.InstgAgt = data().deepCopy(fields()[5].schema(), other.InstgAgt);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasInstgAgtBuilder()) {
        this.InstgAgtBuilder = com.anz.fastpayment.inward.avro.InstructingAgent.newBuilder(other.getInstgAgtBuilder());
      }
      if (isValidValue(fields()[6], other.InstdAgt)) {
        this.InstdAgt = data().deepCopy(fields()[6].schema(), other.InstdAgt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasInstdAgtBuilder()) {
        this.InstdAgtBuilder = com.anz.fastpayment.inward.avro.InstructedAgent.newBuilder(other.getInstdAgtBuilder());
      }
      if (isValidValue(fields()[7], other.Dbtr)) {
        this.Dbtr = data().deepCopy(fields()[7].schema(), other.Dbtr);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasDbtrBuilder()) {
        this.DbtrBuilder = com.anz.fastpayment.inward.avro.Debtor.newBuilder(other.getDbtrBuilder());
      }
      if (isValidValue(fields()[8], other.DbtrAcct)) {
        this.DbtrAcct = data().deepCopy(fields()[8].schema(), other.DbtrAcct);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasDbtrAcctBuilder()) {
        this.DbtrAcctBuilder = com.anz.fastpayment.inward.avro.DebtorAccount.newBuilder(other.getDbtrAcctBuilder());
      }
      if (isValidValue(fields()[9], other.DbtrAgt)) {
        this.DbtrAgt = data().deepCopy(fields()[9].schema(), other.DbtrAgt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasDbtrAgtBuilder()) {
        this.DbtrAgtBuilder = com.anz.fastpayment.inward.avro.DebtorAgent.newBuilder(other.getDbtrAgtBuilder());
      }
      if (isValidValue(fields()[10], other.CdtrAgt)) {
        this.CdtrAgt = data().deepCopy(fields()[10].schema(), other.CdtrAgt);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasCdtrAgtBuilder()) {
        this.CdtrAgtBuilder = com.anz.fastpayment.inward.avro.CreditorAgent.newBuilder(other.getCdtrAgtBuilder());
      }
      if (isValidValue(fields()[11], other.Cdtr)) {
        this.Cdtr = data().deepCopy(fields()[11].schema(), other.Cdtr);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasCdtrBuilder()) {
        this.CdtrBuilder = com.anz.fastpayment.inward.avro.Creditor.newBuilder(other.getCdtrBuilder());
      }
      if (isValidValue(fields()[12], other.CdtrAcct)) {
        this.CdtrAcct = data().deepCopy(fields()[12].schema(), other.CdtrAcct);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (other.hasCdtrAcctBuilder()) {
        this.CdtrAcctBuilder = com.anz.fastpayment.inward.avro.CreditorAccount.newBuilder(other.getCdtrAcctBuilder());
      }
      if (isValidValue(fields()[13], other.Purp)) {
        this.Purp = data().deepCopy(fields()[13].schema(), other.Purp);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasPurpBuilder()) {
        this.PurpBuilder = com.anz.fastpayment.inward.avro.Purpose.newBuilder(other.getPurpBuilder());
      }
      if (isValidValue(fields()[14], other.RmtInf)) {
        this.RmtInf = data().deepCopy(fields()[14].schema(), other.RmtInf);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (other.hasRmtInfBuilder()) {
        this.RmtInfBuilder = com.anz.fastpayment.inward.avro.RemittanceInformation.newBuilder(other.getRmtInfBuilder());
      }
      if (isValidValue(fields()[15], other.DrctDbtTx)) {
        this.DrctDbtTx = data().deepCopy(fields()[15].schema(), other.DrctDbtTx);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (other.hasDrctDbtTxBuilder()) {
        this.DrctDbtTxBuilder = com.anz.fastpayment.inward.avro.DirectDebitTransaction.newBuilder(other.getDrctDbtTxBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DirectDebitTransactionInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.PmtId)) {
        this.PmtId = data().deepCopy(fields()[0].schema(), other.PmtId);
        fieldSetFlags()[0] = true;
      }
      this.PmtIdBuilder = null;
      if (isValidValue(fields()[1], other.IntrBkSttlmAmt)) {
        this.IntrBkSttlmAmt = data().deepCopy(fields()[1].schema(), other.IntrBkSttlmAmt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IntrBkSttlmAmtMinor)) {
        this.IntrBkSttlmAmtMinor = data().deepCopy(fields()[2].schema(), other.IntrBkSttlmAmtMinor);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.IntrBkSttlmCCY)) {
        this.IntrBkSttlmCCY = data().deepCopy(fields()[3].schema(), other.IntrBkSttlmCCY);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.IntrBkSttlmDt)) {
        this.IntrBkSttlmDt = data().deepCopy(fields()[4].schema(), other.IntrBkSttlmDt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.InstgAgt)) {
        this.InstgAgt = data().deepCopy(fields()[5].schema(), other.InstgAgt);
        fieldSetFlags()[5] = true;
      }
      this.InstgAgtBuilder = null;
      if (isValidValue(fields()[6], other.InstdAgt)) {
        this.InstdAgt = data().deepCopy(fields()[6].schema(), other.InstdAgt);
        fieldSetFlags()[6] = true;
      }
      this.InstdAgtBuilder = null;
      if (isValidValue(fields()[7], other.Dbtr)) {
        this.Dbtr = data().deepCopy(fields()[7].schema(), other.Dbtr);
        fieldSetFlags()[7] = true;
      }
      this.DbtrBuilder = null;
      if (isValidValue(fields()[8], other.DbtrAcct)) {
        this.DbtrAcct = data().deepCopy(fields()[8].schema(), other.DbtrAcct);
        fieldSetFlags()[8] = true;
      }
      this.DbtrAcctBuilder = null;
      if (isValidValue(fields()[9], other.DbtrAgt)) {
        this.DbtrAgt = data().deepCopy(fields()[9].schema(), other.DbtrAgt);
        fieldSetFlags()[9] = true;
      }
      this.DbtrAgtBuilder = null;
      if (isValidValue(fields()[10], other.CdtrAgt)) {
        this.CdtrAgt = data().deepCopy(fields()[10].schema(), other.CdtrAgt);
        fieldSetFlags()[10] = true;
      }
      this.CdtrAgtBuilder = null;
      if (isValidValue(fields()[11], other.Cdtr)) {
        this.Cdtr = data().deepCopy(fields()[11].schema(), other.Cdtr);
        fieldSetFlags()[11] = true;
      }
      this.CdtrBuilder = null;
      if (isValidValue(fields()[12], other.CdtrAcct)) {
        this.CdtrAcct = data().deepCopy(fields()[12].schema(), other.CdtrAcct);
        fieldSetFlags()[12] = true;
      }
      this.CdtrAcctBuilder = null;
      if (isValidValue(fields()[13], other.Purp)) {
        this.Purp = data().deepCopy(fields()[13].schema(), other.Purp);
        fieldSetFlags()[13] = true;
      }
      this.PurpBuilder = null;
      if (isValidValue(fields()[14], other.RmtInf)) {
        this.RmtInf = data().deepCopy(fields()[14].schema(), other.RmtInf);
        fieldSetFlags()[14] = true;
      }
      this.RmtInfBuilder = null;
      if (isValidValue(fields()[15], other.DrctDbtTx)) {
        this.DrctDbtTx = data().deepCopy(fields()[15].schema(), other.DrctDbtTx);
        fieldSetFlags()[15] = true;
      }
      this.DrctDbtTxBuilder = null;
    }

    /**
      * Gets the value of the 'PmtId' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.PaymentId getPmtId() {
      return PmtId;
    }


    /**
      * Sets the value of the 'PmtId' field.
      * @param value The value of 'PmtId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setPmtId(com.anz.fastpayment.inward.avro.PaymentId value) {
      validate(fields()[0], value);
      this.PmtIdBuilder = null;
      this.PmtId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'PmtId' field has been set.
      * @return True if the 'PmtId' field has been set, false otherwise.
      */
    public boolean hasPmtId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'PmtId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.PaymentId.Builder getPmtIdBuilder() {
      if (PmtIdBuilder == null) {
        if (hasPmtId()) {
          setPmtIdBuilder(com.anz.fastpayment.inward.avro.PaymentId.newBuilder(PmtId));
        } else {
          setPmtIdBuilder(com.anz.fastpayment.inward.avro.PaymentId.newBuilder());
        }
      }
      return PmtIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'PmtId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setPmtIdBuilder(com.anz.fastpayment.inward.avro.PaymentId.Builder value) {
      clearPmtId();
      PmtIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'PmtId' field has an active Builder instance
     * @return True if the 'PmtId' field has an active Builder instance
     */
    public boolean hasPmtIdBuilder() {
      return PmtIdBuilder != null;
    }

    /**
      * Clears the value of the 'PmtId' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearPmtId() {
      PmtId = null;
      PmtIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'IntrBkSttlmAmt' field.
      * Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
      * @return The value.
      */
    public double getIntrBkSttlmAmt() {
      return IntrBkSttlmAmt;
    }


    /**
      * Sets the value of the 'IntrBkSttlmAmt' field.
      * Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
      * @param value The value of 'IntrBkSttlmAmt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setIntrBkSttlmAmt(double value) {
      validate(fields()[1], value);
      this.IntrBkSttlmAmt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'IntrBkSttlmAmt' field has been set.
      * Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
      * @return True if the 'IntrBkSttlmAmt' field has been set, false otherwise.
      */
    public boolean hasIntrBkSttlmAmt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'IntrBkSttlmAmt' field.
      * Inter-bank settlement amount (legacy field - use IntrBkSttlmAmtMinor for precision)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearIntrBkSttlmAmt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'IntrBkSttlmAmtMinor' field.
      * Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return The value.
      */
    public long getIntrBkSttlmAmtMinor() {
      return IntrBkSttlmAmtMinor;
    }


    /**
      * Sets the value of the 'IntrBkSttlmAmtMinor' field.
      * Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
      * @param value The value of 'IntrBkSttlmAmtMinor'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setIntrBkSttlmAmtMinor(long value) {
      validate(fields()[2], value);
      this.IntrBkSttlmAmtMinor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'IntrBkSttlmAmtMinor' field has been set.
      * Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return True if the 'IntrBkSttlmAmtMinor' field has been set, false otherwise.
      */
    public boolean hasIntrBkSttlmAmtMinor() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'IntrBkSttlmAmtMinor' field.
      * Inter-bank settlement amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearIntrBkSttlmAmtMinor() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'IntrBkSttlmCCY' field.
      * @return The value.
      */
    public java.lang.String getIntrBkSttlmCCY() {
      return IntrBkSttlmCCY;
    }


    /**
      * Sets the value of the 'IntrBkSttlmCCY' field.
      * @param value The value of 'IntrBkSttlmCCY'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setIntrBkSttlmCCY(java.lang.String value) {
      validate(fields()[3], value);
      this.IntrBkSttlmCCY = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'IntrBkSttlmCCY' field has been set.
      * @return True if the 'IntrBkSttlmCCY' field has been set, false otherwise.
      */
    public boolean hasIntrBkSttlmCCY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'IntrBkSttlmCCY' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearIntrBkSttlmCCY() {
      IntrBkSttlmCCY = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'IntrBkSttlmDt' field.
      * @return The value.
      */
    public java.lang.String getIntrBkSttlmDt() {
      return IntrBkSttlmDt;
    }


    /**
      * Sets the value of the 'IntrBkSttlmDt' field.
      * @param value The value of 'IntrBkSttlmDt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setIntrBkSttlmDt(java.lang.String value) {
      validate(fields()[4], value);
      this.IntrBkSttlmDt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'IntrBkSttlmDt' field has been set.
      * @return True if the 'IntrBkSttlmDt' field has been set, false otherwise.
      */
    public boolean hasIntrBkSttlmDt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'IntrBkSttlmDt' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearIntrBkSttlmDt() {
      IntrBkSttlmDt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstgAgt' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.InstructingAgent getInstgAgt() {
      return InstgAgt;
    }


    /**
      * Sets the value of the 'InstgAgt' field.
      * @param value The value of 'InstgAgt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setInstgAgt(com.anz.fastpayment.inward.avro.InstructingAgent value) {
      validate(fields()[5], value);
      this.InstgAgtBuilder = null;
      this.InstgAgt = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'InstgAgt' field has been set.
      * @return True if the 'InstgAgt' field has been set, false otherwise.
      */
    public boolean hasInstgAgt() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'InstgAgt' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.InstructingAgent.Builder getInstgAgtBuilder() {
      if (InstgAgtBuilder == null) {
        if (hasInstgAgt()) {
          setInstgAgtBuilder(com.anz.fastpayment.inward.avro.InstructingAgent.newBuilder(InstgAgt));
        } else {
          setInstgAgtBuilder(com.anz.fastpayment.inward.avro.InstructingAgent.newBuilder());
        }
      }
      return InstgAgtBuilder;
    }

    /**
     * Sets the Builder instance for the 'InstgAgt' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setInstgAgtBuilder(com.anz.fastpayment.inward.avro.InstructingAgent.Builder value) {
      clearInstgAgt();
      InstgAgtBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'InstgAgt' field has an active Builder instance
     * @return True if the 'InstgAgt' field has an active Builder instance
     */
    public boolean hasInstgAgtBuilder() {
      return InstgAgtBuilder != null;
    }

    /**
      * Clears the value of the 'InstgAgt' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearInstgAgt() {
      InstgAgt = null;
      InstgAgtBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstdAgt' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.InstructedAgent getInstdAgt() {
      return InstdAgt;
    }


    /**
      * Sets the value of the 'InstdAgt' field.
      * @param value The value of 'InstdAgt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setInstdAgt(com.anz.fastpayment.inward.avro.InstructedAgent value) {
      validate(fields()[6], value);
      this.InstdAgtBuilder = null;
      this.InstdAgt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'InstdAgt' field has been set.
      * @return True if the 'InstdAgt' field has been set, false otherwise.
      */
    public boolean hasInstdAgt() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'InstdAgt' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.InstructedAgent.Builder getInstdAgtBuilder() {
      if (InstdAgtBuilder == null) {
        if (hasInstdAgt()) {
          setInstdAgtBuilder(com.anz.fastpayment.inward.avro.InstructedAgent.newBuilder(InstdAgt));
        } else {
          setInstdAgtBuilder(com.anz.fastpayment.inward.avro.InstructedAgent.newBuilder());
        }
      }
      return InstdAgtBuilder;
    }

    /**
     * Sets the Builder instance for the 'InstdAgt' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setInstdAgtBuilder(com.anz.fastpayment.inward.avro.InstructedAgent.Builder value) {
      clearInstdAgt();
      InstdAgtBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'InstdAgt' field has an active Builder instance
     * @return True if the 'InstdAgt' field has an active Builder instance
     */
    public boolean hasInstdAgtBuilder() {
      return InstdAgtBuilder != null;
    }

    /**
      * Clears the value of the 'InstdAgt' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearInstdAgt() {
      InstdAgt = null;
      InstdAgtBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Dbtr' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.Debtor getDbtr() {
      return Dbtr;
    }


    /**
      * Sets the value of the 'Dbtr' field.
      * @param value The value of 'Dbtr'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtr(com.anz.fastpayment.inward.avro.Debtor value) {
      validate(fields()[7], value);
      this.DbtrBuilder = null;
      this.Dbtr = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Dbtr' field has been set.
      * @return True if the 'Dbtr' field has been set, false otherwise.
      */
    public boolean hasDbtr() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'Dbtr' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.Debtor.Builder getDbtrBuilder() {
      if (DbtrBuilder == null) {
        if (hasDbtr()) {
          setDbtrBuilder(com.anz.fastpayment.inward.avro.Debtor.newBuilder(Dbtr));
        } else {
          setDbtrBuilder(com.anz.fastpayment.inward.avro.Debtor.newBuilder());
        }
      }
      return DbtrBuilder;
    }

    /**
     * Sets the Builder instance for the 'Dbtr' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtrBuilder(com.anz.fastpayment.inward.avro.Debtor.Builder value) {
      clearDbtr();
      DbtrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Dbtr' field has an active Builder instance
     * @return True if the 'Dbtr' field has an active Builder instance
     */
    public boolean hasDbtrBuilder() {
      return DbtrBuilder != null;
    }

    /**
      * Clears the value of the 'Dbtr' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearDbtr() {
      Dbtr = null;
      DbtrBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'DbtrAcct' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.DebtorAccount getDbtrAcct() {
      return DbtrAcct;
    }


    /**
      * Sets the value of the 'DbtrAcct' field.
      * @param value The value of 'DbtrAcct'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtrAcct(com.anz.fastpayment.inward.avro.DebtorAccount value) {
      validate(fields()[8], value);
      this.DbtrAcctBuilder = null;
      this.DbtrAcct = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'DbtrAcct' field has been set.
      * @return True if the 'DbtrAcct' field has been set, false otherwise.
      */
    public boolean hasDbtrAcct() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'DbtrAcct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.DebtorAccount.Builder getDbtrAcctBuilder() {
      if (DbtrAcctBuilder == null) {
        if (hasDbtrAcct()) {
          setDbtrAcctBuilder(com.anz.fastpayment.inward.avro.DebtorAccount.newBuilder(DbtrAcct));
        } else {
          setDbtrAcctBuilder(com.anz.fastpayment.inward.avro.DebtorAccount.newBuilder());
        }
      }
      return DbtrAcctBuilder;
    }

    /**
     * Sets the Builder instance for the 'DbtrAcct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtrAcctBuilder(com.anz.fastpayment.inward.avro.DebtorAccount.Builder value) {
      clearDbtrAcct();
      DbtrAcctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'DbtrAcct' field has an active Builder instance
     * @return True if the 'DbtrAcct' field has an active Builder instance
     */
    public boolean hasDbtrAcctBuilder() {
      return DbtrAcctBuilder != null;
    }

    /**
      * Clears the value of the 'DbtrAcct' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearDbtrAcct() {
      DbtrAcct = null;
      DbtrAcctBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'DbtrAgt' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.DebtorAgent getDbtrAgt() {
      return DbtrAgt;
    }


    /**
      * Sets the value of the 'DbtrAgt' field.
      * @param value The value of 'DbtrAgt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtrAgt(com.anz.fastpayment.inward.avro.DebtorAgent value) {
      validate(fields()[9], value);
      this.DbtrAgtBuilder = null;
      this.DbtrAgt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'DbtrAgt' field has been set.
      * @return True if the 'DbtrAgt' field has been set, false otherwise.
      */
    public boolean hasDbtrAgt() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'DbtrAgt' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.DebtorAgent.Builder getDbtrAgtBuilder() {
      if (DbtrAgtBuilder == null) {
        if (hasDbtrAgt()) {
          setDbtrAgtBuilder(com.anz.fastpayment.inward.avro.DebtorAgent.newBuilder(DbtrAgt));
        } else {
          setDbtrAgtBuilder(com.anz.fastpayment.inward.avro.DebtorAgent.newBuilder());
        }
      }
      return DbtrAgtBuilder;
    }

    /**
     * Sets the Builder instance for the 'DbtrAgt' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDbtrAgtBuilder(com.anz.fastpayment.inward.avro.DebtorAgent.Builder value) {
      clearDbtrAgt();
      DbtrAgtBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'DbtrAgt' field has an active Builder instance
     * @return True if the 'DbtrAgt' field has an active Builder instance
     */
    public boolean hasDbtrAgtBuilder() {
      return DbtrAgtBuilder != null;
    }

    /**
      * Clears the value of the 'DbtrAgt' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearDbtrAgt() {
      DbtrAgt = null;
      DbtrAgtBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'CdtrAgt' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.CreditorAgent getCdtrAgt() {
      return CdtrAgt;
    }


    /**
      * Sets the value of the 'CdtrAgt' field.
      * @param value The value of 'CdtrAgt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtrAgt(com.anz.fastpayment.inward.avro.CreditorAgent value) {
      validate(fields()[10], value);
      this.CdtrAgtBuilder = null;
      this.CdtrAgt = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'CdtrAgt' field has been set.
      * @return True if the 'CdtrAgt' field has been set, false otherwise.
      */
    public boolean hasCdtrAgt() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'CdtrAgt' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.CreditorAgent.Builder getCdtrAgtBuilder() {
      if (CdtrAgtBuilder == null) {
        if (hasCdtrAgt()) {
          setCdtrAgtBuilder(com.anz.fastpayment.inward.avro.CreditorAgent.newBuilder(CdtrAgt));
        } else {
          setCdtrAgtBuilder(com.anz.fastpayment.inward.avro.CreditorAgent.newBuilder());
        }
      }
      return CdtrAgtBuilder;
    }

    /**
     * Sets the Builder instance for the 'CdtrAgt' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtrAgtBuilder(com.anz.fastpayment.inward.avro.CreditorAgent.Builder value) {
      clearCdtrAgt();
      CdtrAgtBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'CdtrAgt' field has an active Builder instance
     * @return True if the 'CdtrAgt' field has an active Builder instance
     */
    public boolean hasCdtrAgtBuilder() {
      return CdtrAgtBuilder != null;
    }

    /**
      * Clears the value of the 'CdtrAgt' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearCdtrAgt() {
      CdtrAgt = null;
      CdtrAgtBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'Cdtr' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.Creditor getCdtr() {
      return Cdtr;
    }


    /**
      * Sets the value of the 'Cdtr' field.
      * @param value The value of 'Cdtr'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtr(com.anz.fastpayment.inward.avro.Creditor value) {
      validate(fields()[11], value);
      this.CdtrBuilder = null;
      this.Cdtr = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'Cdtr' field has been set.
      * @return True if the 'Cdtr' field has been set, false otherwise.
      */
    public boolean hasCdtr() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'Cdtr' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.Creditor.Builder getCdtrBuilder() {
      if (CdtrBuilder == null) {
        if (hasCdtr()) {
          setCdtrBuilder(com.anz.fastpayment.inward.avro.Creditor.newBuilder(Cdtr));
        } else {
          setCdtrBuilder(com.anz.fastpayment.inward.avro.Creditor.newBuilder());
        }
      }
      return CdtrBuilder;
    }

    /**
     * Sets the Builder instance for the 'Cdtr' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtrBuilder(com.anz.fastpayment.inward.avro.Creditor.Builder value) {
      clearCdtr();
      CdtrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Cdtr' field has an active Builder instance
     * @return True if the 'Cdtr' field has an active Builder instance
     */
    public boolean hasCdtrBuilder() {
      return CdtrBuilder != null;
    }

    /**
      * Clears the value of the 'Cdtr' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearCdtr() {
      Cdtr = null;
      CdtrBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'CdtrAcct' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.CreditorAccount getCdtrAcct() {
      return CdtrAcct;
    }


    /**
      * Sets the value of the 'CdtrAcct' field.
      * @param value The value of 'CdtrAcct'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtrAcct(com.anz.fastpayment.inward.avro.CreditorAccount value) {
      validate(fields()[12], value);
      this.CdtrAcctBuilder = null;
      this.CdtrAcct = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'CdtrAcct' field has been set.
      * @return True if the 'CdtrAcct' field has been set, false otherwise.
      */
    public boolean hasCdtrAcct() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'CdtrAcct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.CreditorAccount.Builder getCdtrAcctBuilder() {
      if (CdtrAcctBuilder == null) {
        if (hasCdtrAcct()) {
          setCdtrAcctBuilder(com.anz.fastpayment.inward.avro.CreditorAccount.newBuilder(CdtrAcct));
        } else {
          setCdtrAcctBuilder(com.anz.fastpayment.inward.avro.CreditorAccount.newBuilder());
        }
      }
      return CdtrAcctBuilder;
    }

    /**
     * Sets the Builder instance for the 'CdtrAcct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setCdtrAcctBuilder(com.anz.fastpayment.inward.avro.CreditorAccount.Builder value) {
      clearCdtrAcct();
      CdtrAcctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'CdtrAcct' field has an active Builder instance
     * @return True if the 'CdtrAcct' field has an active Builder instance
     */
    public boolean hasCdtrAcctBuilder() {
      return CdtrAcctBuilder != null;
    }

    /**
      * Clears the value of the 'CdtrAcct' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearCdtrAcct() {
      CdtrAcct = null;
      CdtrAcctBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'Purp' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.Purpose getPurp() {
      return Purp;
    }


    /**
      * Sets the value of the 'Purp' field.
      * @param value The value of 'Purp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setPurp(com.anz.fastpayment.inward.avro.Purpose value) {
      validate(fields()[13], value);
      this.PurpBuilder = null;
      this.Purp = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'Purp' field has been set.
      * @return True if the 'Purp' field has been set, false otherwise.
      */
    public boolean hasPurp() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'Purp' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.Purpose.Builder getPurpBuilder() {
      if (PurpBuilder == null) {
        if (hasPurp()) {
          setPurpBuilder(com.anz.fastpayment.inward.avro.Purpose.newBuilder(Purp));
        } else {
          setPurpBuilder(com.anz.fastpayment.inward.avro.Purpose.newBuilder());
        }
      }
      return PurpBuilder;
    }

    /**
     * Sets the Builder instance for the 'Purp' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setPurpBuilder(com.anz.fastpayment.inward.avro.Purpose.Builder value) {
      clearPurp();
      PurpBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Purp' field has an active Builder instance
     * @return True if the 'Purp' field has an active Builder instance
     */
    public boolean hasPurpBuilder() {
      return PurpBuilder != null;
    }

    /**
      * Clears the value of the 'Purp' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearPurp() {
      Purp = null;
      PurpBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'RmtInf' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.RemittanceInformation getRmtInf() {
      return RmtInf;
    }


    /**
      * Sets the value of the 'RmtInf' field.
      * @param value The value of 'RmtInf'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setRmtInf(com.anz.fastpayment.inward.avro.RemittanceInformation value) {
      validate(fields()[14], value);
      this.RmtInfBuilder = null;
      this.RmtInf = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'RmtInf' field has been set.
      * @return True if the 'RmtInf' field has been set, false otherwise.
      */
    public boolean hasRmtInf() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'RmtInf' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.RemittanceInformation.Builder getRmtInfBuilder() {
      if (RmtInfBuilder == null) {
        if (hasRmtInf()) {
          setRmtInfBuilder(com.anz.fastpayment.inward.avro.RemittanceInformation.newBuilder(RmtInf));
        } else {
          setRmtInfBuilder(com.anz.fastpayment.inward.avro.RemittanceInformation.newBuilder());
        }
      }
      return RmtInfBuilder;
    }

    /**
     * Sets the Builder instance for the 'RmtInf' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setRmtInfBuilder(com.anz.fastpayment.inward.avro.RemittanceInformation.Builder value) {
      clearRmtInf();
      RmtInfBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'RmtInf' field has an active Builder instance
     * @return True if the 'RmtInf' field has an active Builder instance
     */
    public boolean hasRmtInfBuilder() {
      return RmtInfBuilder != null;
    }

    /**
      * Clears the value of the 'RmtInf' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearRmtInf() {
      RmtInf = null;
      RmtInfBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'DrctDbtTx' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransaction getDrctDbtTx() {
      return DrctDbtTx;
    }


    /**
      * Sets the value of the 'DrctDbtTx' field.
      * @param value The value of 'DrctDbtTx'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDrctDbtTx(com.anz.fastpayment.inward.avro.DirectDebitTransaction value) {
      validate(fields()[15], value);
      this.DrctDbtTxBuilder = null;
      this.DrctDbtTx = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'DrctDbtTx' field has been set.
      * @return True if the 'DrctDbtTx' field has been set, false otherwise.
      */
    public boolean hasDrctDbtTx() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'DrctDbtTx' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.DirectDebitTransaction.Builder getDrctDbtTxBuilder() {
      if (DrctDbtTxBuilder == null) {
        if (hasDrctDbtTx()) {
          setDrctDbtTxBuilder(com.anz.fastpayment.inward.avro.DirectDebitTransaction.newBuilder(DrctDbtTx));
        } else {
          setDrctDbtTxBuilder(com.anz.fastpayment.inward.avro.DirectDebitTransaction.newBuilder());
        }
      }
      return DrctDbtTxBuilder;
    }

    /**
     * Sets the Builder instance for the 'DrctDbtTx' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder setDrctDbtTxBuilder(com.anz.fastpayment.inward.avro.DirectDebitTransaction.Builder value) {
      clearDrctDbtTx();
      DrctDbtTxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'DrctDbtTx' field has an active Builder instance
     * @return True if the 'DrctDbtTx' field has an active Builder instance
     */
    public boolean hasDrctDbtTxBuilder() {
      return DrctDbtTxBuilder != null;
    }

    /**
      * Clears the value of the 'DrctDbtTx' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.DirectDebitTransactionInfo.Builder clearDrctDbtTx() {
      DrctDbtTx = null;
      DrctDbtTxBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DirectDebitTransactionInfo build() {
      try {
        DirectDebitTransactionInfo record = new DirectDebitTransactionInfo();
        if (PmtIdBuilder != null) {
          try {
            record.PmtId = this.PmtIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("PmtId"));
            throw e;
          }
        } else {
          record.PmtId = fieldSetFlags()[0] ? this.PmtId : (com.anz.fastpayment.inward.avro.PaymentId) defaultValue(fields()[0]);
        }
        record.IntrBkSttlmAmt = fieldSetFlags()[1] ? this.IntrBkSttlmAmt : (java.lang.Double) defaultValue(fields()[1]);
        record.IntrBkSttlmAmtMinor = fieldSetFlags()[2] ? this.IntrBkSttlmAmtMinor : (java.lang.Long) defaultValue(fields()[2]);
        record.IntrBkSttlmCCY = fieldSetFlags()[3] ? this.IntrBkSttlmCCY : (java.lang.String) defaultValue(fields()[3]);
        record.IntrBkSttlmDt = fieldSetFlags()[4] ? this.IntrBkSttlmDt : (java.lang.String) defaultValue(fields()[4]);
        if (InstgAgtBuilder != null) {
          try {
            record.InstgAgt = this.InstgAgtBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("InstgAgt"));
            throw e;
          }
        } else {
          record.InstgAgt = fieldSetFlags()[5] ? this.InstgAgt : (com.anz.fastpayment.inward.avro.InstructingAgent) defaultValue(fields()[5]);
        }
        if (InstdAgtBuilder != null) {
          try {
            record.InstdAgt = this.InstdAgtBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("InstdAgt"));
            throw e;
          }
        } else {
          record.InstdAgt = fieldSetFlags()[6] ? this.InstdAgt : (com.anz.fastpayment.inward.avro.InstructedAgent) defaultValue(fields()[6]);
        }
        if (DbtrBuilder != null) {
          try {
            record.Dbtr = this.DbtrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Dbtr"));
            throw e;
          }
        } else {
          record.Dbtr = fieldSetFlags()[7] ? this.Dbtr : (com.anz.fastpayment.inward.avro.Debtor) defaultValue(fields()[7]);
        }
        if (DbtrAcctBuilder != null) {
          try {
            record.DbtrAcct = this.DbtrAcctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("DbtrAcct"));
            throw e;
          }
        } else {
          record.DbtrAcct = fieldSetFlags()[8] ? this.DbtrAcct : (com.anz.fastpayment.inward.avro.DebtorAccount) defaultValue(fields()[8]);
        }
        if (DbtrAgtBuilder != null) {
          try {
            record.DbtrAgt = this.DbtrAgtBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("DbtrAgt"));
            throw e;
          }
        } else {
          record.DbtrAgt = fieldSetFlags()[9] ? this.DbtrAgt : (com.anz.fastpayment.inward.avro.DebtorAgent) defaultValue(fields()[9]);
        }
        if (CdtrAgtBuilder != null) {
          try {
            record.CdtrAgt = this.CdtrAgtBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("CdtrAgt"));
            throw e;
          }
        } else {
          record.CdtrAgt = fieldSetFlags()[10] ? this.CdtrAgt : (com.anz.fastpayment.inward.avro.CreditorAgent) defaultValue(fields()[10]);
        }
        if (CdtrBuilder != null) {
          try {
            record.Cdtr = this.CdtrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Cdtr"));
            throw e;
          }
        } else {
          record.Cdtr = fieldSetFlags()[11] ? this.Cdtr : (com.anz.fastpayment.inward.avro.Creditor) defaultValue(fields()[11]);
        }
        if (CdtrAcctBuilder != null) {
          try {
            record.CdtrAcct = this.CdtrAcctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("CdtrAcct"));
            throw e;
          }
        } else {
          record.CdtrAcct = fieldSetFlags()[12] ? this.CdtrAcct : (com.anz.fastpayment.inward.avro.CreditorAccount) defaultValue(fields()[12]);
        }
        if (PurpBuilder != null) {
          try {
            record.Purp = this.PurpBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Purp"));
            throw e;
          }
        } else {
          record.Purp = fieldSetFlags()[13] ? this.Purp : (com.anz.fastpayment.inward.avro.Purpose) defaultValue(fields()[13]);
        }
        if (RmtInfBuilder != null) {
          try {
            record.RmtInf = this.RmtInfBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("RmtInf"));
            throw e;
          }
        } else {
          record.RmtInf = fieldSetFlags()[14] ? this.RmtInf : (com.anz.fastpayment.inward.avro.RemittanceInformation) defaultValue(fields()[14]);
        }
        if (DrctDbtTxBuilder != null) {
          try {
            record.DrctDbtTx = this.DrctDbtTxBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("DrctDbtTx"));
            throw e;
          }
        } else {
          record.DrctDbtTx = fieldSetFlags()[15] ? this.DrctDbtTx : (com.anz.fastpayment.inward.avro.DirectDebitTransaction) defaultValue(fields()[15]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DirectDebitTransactionInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<DirectDebitTransactionInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DirectDebitTransactionInfo>
    READER$ = (org.apache.avro.io.DatumReader<DirectDebitTransactionInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.PmtId == null) {
      throw new IllegalStateException("PmtId cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.PmtId.customEncode(out);

    out.writeDouble(this.IntrBkSttlmAmt);

    out.writeLong(this.IntrBkSttlmAmtMinor);

    if (this.IntrBkSttlmCCY == null) {
      throw new IllegalStateException("IntrBkSttlmCCY cannot be null for DirectDebitTransactionInfo encoding");
    }
    out.writeString(this.IntrBkSttlmCCY);

    if (this.IntrBkSttlmDt == null) {
      throw new IllegalStateException("IntrBkSttlmDt cannot be null for DirectDebitTransactionInfo encoding");
    }
    out.writeString(this.IntrBkSttlmDt);

    if (this.InstgAgt == null) {
      throw new IllegalStateException("InstgAgt cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.InstgAgt.customEncode(out);

    if (this.InstdAgt == null) {
      throw new IllegalStateException("InstdAgt cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.InstdAgt.customEncode(out);

    if (this.Dbtr == null) {
      throw new IllegalStateException("Dbtr cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.Dbtr.customEncode(out);

    if (this.DbtrAcct == null) {
      throw new IllegalStateException("DbtrAcct cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.DbtrAcct.customEncode(out);

    if (this.DbtrAgt == null) {
      throw new IllegalStateException("DbtrAgt cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.DbtrAgt.customEncode(out);

    if (this.CdtrAgt == null) {
      throw new IllegalStateException("CdtrAgt cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.CdtrAgt.customEncode(out);

    if (this.Cdtr == null) {
      throw new IllegalStateException("Cdtr cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.Cdtr.customEncode(out);

    if (this.CdtrAcct == null) {
      throw new IllegalStateException("CdtrAcct cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.CdtrAcct.customEncode(out);

    if (this.Purp == null) {
      throw new IllegalStateException("Purp cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.Purp.customEncode(out);

    if (this.RmtInf == null) {
      throw new IllegalStateException("RmtInf cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.RmtInf.customEncode(out);

    if (this.DrctDbtTx == null) {
      throw new IllegalStateException("DrctDbtTx cannot be null for DirectDebitTransactionInfo encoding");
    }
    this.DrctDbtTx.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.PmtId == null) {
        this.PmtId = new com.anz.fastpayment.inward.avro.PaymentId();
      }
      this.PmtId.customDecode(in);

      this.IntrBkSttlmAmt = in.readDouble();

      this.IntrBkSttlmAmtMinor = in.readLong();

      this.IntrBkSttlmCCY = in.readString();

      this.IntrBkSttlmDt = in.readString();

      if (this.InstgAgt == null) {
        this.InstgAgt = new com.anz.fastpayment.inward.avro.InstructingAgent();
      }
      this.InstgAgt.customDecode(in);

      if (this.InstdAgt == null) {
        this.InstdAgt = new com.anz.fastpayment.inward.avro.InstructedAgent();
      }
      this.InstdAgt.customDecode(in);

      if (this.Dbtr == null) {
        this.Dbtr = new com.anz.fastpayment.inward.avro.Debtor();
      }
      this.Dbtr.customDecode(in);

      if (this.DbtrAcct == null) {
        this.DbtrAcct = new com.anz.fastpayment.inward.avro.DebtorAccount();
      }
      this.DbtrAcct.customDecode(in);

      if (this.DbtrAgt == null) {
        this.DbtrAgt = new com.anz.fastpayment.inward.avro.DebtorAgent();
      }
      this.DbtrAgt.customDecode(in);

      if (this.CdtrAgt == null) {
        this.CdtrAgt = new com.anz.fastpayment.inward.avro.CreditorAgent();
      }
      this.CdtrAgt.customDecode(in);

      if (this.Cdtr == null) {
        this.Cdtr = new com.anz.fastpayment.inward.avro.Creditor();
      }
      this.Cdtr.customDecode(in);

      if (this.CdtrAcct == null) {
        this.CdtrAcct = new com.anz.fastpayment.inward.avro.CreditorAccount();
      }
      this.CdtrAcct.customDecode(in);

      if (this.Purp == null) {
        this.Purp = new com.anz.fastpayment.inward.avro.Purpose();
      }
      this.Purp.customDecode(in);

      if (this.RmtInf == null) {
        this.RmtInf = new com.anz.fastpayment.inward.avro.RemittanceInformation();
      }
      this.RmtInf.customDecode(in);

      if (this.DrctDbtTx == null) {
        this.DrctDbtTx = new com.anz.fastpayment.inward.avro.DirectDebitTransaction();
      }
      this.DrctDbtTx.customDecode(in);

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.PmtId == null) {
            this.PmtId = new com.anz.fastpayment.inward.avro.PaymentId();
          }
          this.PmtId.customDecode(in);
          break;

        case 1:
          this.IntrBkSttlmAmt = in.readDouble();
          break;

        case 2:
          this.IntrBkSttlmAmtMinor = in.readLong();
          break;

        case 3:
          this.IntrBkSttlmCCY = in.readString();
          break;

        case 4:
          this.IntrBkSttlmDt = in.readString();
          break;

        case 5:
          if (this.InstgAgt == null) {
            this.InstgAgt = new com.anz.fastpayment.inward.avro.InstructingAgent();
          }
          this.InstgAgt.customDecode(in);
          break;

        case 6:
          if (this.InstdAgt == null) {
            this.InstdAgt = new com.anz.fastpayment.inward.avro.InstructedAgent();
          }
          this.InstdAgt.customDecode(in);
          break;

        case 7:
          if (this.Dbtr == null) {
            this.Dbtr = new com.anz.fastpayment.inward.avro.Debtor();
          }
          this.Dbtr.customDecode(in);
          break;

        case 8:
          if (this.DbtrAcct == null) {
            this.DbtrAcct = new com.anz.fastpayment.inward.avro.DebtorAccount();
          }
          this.DbtrAcct.customDecode(in);
          break;

        case 9:
          if (this.DbtrAgt == null) {
            this.DbtrAgt = new com.anz.fastpayment.inward.avro.DebtorAgent();
          }
          this.DbtrAgt.customDecode(in);
          break;

        case 10:
          if (this.CdtrAgt == null) {
            this.CdtrAgt = new com.anz.fastpayment.inward.avro.CreditorAgent();
          }
          this.CdtrAgt.customDecode(in);
          break;

        case 11:
          if (this.Cdtr == null) {
            this.Cdtr = new com.anz.fastpayment.inward.avro.Creditor();
          }
          this.Cdtr.customDecode(in);
          break;

        case 12:
          if (this.CdtrAcct == null) {
            this.CdtrAcct = new com.anz.fastpayment.inward.avro.CreditorAccount();
          }
          this.CdtrAcct.customDecode(in);
          break;

        case 13:
          if (this.Purp == null) {
            this.Purp = new com.anz.fastpayment.inward.avro.Purpose();
          }
          this.Purp.customDecode(in);
          break;

        case 14:
          if (this.RmtInf == null) {
            this.RmtInf = new com.anz.fastpayment.inward.avro.RemittanceInformation();
          }
          this.RmtInf.customDecode(in);
          break;

        case 15:
          if (this.DrctDbtTx == null) {
            this.DrctDbtTx = new com.anz.fastpayment.inward.avro.DirectDebitTransaction();
          }
          this.DrctDbtTx.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










