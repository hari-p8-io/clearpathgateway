/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentAddRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7720727800214438919L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentAddRequest\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"RqUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Request unique identifier\"},{\"name\":\"MsgHdr\",\"type\":{\"type\":\"record\",\"name\":\"PaymentMessageHeader\",\"fields\":[{\"name\":\"ClientDt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ClientName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PartyId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"PayHdr\",\"type\":{\"type\":\"record\",\"name\":\"PaymentHeader\",\"fields\":[{\"name\":\"PODsID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PaymentID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment identifier\"},{\"name\":\"ThirdPartyPayID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PaymentTRN\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PaymentRetRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ProcDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"FromFIData\",\"type\":{\"type\":\"record\",\"name\":\"FromFinancialInstitution\",\"fields\":[{\"name\":\"Country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"FromCust\",\"type\":{\"type\":\"record\",\"name\":\"FromCustomer\",\"fields\":[{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"FromAcct\",\"type\":{\"type\":\"record\",\"name\":\"FromAccount\",\"fields\":[{\"name\":\"AcctId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Account identifier\",\"default\":null},{\"name\":\"AcctSys\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AcctGrp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PmtAuthMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Narrative\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CurCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code\"},{\"name\":\"Amount\",\"type\":\"double\",\"doc\":\"Transaction amount (legacy field - use AmountMinor for precision)\"},{\"name\":\"AmountMinor\",\"type\":\"long\",\"doc\":\"Transaction amount in minor units (e.g., cents for USD) for precise monetary representation\",\"default\":0},{\"name\":\"AcctUse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"ToFIData\",\"type\":{\"type\":\"record\",\"name\":\"ToFinancialInstitution\",\"fields\":[{\"name\":\"Country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"BIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Clearing\",\"type\":{\"type\":\"record\",\"name\":\"ClearingInfo\",\"fields\":[{\"name\":\"ClearPref\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"ToBene\",\"type\":{\"type\":\"record\",\"name\":\"ToBeneficiary\",\"fields\":[{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"ToAcct\",\"type\":{\"type\":\"record\",\"name\":\"ToAccount\",\"fields\":[{\"name\":\"AcctId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Account identifier\",\"default\":null},{\"name\":\"CurCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code\"},{\"name\":\"Amount\",\"type\":\"double\",\"doc\":\"Transaction amount (legacy field - use AmountMinor for precision)\"},{\"name\":\"AmountMinor\",\"type\":\"long\",\"doc\":\"Transaction amount in minor units (e.g., cents for USD) for precise monetary representation\",\"default\":0},{\"name\":\"Narrative\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AcctUse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Fees\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentAddRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentAddRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentAddRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentAddRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentAddRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentAddRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentAddRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentAddRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentAddRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Request unique identifier */
  private java.lang.String RqUID;
  private com.anz.fastpayment.inward.avro.PaymentMessageHeader MsgHdr;
  private com.anz.fastpayment.inward.avro.PaymentHeader PayHdr;
  private com.anz.fastpayment.inward.avro.FromFinancialInstitution FromFIData;
  private com.anz.fastpayment.inward.avro.FromCustomer FromCust;
  private com.anz.fastpayment.inward.avro.FromAccount FromAcct;
  private com.anz.fastpayment.inward.avro.ToFinancialInstitution ToFIData;
  private com.anz.fastpayment.inward.avro.ClearingInfo Clearing;
  private com.anz.fastpayment.inward.avro.ToBeneficiary ToBene;
  private com.anz.fastpayment.inward.avro.ToAccount ToAcct;
  private java.util.List<java.lang.String> Fees;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentAddRequest() {}

  /**
   * All-args constructor.
   * @param RqUID Request unique identifier
   * @param MsgHdr The new value for MsgHdr
   * @param PayHdr The new value for PayHdr
   * @param FromFIData The new value for FromFIData
   * @param FromCust The new value for FromCust
   * @param FromAcct The new value for FromAcct
   * @param ToFIData The new value for ToFIData
   * @param Clearing The new value for Clearing
   * @param ToBene The new value for ToBene
   * @param ToAcct The new value for ToAcct
   * @param Fees The new value for Fees
   */
  public PaymentAddRequest(java.lang.String RqUID, com.anz.fastpayment.inward.avro.PaymentMessageHeader MsgHdr, com.anz.fastpayment.inward.avro.PaymentHeader PayHdr, com.anz.fastpayment.inward.avro.FromFinancialInstitution FromFIData, com.anz.fastpayment.inward.avro.FromCustomer FromCust, com.anz.fastpayment.inward.avro.FromAccount FromAcct, com.anz.fastpayment.inward.avro.ToFinancialInstitution ToFIData, com.anz.fastpayment.inward.avro.ClearingInfo Clearing, com.anz.fastpayment.inward.avro.ToBeneficiary ToBene, com.anz.fastpayment.inward.avro.ToAccount ToAcct, java.util.List<java.lang.String> Fees) {
    this.RqUID = RqUID;
    this.MsgHdr = MsgHdr;
    this.PayHdr = PayHdr;
    this.FromFIData = FromFIData;
    this.FromCust = FromCust;
    this.FromAcct = FromAcct;
    this.ToFIData = ToFIData;
    this.Clearing = Clearing;
    this.ToBene = ToBene;
    this.ToAcct = ToAcct;
    this.Fees = Fees;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return RqUID;
    case 1: return MsgHdr;
    case 2: return PayHdr;
    case 3: return FromFIData;
    case 4: return FromCust;
    case 5: return FromAcct;
    case 6: return ToFIData;
    case 7: return Clearing;
    case 8: return ToBene;
    case 9: return ToAcct;
    case 10: return Fees;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: RqUID = value$ != null ? value$.toString() : null; break;
    case 1: MsgHdr = (com.anz.fastpayment.inward.avro.PaymentMessageHeader)value$; break;
    case 2: PayHdr = (com.anz.fastpayment.inward.avro.PaymentHeader)value$; break;
    case 3: FromFIData = (com.anz.fastpayment.inward.avro.FromFinancialInstitution)value$; break;
    case 4: FromCust = (com.anz.fastpayment.inward.avro.FromCustomer)value$; break;
    case 5: FromAcct = (com.anz.fastpayment.inward.avro.FromAccount)value$; break;
    case 6: ToFIData = (com.anz.fastpayment.inward.avro.ToFinancialInstitution)value$; break;
    case 7: Clearing = (com.anz.fastpayment.inward.avro.ClearingInfo)value$; break;
    case 8: ToBene = (com.anz.fastpayment.inward.avro.ToBeneficiary)value$; break;
    case 9: ToAcct = (com.anz.fastpayment.inward.avro.ToAccount)value$; break;
    case 10: Fees = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'RqUID' field.
   * @return Request unique identifier
   */
  public java.lang.String getRqUID() {
    return RqUID;
  }


  /**
   * Sets the value of the 'RqUID' field.
   * Request unique identifier
   * @param value the value to set.
   */
  public void setRqUID(java.lang.String value) {
    this.RqUID = value;
  }

  /**
   * Gets the value of the 'MsgHdr' field.
   * @return The value of the 'MsgHdr' field.
   */
  public com.anz.fastpayment.inward.avro.PaymentMessageHeader getMsgHdr() {
    return MsgHdr;
  }


  /**
   * Sets the value of the 'MsgHdr' field.
   * @param value the value to set.
   */
  public void setMsgHdr(com.anz.fastpayment.inward.avro.PaymentMessageHeader value) {
    this.MsgHdr = value;
  }

  /**
   * Gets the value of the 'PayHdr' field.
   * @return The value of the 'PayHdr' field.
   */
  public com.anz.fastpayment.inward.avro.PaymentHeader getPayHdr() {
    return PayHdr;
  }


  /**
   * Sets the value of the 'PayHdr' field.
   * @param value the value to set.
   */
  public void setPayHdr(com.anz.fastpayment.inward.avro.PaymentHeader value) {
    this.PayHdr = value;
  }

  /**
   * Gets the value of the 'FromFIData' field.
   * @return The value of the 'FromFIData' field.
   */
  public com.anz.fastpayment.inward.avro.FromFinancialInstitution getFromFIData() {
    return FromFIData;
  }


  /**
   * Sets the value of the 'FromFIData' field.
   * @param value the value to set.
   */
  public void setFromFIData(com.anz.fastpayment.inward.avro.FromFinancialInstitution value) {
    this.FromFIData = value;
  }

  /**
   * Gets the value of the 'FromCust' field.
   * @return The value of the 'FromCust' field.
   */
  public com.anz.fastpayment.inward.avro.FromCustomer getFromCust() {
    return FromCust;
  }


  /**
   * Sets the value of the 'FromCust' field.
   * @param value the value to set.
   */
  public void setFromCust(com.anz.fastpayment.inward.avro.FromCustomer value) {
    this.FromCust = value;
  }

  /**
   * Gets the value of the 'FromAcct' field.
   * @return The value of the 'FromAcct' field.
   */
  public com.anz.fastpayment.inward.avro.FromAccount getFromAcct() {
    return FromAcct;
  }


  /**
   * Sets the value of the 'FromAcct' field.
   * @param value the value to set.
   */
  public void setFromAcct(com.anz.fastpayment.inward.avro.FromAccount value) {
    this.FromAcct = value;
  }

  /**
   * Gets the value of the 'ToFIData' field.
   * @return The value of the 'ToFIData' field.
   */
  public com.anz.fastpayment.inward.avro.ToFinancialInstitution getToFIData() {
    return ToFIData;
  }


  /**
   * Sets the value of the 'ToFIData' field.
   * @param value the value to set.
   */
  public void setToFIData(com.anz.fastpayment.inward.avro.ToFinancialInstitution value) {
    this.ToFIData = value;
  }

  /**
   * Gets the value of the 'Clearing' field.
   * @return The value of the 'Clearing' field.
   */
  public com.anz.fastpayment.inward.avro.ClearingInfo getClearing() {
    return Clearing;
  }


  /**
   * Sets the value of the 'Clearing' field.
   * @param value the value to set.
   */
  public void setClearing(com.anz.fastpayment.inward.avro.ClearingInfo value) {
    this.Clearing = value;
  }

  /**
   * Gets the value of the 'ToBene' field.
   * @return The value of the 'ToBene' field.
   */
  public com.anz.fastpayment.inward.avro.ToBeneficiary getToBene() {
    return ToBene;
  }


  /**
   * Sets the value of the 'ToBene' field.
   * @param value the value to set.
   */
  public void setToBene(com.anz.fastpayment.inward.avro.ToBeneficiary value) {
    this.ToBene = value;
  }

  /**
   * Gets the value of the 'ToAcct' field.
   * @return The value of the 'ToAcct' field.
   */
  public com.anz.fastpayment.inward.avro.ToAccount getToAcct() {
    return ToAcct;
  }


  /**
   * Sets the value of the 'ToAcct' field.
   * @param value the value to set.
   */
  public void setToAcct(com.anz.fastpayment.inward.avro.ToAccount value) {
    this.ToAcct = value;
  }

  /**
   * Gets the value of the 'Fees' field.
   * @return The value of the 'Fees' field.
   */
  public java.util.List<java.lang.String> getFees() {
    return Fees;
  }


  /**
   * Sets the value of the 'Fees' field.
   * @param value the value to set.
   */
  public void setFees(java.util.List<java.lang.String> value) {
    this.Fees = value;
  }

  /**
   * Creates a new PaymentAddRequest RecordBuilder.
   * @return A new PaymentAddRequest RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder();
  }

  /**
   * Creates a new PaymentAddRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentAddRequest RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder newBuilder(com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder(other);
    }
  }

  /**
   * Creates a new PaymentAddRequest RecordBuilder by copying an existing PaymentAddRequest instance.
   * @param other The existing instance to copy.
   * @return A new PaymentAddRequest RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder newBuilder(com.anz.fastpayment.inward.avro.PaymentAddRequest other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentAddRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentAddRequest>
    implements org.apache.avro.data.RecordBuilder<PaymentAddRequest> {

    /** Request unique identifier */
    private java.lang.String RqUID;
    private com.anz.fastpayment.inward.avro.PaymentMessageHeader MsgHdr;
    private com.anz.fastpayment.inward.avro.PaymentMessageHeader.Builder MsgHdrBuilder;
    private com.anz.fastpayment.inward.avro.PaymentHeader PayHdr;
    private com.anz.fastpayment.inward.avro.PaymentHeader.Builder PayHdrBuilder;
    private com.anz.fastpayment.inward.avro.FromFinancialInstitution FromFIData;
    private com.anz.fastpayment.inward.avro.FromFinancialInstitution.Builder FromFIDataBuilder;
    private com.anz.fastpayment.inward.avro.FromCustomer FromCust;
    private com.anz.fastpayment.inward.avro.FromCustomer.Builder FromCustBuilder;
    private com.anz.fastpayment.inward.avro.FromAccount FromAcct;
    private com.anz.fastpayment.inward.avro.FromAccount.Builder FromAcctBuilder;
    private com.anz.fastpayment.inward.avro.ToFinancialInstitution ToFIData;
    private com.anz.fastpayment.inward.avro.ToFinancialInstitution.Builder ToFIDataBuilder;
    private com.anz.fastpayment.inward.avro.ClearingInfo Clearing;
    private com.anz.fastpayment.inward.avro.ClearingInfo.Builder ClearingBuilder;
    private com.anz.fastpayment.inward.avro.ToBeneficiary ToBene;
    private com.anz.fastpayment.inward.avro.ToBeneficiary.Builder ToBeneBuilder;
    private com.anz.fastpayment.inward.avro.ToAccount ToAcct;
    private com.anz.fastpayment.inward.avro.ToAccount.Builder ToAcctBuilder;
    private java.util.List<java.lang.String> Fees;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.RqUID)) {
        this.RqUID = data().deepCopy(fields()[0].schema(), other.RqUID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.MsgHdr)) {
        this.MsgHdr = data().deepCopy(fields()[1].schema(), other.MsgHdr);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasMsgHdrBuilder()) {
        this.MsgHdrBuilder = com.anz.fastpayment.inward.avro.PaymentMessageHeader.newBuilder(other.getMsgHdrBuilder());
      }
      if (isValidValue(fields()[2], other.PayHdr)) {
        this.PayHdr = data().deepCopy(fields()[2].schema(), other.PayHdr);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPayHdrBuilder()) {
        this.PayHdrBuilder = com.anz.fastpayment.inward.avro.PaymentHeader.newBuilder(other.getPayHdrBuilder());
      }
      if (isValidValue(fields()[3], other.FromFIData)) {
        this.FromFIData = data().deepCopy(fields()[3].schema(), other.FromFIData);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasFromFIDataBuilder()) {
        this.FromFIDataBuilder = com.anz.fastpayment.inward.avro.FromFinancialInstitution.newBuilder(other.getFromFIDataBuilder());
      }
      if (isValidValue(fields()[4], other.FromCust)) {
        this.FromCust = data().deepCopy(fields()[4].schema(), other.FromCust);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasFromCustBuilder()) {
        this.FromCustBuilder = com.anz.fastpayment.inward.avro.FromCustomer.newBuilder(other.getFromCustBuilder());
      }
      if (isValidValue(fields()[5], other.FromAcct)) {
        this.FromAcct = data().deepCopy(fields()[5].schema(), other.FromAcct);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasFromAcctBuilder()) {
        this.FromAcctBuilder = com.anz.fastpayment.inward.avro.FromAccount.newBuilder(other.getFromAcctBuilder());
      }
      if (isValidValue(fields()[6], other.ToFIData)) {
        this.ToFIData = data().deepCopy(fields()[6].schema(), other.ToFIData);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasToFIDataBuilder()) {
        this.ToFIDataBuilder = com.anz.fastpayment.inward.avro.ToFinancialInstitution.newBuilder(other.getToFIDataBuilder());
      }
      if (isValidValue(fields()[7], other.Clearing)) {
        this.Clearing = data().deepCopy(fields()[7].schema(), other.Clearing);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasClearingBuilder()) {
        this.ClearingBuilder = com.anz.fastpayment.inward.avro.ClearingInfo.newBuilder(other.getClearingBuilder());
      }
      if (isValidValue(fields()[8], other.ToBene)) {
        this.ToBene = data().deepCopy(fields()[8].schema(), other.ToBene);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasToBeneBuilder()) {
        this.ToBeneBuilder = com.anz.fastpayment.inward.avro.ToBeneficiary.newBuilder(other.getToBeneBuilder());
      }
      if (isValidValue(fields()[9], other.ToAcct)) {
        this.ToAcct = data().deepCopy(fields()[9].schema(), other.ToAcct);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasToAcctBuilder()) {
        this.ToAcctBuilder = com.anz.fastpayment.inward.avro.ToAccount.newBuilder(other.getToAcctBuilder());
      }
      if (isValidValue(fields()[10], other.Fees)) {
        this.Fees = data().deepCopy(fields()[10].schema(), other.Fees);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentAddRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.PaymentAddRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.RqUID)) {
        this.RqUID = data().deepCopy(fields()[0].schema(), other.RqUID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MsgHdr)) {
        this.MsgHdr = data().deepCopy(fields()[1].schema(), other.MsgHdr);
        fieldSetFlags()[1] = true;
      }
      this.MsgHdrBuilder = null;
      if (isValidValue(fields()[2], other.PayHdr)) {
        this.PayHdr = data().deepCopy(fields()[2].schema(), other.PayHdr);
        fieldSetFlags()[2] = true;
      }
      this.PayHdrBuilder = null;
      if (isValidValue(fields()[3], other.FromFIData)) {
        this.FromFIData = data().deepCopy(fields()[3].schema(), other.FromFIData);
        fieldSetFlags()[3] = true;
      }
      this.FromFIDataBuilder = null;
      if (isValidValue(fields()[4], other.FromCust)) {
        this.FromCust = data().deepCopy(fields()[4].schema(), other.FromCust);
        fieldSetFlags()[4] = true;
      }
      this.FromCustBuilder = null;
      if (isValidValue(fields()[5], other.FromAcct)) {
        this.FromAcct = data().deepCopy(fields()[5].schema(), other.FromAcct);
        fieldSetFlags()[5] = true;
      }
      this.FromAcctBuilder = null;
      if (isValidValue(fields()[6], other.ToFIData)) {
        this.ToFIData = data().deepCopy(fields()[6].schema(), other.ToFIData);
        fieldSetFlags()[6] = true;
      }
      this.ToFIDataBuilder = null;
      if (isValidValue(fields()[7], other.Clearing)) {
        this.Clearing = data().deepCopy(fields()[7].schema(), other.Clearing);
        fieldSetFlags()[7] = true;
      }
      this.ClearingBuilder = null;
      if (isValidValue(fields()[8], other.ToBene)) {
        this.ToBene = data().deepCopy(fields()[8].schema(), other.ToBene);
        fieldSetFlags()[8] = true;
      }
      this.ToBeneBuilder = null;
      if (isValidValue(fields()[9], other.ToAcct)) {
        this.ToAcct = data().deepCopy(fields()[9].schema(), other.ToAcct);
        fieldSetFlags()[9] = true;
      }
      this.ToAcctBuilder = null;
      if (isValidValue(fields()[10], other.Fees)) {
        this.Fees = data().deepCopy(fields()[10].schema(), other.Fees);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'RqUID' field.
      * Request unique identifier
      * @return The value.
      */
    public java.lang.String getRqUID() {
      return RqUID;
    }


    /**
      * Sets the value of the 'RqUID' field.
      * Request unique identifier
      * @param value The value of 'RqUID'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setRqUID(java.lang.String value) {
      validate(fields()[0], value);
      this.RqUID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'RqUID' field has been set.
      * Request unique identifier
      * @return True if the 'RqUID' field has been set, false otherwise.
      */
    public boolean hasRqUID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'RqUID' field.
      * Request unique identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearRqUID() {
      RqUID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'MsgHdr' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.PaymentMessageHeader getMsgHdr() {
      return MsgHdr;
    }


    /**
      * Sets the value of the 'MsgHdr' field.
      * @param value The value of 'MsgHdr'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setMsgHdr(com.anz.fastpayment.inward.avro.PaymentMessageHeader value) {
      validate(fields()[1], value);
      this.MsgHdrBuilder = null;
      this.MsgHdr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'MsgHdr' field has been set.
      * @return True if the 'MsgHdr' field has been set, false otherwise.
      */
    public boolean hasMsgHdr() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'MsgHdr' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.PaymentMessageHeader.Builder getMsgHdrBuilder() {
      if (MsgHdrBuilder == null) {
        if (hasMsgHdr()) {
          setMsgHdrBuilder(com.anz.fastpayment.inward.avro.PaymentMessageHeader.newBuilder(MsgHdr));
        } else {
          setMsgHdrBuilder(com.anz.fastpayment.inward.avro.PaymentMessageHeader.newBuilder());
        }
      }
      return MsgHdrBuilder;
    }

    /**
     * Sets the Builder instance for the 'MsgHdr' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setMsgHdrBuilder(com.anz.fastpayment.inward.avro.PaymentMessageHeader.Builder value) {
      clearMsgHdr();
      MsgHdrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'MsgHdr' field has an active Builder instance
     * @return True if the 'MsgHdr' field has an active Builder instance
     */
    public boolean hasMsgHdrBuilder() {
      return MsgHdrBuilder != null;
    }

    /**
      * Clears the value of the 'MsgHdr' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearMsgHdr() {
      MsgHdr = null;
      MsgHdrBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'PayHdr' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.PaymentHeader getPayHdr() {
      return PayHdr;
    }


    /**
      * Sets the value of the 'PayHdr' field.
      * @param value The value of 'PayHdr'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setPayHdr(com.anz.fastpayment.inward.avro.PaymentHeader value) {
      validate(fields()[2], value);
      this.PayHdrBuilder = null;
      this.PayHdr = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'PayHdr' field has been set.
      * @return True if the 'PayHdr' field has been set, false otherwise.
      */
    public boolean hasPayHdr() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'PayHdr' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.PaymentHeader.Builder getPayHdrBuilder() {
      if (PayHdrBuilder == null) {
        if (hasPayHdr()) {
          setPayHdrBuilder(com.anz.fastpayment.inward.avro.PaymentHeader.newBuilder(PayHdr));
        } else {
          setPayHdrBuilder(com.anz.fastpayment.inward.avro.PaymentHeader.newBuilder());
        }
      }
      return PayHdrBuilder;
    }

    /**
     * Sets the Builder instance for the 'PayHdr' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setPayHdrBuilder(com.anz.fastpayment.inward.avro.PaymentHeader.Builder value) {
      clearPayHdr();
      PayHdrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'PayHdr' field has an active Builder instance
     * @return True if the 'PayHdr' field has an active Builder instance
     */
    public boolean hasPayHdrBuilder() {
      return PayHdrBuilder != null;
    }

    /**
      * Clears the value of the 'PayHdr' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearPayHdr() {
      PayHdr = null;
      PayHdrBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'FromFIData' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.FromFinancialInstitution getFromFIData() {
      return FromFIData;
    }


    /**
      * Sets the value of the 'FromFIData' field.
      * @param value The value of 'FromFIData'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromFIData(com.anz.fastpayment.inward.avro.FromFinancialInstitution value) {
      validate(fields()[3], value);
      this.FromFIDataBuilder = null;
      this.FromFIData = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'FromFIData' field has been set.
      * @return True if the 'FromFIData' field has been set, false otherwise.
      */
    public boolean hasFromFIData() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'FromFIData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.FromFinancialInstitution.Builder getFromFIDataBuilder() {
      if (FromFIDataBuilder == null) {
        if (hasFromFIData()) {
          setFromFIDataBuilder(com.anz.fastpayment.inward.avro.FromFinancialInstitution.newBuilder(FromFIData));
        } else {
          setFromFIDataBuilder(com.anz.fastpayment.inward.avro.FromFinancialInstitution.newBuilder());
        }
      }
      return FromFIDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'FromFIData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromFIDataBuilder(com.anz.fastpayment.inward.avro.FromFinancialInstitution.Builder value) {
      clearFromFIData();
      FromFIDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'FromFIData' field has an active Builder instance
     * @return True if the 'FromFIData' field has an active Builder instance
     */
    public boolean hasFromFIDataBuilder() {
      return FromFIDataBuilder != null;
    }

    /**
      * Clears the value of the 'FromFIData' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearFromFIData() {
      FromFIData = null;
      FromFIDataBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'FromCust' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.FromCustomer getFromCust() {
      return FromCust;
    }


    /**
      * Sets the value of the 'FromCust' field.
      * @param value The value of 'FromCust'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromCust(com.anz.fastpayment.inward.avro.FromCustomer value) {
      validate(fields()[4], value);
      this.FromCustBuilder = null;
      this.FromCust = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'FromCust' field has been set.
      * @return True if the 'FromCust' field has been set, false otherwise.
      */
    public boolean hasFromCust() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'FromCust' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.FromCustomer.Builder getFromCustBuilder() {
      if (FromCustBuilder == null) {
        if (hasFromCust()) {
          setFromCustBuilder(com.anz.fastpayment.inward.avro.FromCustomer.newBuilder(FromCust));
        } else {
          setFromCustBuilder(com.anz.fastpayment.inward.avro.FromCustomer.newBuilder());
        }
      }
      return FromCustBuilder;
    }

    /**
     * Sets the Builder instance for the 'FromCust' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromCustBuilder(com.anz.fastpayment.inward.avro.FromCustomer.Builder value) {
      clearFromCust();
      FromCustBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'FromCust' field has an active Builder instance
     * @return True if the 'FromCust' field has an active Builder instance
     */
    public boolean hasFromCustBuilder() {
      return FromCustBuilder != null;
    }

    /**
      * Clears the value of the 'FromCust' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearFromCust() {
      FromCust = null;
      FromCustBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'FromAcct' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.FromAccount getFromAcct() {
      return FromAcct;
    }


    /**
      * Sets the value of the 'FromAcct' field.
      * @param value The value of 'FromAcct'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromAcct(com.anz.fastpayment.inward.avro.FromAccount value) {
      validate(fields()[5], value);
      this.FromAcctBuilder = null;
      this.FromAcct = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'FromAcct' field has been set.
      * @return True if the 'FromAcct' field has been set, false otherwise.
      */
    public boolean hasFromAcct() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'FromAcct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder getFromAcctBuilder() {
      if (FromAcctBuilder == null) {
        if (hasFromAcct()) {
          setFromAcctBuilder(com.anz.fastpayment.inward.avro.FromAccount.newBuilder(FromAcct));
        } else {
          setFromAcctBuilder(com.anz.fastpayment.inward.avro.FromAccount.newBuilder());
        }
      }
      return FromAcctBuilder;
    }

    /**
     * Sets the Builder instance for the 'FromAcct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFromAcctBuilder(com.anz.fastpayment.inward.avro.FromAccount.Builder value) {
      clearFromAcct();
      FromAcctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'FromAcct' field has an active Builder instance
     * @return True if the 'FromAcct' field has an active Builder instance
     */
    public boolean hasFromAcctBuilder() {
      return FromAcctBuilder != null;
    }

    /**
      * Clears the value of the 'FromAcct' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearFromAcct() {
      FromAcct = null;
      FromAcctBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ToFIData' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.ToFinancialInstitution getToFIData() {
      return ToFIData;
    }


    /**
      * Sets the value of the 'ToFIData' field.
      * @param value The value of 'ToFIData'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToFIData(com.anz.fastpayment.inward.avro.ToFinancialInstitution value) {
      validate(fields()[6], value);
      this.ToFIDataBuilder = null;
      this.ToFIData = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ToFIData' field has been set.
      * @return True if the 'ToFIData' field has been set, false otherwise.
      */
    public boolean hasToFIData() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'ToFIData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.ToFinancialInstitution.Builder getToFIDataBuilder() {
      if (ToFIDataBuilder == null) {
        if (hasToFIData()) {
          setToFIDataBuilder(com.anz.fastpayment.inward.avro.ToFinancialInstitution.newBuilder(ToFIData));
        } else {
          setToFIDataBuilder(com.anz.fastpayment.inward.avro.ToFinancialInstitution.newBuilder());
        }
      }
      return ToFIDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'ToFIData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToFIDataBuilder(com.anz.fastpayment.inward.avro.ToFinancialInstitution.Builder value) {
      clearToFIData();
      ToFIDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ToFIData' field has an active Builder instance
     * @return True if the 'ToFIData' field has an active Builder instance
     */
    public boolean hasToFIDataBuilder() {
      return ToFIDataBuilder != null;
    }

    /**
      * Clears the value of the 'ToFIData' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearToFIData() {
      ToFIData = null;
      ToFIDataBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Clearing' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.ClearingInfo getClearing() {
      return Clearing;
    }


    /**
      * Sets the value of the 'Clearing' field.
      * @param value The value of 'Clearing'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setClearing(com.anz.fastpayment.inward.avro.ClearingInfo value) {
      validate(fields()[7], value);
      this.ClearingBuilder = null;
      this.Clearing = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Clearing' field has been set.
      * @return True if the 'Clearing' field has been set, false otherwise.
      */
    public boolean hasClearing() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'Clearing' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.ClearingInfo.Builder getClearingBuilder() {
      if (ClearingBuilder == null) {
        if (hasClearing()) {
          setClearingBuilder(com.anz.fastpayment.inward.avro.ClearingInfo.newBuilder(Clearing));
        } else {
          setClearingBuilder(com.anz.fastpayment.inward.avro.ClearingInfo.newBuilder());
        }
      }
      return ClearingBuilder;
    }

    /**
     * Sets the Builder instance for the 'Clearing' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setClearingBuilder(com.anz.fastpayment.inward.avro.ClearingInfo.Builder value) {
      clearClearing();
      ClearingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Clearing' field has an active Builder instance
     * @return True if the 'Clearing' field has an active Builder instance
     */
    public boolean hasClearingBuilder() {
      return ClearingBuilder != null;
    }

    /**
      * Clears the value of the 'Clearing' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearClearing() {
      Clearing = null;
      ClearingBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ToBene' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary getToBene() {
      return ToBene;
    }


    /**
      * Sets the value of the 'ToBene' field.
      * @param value The value of 'ToBene'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToBene(com.anz.fastpayment.inward.avro.ToBeneficiary value) {
      validate(fields()[8], value);
      this.ToBeneBuilder = null;
      this.ToBene = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ToBene' field has been set.
      * @return True if the 'ToBene' field has been set, false otherwise.
      */
    public boolean hasToBene() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'ToBene' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder getToBeneBuilder() {
      if (ToBeneBuilder == null) {
        if (hasToBene()) {
          setToBeneBuilder(com.anz.fastpayment.inward.avro.ToBeneficiary.newBuilder(ToBene));
        } else {
          setToBeneBuilder(com.anz.fastpayment.inward.avro.ToBeneficiary.newBuilder());
        }
      }
      return ToBeneBuilder;
    }

    /**
     * Sets the Builder instance for the 'ToBene' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToBeneBuilder(com.anz.fastpayment.inward.avro.ToBeneficiary.Builder value) {
      clearToBene();
      ToBeneBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ToBene' field has an active Builder instance
     * @return True if the 'ToBene' field has an active Builder instance
     */
    public boolean hasToBeneBuilder() {
      return ToBeneBuilder != null;
    }

    /**
      * Clears the value of the 'ToBene' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearToBene() {
      ToBene = null;
      ToBeneBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'ToAcct' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.ToAccount getToAcct() {
      return ToAcct;
    }


    /**
      * Sets the value of the 'ToAcct' field.
      * @param value The value of 'ToAcct'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToAcct(com.anz.fastpayment.inward.avro.ToAccount value) {
      validate(fields()[9], value);
      this.ToAcctBuilder = null;
      this.ToAcct = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'ToAcct' field has been set.
      * @return True if the 'ToAcct' field has been set, false otherwise.
      */
    public boolean hasToAcct() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'ToAcct' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.ToAccount.Builder getToAcctBuilder() {
      if (ToAcctBuilder == null) {
        if (hasToAcct()) {
          setToAcctBuilder(com.anz.fastpayment.inward.avro.ToAccount.newBuilder(ToAcct));
        } else {
          setToAcctBuilder(com.anz.fastpayment.inward.avro.ToAccount.newBuilder());
        }
      }
      return ToAcctBuilder;
    }

    /**
     * Sets the Builder instance for the 'ToAcct' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setToAcctBuilder(com.anz.fastpayment.inward.avro.ToAccount.Builder value) {
      clearToAcct();
      ToAcctBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ToAcct' field has an active Builder instance
     * @return True if the 'ToAcct' field has an active Builder instance
     */
    public boolean hasToAcctBuilder() {
      return ToAcctBuilder != null;
    }

    /**
      * Clears the value of the 'ToAcct' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearToAcct() {
      ToAcct = null;
      ToAcctBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'Fees' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getFees() {
      return Fees;
    }


    /**
      * Sets the value of the 'Fees' field.
      * @param value The value of 'Fees'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder setFees(java.util.List<java.lang.String> value) {
      validate(fields()[10], value);
      this.Fees = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'Fees' field has been set.
      * @return True if the 'Fees' field has been set, false otherwise.
      */
    public boolean hasFees() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'Fees' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentAddRequest.Builder clearFees() {
      Fees = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentAddRequest build() {
      try {
        PaymentAddRequest record = new PaymentAddRequest();
        record.RqUID = fieldSetFlags()[0] ? this.RqUID : (java.lang.String) defaultValue(fields()[0]);
        if (MsgHdrBuilder != null) {
          try {
            record.MsgHdr = this.MsgHdrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("MsgHdr"));
            throw e;
          }
        } else {
          record.MsgHdr = fieldSetFlags()[1] ? this.MsgHdr : (com.anz.fastpayment.inward.avro.PaymentMessageHeader) defaultValue(fields()[1]);
        }
        if (PayHdrBuilder != null) {
          try {
            record.PayHdr = this.PayHdrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("PayHdr"));
            throw e;
          }
        } else {
          record.PayHdr = fieldSetFlags()[2] ? this.PayHdr : (com.anz.fastpayment.inward.avro.PaymentHeader) defaultValue(fields()[2]);
        }
        if (FromFIDataBuilder != null) {
          try {
            record.FromFIData = this.FromFIDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("FromFIData"));
            throw e;
          }
        } else {
          record.FromFIData = fieldSetFlags()[3] ? this.FromFIData : (com.anz.fastpayment.inward.avro.FromFinancialInstitution) defaultValue(fields()[3]);
        }
        if (FromCustBuilder != null) {
          try {
            record.FromCust = this.FromCustBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("FromCust"));
            throw e;
          }
        } else {
          record.FromCust = fieldSetFlags()[4] ? this.FromCust : (com.anz.fastpayment.inward.avro.FromCustomer) defaultValue(fields()[4]);
        }
        if (FromAcctBuilder != null) {
          try {
            record.FromAcct = this.FromAcctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("FromAcct"));
            throw e;
          }
        } else {
          record.FromAcct = fieldSetFlags()[5] ? this.FromAcct : (com.anz.fastpayment.inward.avro.FromAccount) defaultValue(fields()[5]);
        }
        if (ToFIDataBuilder != null) {
          try {
            record.ToFIData = this.ToFIDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ToFIData"));
            throw e;
          }
        } else {
          record.ToFIData = fieldSetFlags()[6] ? this.ToFIData : (com.anz.fastpayment.inward.avro.ToFinancialInstitution) defaultValue(fields()[6]);
        }
        if (ClearingBuilder != null) {
          try {
            record.Clearing = this.ClearingBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Clearing"));
            throw e;
          }
        } else {
          record.Clearing = fieldSetFlags()[7] ? this.Clearing : (com.anz.fastpayment.inward.avro.ClearingInfo) defaultValue(fields()[7]);
        }
        if (ToBeneBuilder != null) {
          try {
            record.ToBene = this.ToBeneBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ToBene"));
            throw e;
          }
        } else {
          record.ToBene = fieldSetFlags()[8] ? this.ToBene : (com.anz.fastpayment.inward.avro.ToBeneficiary) defaultValue(fields()[8]);
        }
        if (ToAcctBuilder != null) {
          try {
            record.ToAcct = this.ToAcctBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ToAcct"));
            throw e;
          }
        } else {
          record.ToAcct = fieldSetFlags()[9] ? this.ToAcct : (com.anz.fastpayment.inward.avro.ToAccount) defaultValue(fields()[9]);
        }
        record.Fees = fieldSetFlags()[10] ? this.Fees : (java.util.List<java.lang.String>) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentAddRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentAddRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentAddRequest>
    READER$ = (org.apache.avro.io.DatumReader<PaymentAddRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.RqUID == null) {
      throw new IllegalStateException("RqUID cannot be null for PaymentAddRequest encoding");
    }
    out.writeString(this.RqUID);

    if (this.MsgHdr == null) {
      throw new IllegalStateException("MsgHdr cannot be null for PaymentAddRequest encoding");
    }
    this.MsgHdr.customEncode(out);

    if (this.PayHdr == null) {
      throw new IllegalStateException("PayHdr cannot be null for PaymentAddRequest encoding");
    }
    this.PayHdr.customEncode(out);

    if (this.FromFIData == null) {
      throw new IllegalStateException("FromFIData cannot be null for PaymentAddRequest encoding");
    }
    this.FromFIData.customEncode(out);

    if (this.FromCust == null) {
      throw new IllegalStateException("FromCust cannot be null for PaymentAddRequest encoding");
    }
    this.FromCust.customEncode(out);

    if (this.FromAcct == null) {
      throw new IllegalStateException("FromAcct cannot be null for PaymentAddRequest encoding");
    }
    this.FromAcct.customEncode(out);

    if (this.ToFIData == null) {
      throw new IllegalStateException("ToFIData cannot be null for PaymentAddRequest encoding");
    }
    this.ToFIData.customEncode(out);

    if (this.Clearing == null) {
      throw new IllegalStateException("Clearing cannot be null for PaymentAddRequest encoding");
    }
    this.Clearing.customEncode(out);

    if (this.ToBene == null) {
      throw new IllegalStateException("ToBene cannot be null for PaymentAddRequest encoding");
    }
    this.ToBene.customEncode(out);

    if (this.ToAcct == null) {
      throw new IllegalStateException("ToAcct cannot be null for PaymentAddRequest encoding");
    }
    this.ToAcct.customEncode(out);

    if (this.Fees == null) {
      throw new IllegalStateException("Fees cannot be null for PaymentAddRequest encoding");
    }
    long size0 = this.Fees.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.Fees) {
      if (e0 == null) {
        throw new IllegalStateException("Array element cannot be null for PaymentAddRequest.Fees encoding");
      }
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.RqUID = in.readString();

      if (this.MsgHdr == null) {
        this.MsgHdr = new com.anz.fastpayment.inward.avro.PaymentMessageHeader();
      }
      this.MsgHdr.customDecode(in);

      if (this.PayHdr == null) {
        this.PayHdr = new com.anz.fastpayment.inward.avro.PaymentHeader();
      }
      this.PayHdr.customDecode(in);

      if (this.FromFIData == null) {
        this.FromFIData = new com.anz.fastpayment.inward.avro.FromFinancialInstitution();
      }
      this.FromFIData.customDecode(in);

      if (this.FromCust == null) {
        this.FromCust = new com.anz.fastpayment.inward.avro.FromCustomer();
      }
      this.FromCust.customDecode(in);

      if (this.FromAcct == null) {
        this.FromAcct = new com.anz.fastpayment.inward.avro.FromAccount();
      }
      this.FromAcct.customDecode(in);

      if (this.ToFIData == null) {
        this.ToFIData = new com.anz.fastpayment.inward.avro.ToFinancialInstitution();
      }
      this.ToFIData.customDecode(in);

      if (this.Clearing == null) {
        this.Clearing = new com.anz.fastpayment.inward.avro.ClearingInfo();
      }
      this.Clearing.customDecode(in);

      if (this.ToBene == null) {
        this.ToBene = new com.anz.fastpayment.inward.avro.ToBeneficiary();
      }
      this.ToBene.customDecode(in);

      if (this.ToAcct == null) {
        this.ToAcct = new com.anz.fastpayment.inward.avro.ToAccount();
      }
      this.ToAcct.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.Fees;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("Fees").schema());
        this.Fees = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.RqUID = in.readString();
          break;

        case 1:
          if (this.MsgHdr == null) {
            this.MsgHdr = new com.anz.fastpayment.inward.avro.PaymentMessageHeader();
          }
          this.MsgHdr.customDecode(in);
          break;

        case 2:
          if (this.PayHdr == null) {
            this.PayHdr = new com.anz.fastpayment.inward.avro.PaymentHeader();
          }
          this.PayHdr.customDecode(in);
          break;

        case 3:
          if (this.FromFIData == null) {
            this.FromFIData = new com.anz.fastpayment.inward.avro.FromFinancialInstitution();
          }
          this.FromFIData.customDecode(in);
          break;

        case 4:
          if (this.FromCust == null) {
            this.FromCust = new com.anz.fastpayment.inward.avro.FromCustomer();
          }
          this.FromCust.customDecode(in);
          break;

        case 5:
          if (this.FromAcct == null) {
            this.FromAcct = new com.anz.fastpayment.inward.avro.FromAccount();
          }
          this.FromAcct.customDecode(in);
          break;

        case 6:
          if (this.ToFIData == null) {
            this.ToFIData = new com.anz.fastpayment.inward.avro.ToFinancialInstitution();
          }
          this.ToFIData.customDecode(in);
          break;

        case 7:
          if (this.Clearing == null) {
            this.Clearing = new com.anz.fastpayment.inward.avro.ClearingInfo();
          }
          this.Clearing.customDecode(in);
          break;

        case 8:
          if (this.ToBene == null) {
            this.ToBene = new com.anz.fastpayment.inward.avro.ToBeneficiary();
          }
          this.ToBene.customDecode(in);
          break;

        case 9:
          if (this.ToAcct == null) {
            this.ToAcct = new com.anz.fastpayment.inward.avro.ToAccount();
          }
          this.ToAcct.customDecode(in);
          break;

        case 10:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.Fees;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("Fees").schema());
            this.Fees = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










