/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8083142975727178900L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentContext\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"PuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"IntnSrc\",\"type\":{\"type\":\"record\",\"name\":\"IntentionSource\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentContext> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentContext> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentContext> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentContext to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentContext from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentContext instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String PuId;
  private com.anz.fastpayment.inward.avro.IntentionSource IntnSrc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentContext() {}

  /**
   * All-args constructor.
   * @param PuId The new value for PuId
   * @param IntnSrc The new value for IntnSrc
   */
  public PaymentContext(java.lang.String PuId, com.anz.fastpayment.inward.avro.IntentionSource IntnSrc) {
    this.PuId = PuId;
    this.IntnSrc = IntnSrc;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return PuId;
    case 1: return IntnSrc;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: PuId = value$ != null ? value$.toString() : null; break;
    case 1: IntnSrc = (com.anz.fastpayment.inward.avro.IntentionSource)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'PuId' field.
   * @return The value of the 'PuId' field.
   */
  public java.lang.String getPuId() {
    return PuId;
  }


  /**
   * Sets the value of the 'PuId' field.
   * @param value the value to set.
   */
  public void setPuId(java.lang.String value) {
    this.PuId = value;
  }

  /**
   * Gets the value of the 'IntnSrc' field.
   * @return The value of the 'IntnSrc' field.
   */
  public com.anz.fastpayment.inward.avro.IntentionSource getIntnSrc() {
    return IntnSrc;
  }


  /**
   * Sets the value of the 'IntnSrc' field.
   * @param value the value to set.
   */
  public void setIntnSrc(com.anz.fastpayment.inward.avro.IntentionSource value) {
    this.IntnSrc = value;
  }

  /**
   * Creates a new PaymentContext RecordBuilder.
   * @return A new PaymentContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentContext.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.PaymentContext.Builder();
  }

  /**
   * Creates a new PaymentContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentContext.Builder newBuilder(com.anz.fastpayment.inward.avro.PaymentContext.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.PaymentContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.PaymentContext.Builder(other);
    }
  }

  /**
   * Creates a new PaymentContext RecordBuilder by copying an existing PaymentContext instance.
   * @param other The existing instance to copy.
   * @return A new PaymentContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.PaymentContext.Builder newBuilder(com.anz.fastpayment.inward.avro.PaymentContext other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.PaymentContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.PaymentContext.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentContext instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentContext>
    implements org.apache.avro.data.RecordBuilder<PaymentContext> {

    private java.lang.String PuId;
    private com.anz.fastpayment.inward.avro.IntentionSource IntnSrc;
    private com.anz.fastpayment.inward.avro.IntentionSource.Builder IntnSrcBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.PaymentContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.PuId)) {
        this.PuId = data().deepCopy(fields()[0].schema(), other.PuId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.IntnSrc)) {
        this.IntnSrc = data().deepCopy(fields()[1].schema(), other.IntnSrc);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIntnSrcBuilder()) {
        this.IntnSrcBuilder = com.anz.fastpayment.inward.avro.IntentionSource.newBuilder(other.getIntnSrcBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentContext instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.PaymentContext other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.PuId)) {
        this.PuId = data().deepCopy(fields()[0].schema(), other.PuId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.IntnSrc)) {
        this.IntnSrc = data().deepCopy(fields()[1].schema(), other.IntnSrc);
        fieldSetFlags()[1] = true;
      }
      this.IntnSrcBuilder = null;
    }

    /**
      * Gets the value of the 'PuId' field.
      * @return The value.
      */
    public java.lang.String getPuId() {
      return PuId;
    }


    /**
      * Sets the value of the 'PuId' field.
      * @param value The value of 'PuId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentContext.Builder setPuId(java.lang.String value) {
      validate(fields()[0], value);
      this.PuId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'PuId' field has been set.
      * @return True if the 'PuId' field has been set, false otherwise.
      */
    public boolean hasPuId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'PuId' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentContext.Builder clearPuId() {
      PuId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'IntnSrc' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.IntentionSource getIntnSrc() {
      return IntnSrc;
    }


    /**
      * Sets the value of the 'IntnSrc' field.
      * @param value The value of 'IntnSrc'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentContext.Builder setIntnSrc(com.anz.fastpayment.inward.avro.IntentionSource value) {
      validate(fields()[1], value);
      this.IntnSrcBuilder = null;
      this.IntnSrc = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'IntnSrc' field has been set.
      * @return True if the 'IntnSrc' field has been set, false otherwise.
      */
    public boolean hasIntnSrc() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'IntnSrc' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.IntentionSource.Builder getIntnSrcBuilder() {
      if (IntnSrcBuilder == null) {
        if (hasIntnSrc()) {
          setIntnSrcBuilder(com.anz.fastpayment.inward.avro.IntentionSource.newBuilder(IntnSrc));
        } else {
          setIntnSrcBuilder(com.anz.fastpayment.inward.avro.IntentionSource.newBuilder());
        }
      }
      return IntnSrcBuilder;
    }

    /**
     * Sets the Builder instance for the 'IntnSrc' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.PaymentContext.Builder setIntnSrcBuilder(com.anz.fastpayment.inward.avro.IntentionSource.Builder value) {
      clearIntnSrc();
      IntnSrcBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'IntnSrc' field has an active Builder instance
     * @return True if the 'IntnSrc' field has an active Builder instance
     */
    public boolean hasIntnSrcBuilder() {
      return IntnSrcBuilder != null;
    }

    /**
      * Clears the value of the 'IntnSrc' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.PaymentContext.Builder clearIntnSrc() {
      IntnSrc = null;
      IntnSrcBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentContext build() {
      try {
        PaymentContext record = new PaymentContext();
        record.PuId = fieldSetFlags()[0] ? this.PuId : (java.lang.String) defaultValue(fields()[0]);
        if (IntnSrcBuilder != null) {
          try {
            record.IntnSrc = this.IntnSrcBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("IntnSrc"));
            throw e;
          }
        } else {
          record.IntnSrc = fieldSetFlags()[1] ? this.IntnSrc : (com.anz.fastpayment.inward.avro.IntentionSource) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentContext>
    READER$ = (org.apache.avro.io.DatumReader<PaymentContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.PuId == null) {
      throw new IllegalStateException("PuId cannot be null for PaymentContext encoding");
    }
    out.writeString(this.PuId);

    if (this.IntnSrc == null) {
      throw new IllegalStateException("IntnSrc cannot be null for PaymentContext encoding");
    }
    this.IntnSrc.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.PuId = in.readString();

      if (this.IntnSrc == null) {
        this.IntnSrc = new com.anz.fastpayment.inward.avro.IntentionSource();
      }
      this.IntnSrc.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.PuId = in.readString();
          break;

        case 1:
          if (this.IntnSrc == null) {
            this.IntnSrc = new com.anz.fastpayment.inward.avro.IntentionSource();
          }
          this.IntnSrc.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










