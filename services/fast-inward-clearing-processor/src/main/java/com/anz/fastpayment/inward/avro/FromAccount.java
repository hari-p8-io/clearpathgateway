/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FromAccount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1012126747404289137L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FromAccount\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"AcctId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Account identifier\",\"default\":null},{\"name\":\"AcctSys\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AcctGrp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PmtAuthMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Narrative\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CurCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code\"},{\"name\":\"Amount\",\"type\":\"double\",\"doc\":\"Transaction amount (legacy field - use AmountMinor for precision)\"},{\"name\":\"AmountMinor\",\"type\":\"long\",\"doc\":\"Transaction amount in minor units (e.g., cents for USD) for precise monetary representation\",\"default\":0},{\"name\":\"AcctUse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FromAccount> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FromAccount> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FromAccount> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FromAccount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FromAccount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FromAccount to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FromAccount from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FromAccount instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FromAccount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Account identifier */
  private java.lang.String AcctId;
  private java.lang.String AcctSys;
  private java.lang.String AcctGrp;
  private java.lang.String Name;
  private java.lang.String PmtAuthMethod;
  private java.lang.String Narrative;
  /** Currency code */
  private java.lang.String CurCode;
  /** Transaction amount (legacy field - use AmountMinor for precision) */
  private double Amount;
  /** Transaction amount in minor units (e.g., cents for USD) for precise monetary representation */
  private long AmountMinor;
  private java.lang.String AcctUse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FromAccount() {}

  /**
   * All-args constructor.
   * @param AcctId Account identifier
   * @param AcctSys The new value for AcctSys
   * @param AcctGrp The new value for AcctGrp
   * @param Name The new value for Name
   * @param PmtAuthMethod The new value for PmtAuthMethod
   * @param Narrative The new value for Narrative
   * @param CurCode Currency code
   * @param Amount Transaction amount (legacy field - use AmountMinor for precision)
   * @param AmountMinor Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param AcctUse The new value for AcctUse
   */
  public FromAccount(java.lang.String AcctId, java.lang.String AcctSys, java.lang.String AcctGrp, java.lang.String Name, java.lang.String PmtAuthMethod, java.lang.String Narrative, java.lang.String CurCode, java.lang.Double Amount, java.lang.Long AmountMinor, java.lang.String AcctUse) {
    this.AcctId = AcctId;
    this.AcctSys = AcctSys;
    this.AcctGrp = AcctGrp;
    this.Name = Name;
    this.PmtAuthMethod = PmtAuthMethod;
    this.Narrative = Narrative;
    this.CurCode = CurCode;
    this.Amount = Amount;
    this.AmountMinor = AmountMinor;
    this.AcctUse = AcctUse;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return AcctId;
    case 1: return AcctSys;
    case 2: return AcctGrp;
    case 3: return Name;
    case 4: return PmtAuthMethod;
    case 5: return Narrative;
    case 6: return CurCode;
    case 7: return Amount;
    case 8: return AmountMinor;
    case 9: return AcctUse;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: AcctId = value$ != null ? value$.toString() : null; break;
    case 1: AcctSys = value$ != null ? value$.toString() : null; break;
    case 2: AcctGrp = value$ != null ? value$.toString() : null; break;
    case 3: Name = value$ != null ? value$.toString() : null; break;
    case 4: PmtAuthMethod = value$ != null ? value$.toString() : null; break;
    case 5: Narrative = value$ != null ? value$.toString() : null; break;
    case 6: CurCode = value$ != null ? value$.toString() : null; break;
    case 7: Amount = (java.lang.Double)value$; break;
    case 8: AmountMinor = (java.lang.Long)value$; break;
    case 9: AcctUse = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'AcctId' field.
   * @return Account identifier
   */
  public java.lang.String getAcctId() {
    return AcctId;
  }


  /**
   * Sets the value of the 'AcctId' field.
   * Account identifier
   * @param value the value to set.
   */
  public void setAcctId(java.lang.String value) {
    this.AcctId = value;
  }

  /**
   * Gets the value of the 'AcctSys' field.
   * @return The value of the 'AcctSys' field.
   */
  public java.lang.String getAcctSys() {
    return AcctSys;
  }


  /**
   * Sets the value of the 'AcctSys' field.
   * @param value the value to set.
   */
  public void setAcctSys(java.lang.String value) {
    this.AcctSys = value;
  }

  /**
   * Gets the value of the 'AcctGrp' field.
   * @return The value of the 'AcctGrp' field.
   */
  public java.lang.String getAcctGrp() {
    return AcctGrp;
  }


  /**
   * Sets the value of the 'AcctGrp' field.
   * @param value the value to set.
   */
  public void setAcctGrp(java.lang.String value) {
    this.AcctGrp = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.String getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'PmtAuthMethod' field.
   * @return The value of the 'PmtAuthMethod' field.
   */
  public java.lang.String getPmtAuthMethod() {
    return PmtAuthMethod;
  }


  /**
   * Sets the value of the 'PmtAuthMethod' field.
   * @param value the value to set.
   */
  public void setPmtAuthMethod(java.lang.String value) {
    this.PmtAuthMethod = value;
  }

  /**
   * Gets the value of the 'Narrative' field.
   * @return The value of the 'Narrative' field.
   */
  public java.lang.String getNarrative() {
    return Narrative;
  }


  /**
   * Sets the value of the 'Narrative' field.
   * @param value the value to set.
   */
  public void setNarrative(java.lang.String value) {
    this.Narrative = value;
  }

  /**
   * Gets the value of the 'CurCode' field.
   * @return Currency code
   */
  public java.lang.String getCurCode() {
    return CurCode;
  }


  /**
   * Sets the value of the 'CurCode' field.
   * Currency code
   * @param value the value to set.
   */
  public void setCurCode(java.lang.String value) {
    this.CurCode = value;
  }

  /**
   * Gets the value of the 'Amount' field.
   * @return Transaction amount (legacy field - use AmountMinor for precision)
   */
  public double getAmount() {
    return Amount;
  }


  /**
   * Sets the value of the 'Amount' field.
   * Transaction amount (legacy field - use AmountMinor for precision)
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.Amount = value;
  }

  /**
   * Gets the value of the 'AmountMinor' field.
   * @return Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
   */
  public long getAmountMinor() {
    return AmountMinor;
  }


  /**
   * Sets the value of the 'AmountMinor' field.
   * Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param value the value to set.
   */
  public void setAmountMinor(long value) {
    this.AmountMinor = value;
  }

  /**
   * Gets the value of the 'AcctUse' field.
   * @return The value of the 'AcctUse' field.
   */
  public java.lang.String getAcctUse() {
    return AcctUse;
  }


  /**
   * Sets the value of the 'AcctUse' field.
   * @param value the value to set.
   */
  public void setAcctUse(java.lang.String value) {
    this.AcctUse = value;
  }

  /**
   * Creates a new FromAccount RecordBuilder.
   * @return A new FromAccount RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.FromAccount.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.FromAccount.Builder();
  }

  /**
   * Creates a new FromAccount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FromAccount RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.FromAccount.Builder newBuilder(com.anz.fastpayment.inward.avro.FromAccount.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.FromAccount.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.FromAccount.Builder(other);
    }
  }

  /**
   * Creates a new FromAccount RecordBuilder by copying an existing FromAccount instance.
   * @param other The existing instance to copy.
   * @return A new FromAccount RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.FromAccount.Builder newBuilder(com.anz.fastpayment.inward.avro.FromAccount other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.FromAccount.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.FromAccount.Builder(other);
    }
  }

  /**
   * RecordBuilder for FromAccount instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FromAccount>
    implements org.apache.avro.data.RecordBuilder<FromAccount> {

    /** Account identifier */
    private java.lang.String AcctId;
    private java.lang.String AcctSys;
    private java.lang.String AcctGrp;
    private java.lang.String Name;
    private java.lang.String PmtAuthMethod;
    private java.lang.String Narrative;
    /** Currency code */
    private java.lang.String CurCode;
    /** Transaction amount (legacy field - use AmountMinor for precision) */
    private double Amount;
    /** Transaction amount in minor units (e.g., cents for USD) for precise monetary representation */
    private long AmountMinor;
    private java.lang.String AcctUse;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.FromAccount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.AcctId)) {
        this.AcctId = data().deepCopy(fields()[0].schema(), other.AcctId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.AcctSys)) {
        this.AcctSys = data().deepCopy(fields()[1].schema(), other.AcctSys);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.AcctGrp)) {
        this.AcctGrp = data().deepCopy(fields()[2].schema(), other.AcctGrp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Name)) {
        this.Name = data().deepCopy(fields()[3].schema(), other.Name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.PmtAuthMethod)) {
        this.PmtAuthMethod = data().deepCopy(fields()[4].schema(), other.PmtAuthMethod);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Narrative)) {
        this.Narrative = data().deepCopy(fields()[5].schema(), other.Narrative);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.CurCode)) {
        this.CurCode = data().deepCopy(fields()[6].schema(), other.CurCode);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.Amount)) {
        this.Amount = data().deepCopy(fields()[7].schema(), other.Amount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.AmountMinor)) {
        this.AmountMinor = data().deepCopy(fields()[8].schema(), other.AmountMinor);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.AcctUse)) {
        this.AcctUse = data().deepCopy(fields()[9].schema(), other.AcctUse);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing FromAccount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.FromAccount other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.AcctId)) {
        this.AcctId = data().deepCopy(fields()[0].schema(), other.AcctId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.AcctSys)) {
        this.AcctSys = data().deepCopy(fields()[1].schema(), other.AcctSys);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AcctGrp)) {
        this.AcctGrp = data().deepCopy(fields()[2].schema(), other.AcctGrp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Name)) {
        this.Name = data().deepCopy(fields()[3].schema(), other.Name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PmtAuthMethod)) {
        this.PmtAuthMethod = data().deepCopy(fields()[4].schema(), other.PmtAuthMethod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Narrative)) {
        this.Narrative = data().deepCopy(fields()[5].schema(), other.Narrative);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CurCode)) {
        this.CurCode = data().deepCopy(fields()[6].schema(), other.CurCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Amount)) {
        this.Amount = data().deepCopy(fields()[7].schema(), other.Amount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.AmountMinor)) {
        this.AmountMinor = data().deepCopy(fields()[8].schema(), other.AmountMinor);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.AcctUse)) {
        this.AcctUse = data().deepCopy(fields()[9].schema(), other.AcctUse);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'AcctId' field.
      * Account identifier
      * @return The value.
      */
    public java.lang.String getAcctId() {
      return AcctId;
    }


    /**
      * Sets the value of the 'AcctId' field.
      * Account identifier
      * @param value The value of 'AcctId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAcctId(java.lang.String value) {
      validate(fields()[0], value);
      this.AcctId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'AcctId' field has been set.
      * Account identifier
      * @return True if the 'AcctId' field has been set, false otherwise.
      */
    public boolean hasAcctId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'AcctId' field.
      * Account identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAcctId() {
      AcctId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'AcctSys' field.
      * @return The value.
      */
    public java.lang.String getAcctSys() {
      return AcctSys;
    }


    /**
      * Sets the value of the 'AcctSys' field.
      * @param value The value of 'AcctSys'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAcctSys(java.lang.String value) {
      validate(fields()[1], value);
      this.AcctSys = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'AcctSys' field has been set.
      * @return True if the 'AcctSys' field has been set, false otherwise.
      */
    public boolean hasAcctSys() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'AcctSys' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAcctSys() {
      AcctSys = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'AcctGrp' field.
      * @return The value.
      */
    public java.lang.String getAcctGrp() {
      return AcctGrp;
    }


    /**
      * Sets the value of the 'AcctGrp' field.
      * @param value The value of 'AcctGrp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAcctGrp(java.lang.String value) {
      validate(fields()[2], value);
      this.AcctGrp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'AcctGrp' field has been set.
      * @return True if the 'AcctGrp' field has been set, false otherwise.
      */
    public boolean hasAcctGrp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'AcctGrp' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAcctGrp() {
      AcctGrp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setName(java.lang.String value) {
      validate(fields()[3], value);
      this.Name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearName() {
      Name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PmtAuthMethod' field.
      * @return The value.
      */
    public java.lang.String getPmtAuthMethod() {
      return PmtAuthMethod;
    }


    /**
      * Sets the value of the 'PmtAuthMethod' field.
      * @param value The value of 'PmtAuthMethod'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setPmtAuthMethod(java.lang.String value) {
      validate(fields()[4], value);
      this.PmtAuthMethod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PmtAuthMethod' field has been set.
      * @return True if the 'PmtAuthMethod' field has been set, false otherwise.
      */
    public boolean hasPmtAuthMethod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'PmtAuthMethod' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearPmtAuthMethod() {
      PmtAuthMethod = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Narrative' field.
      * @return The value.
      */
    public java.lang.String getNarrative() {
      return Narrative;
    }


    /**
      * Sets the value of the 'Narrative' field.
      * @param value The value of 'Narrative'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setNarrative(java.lang.String value) {
      validate(fields()[5], value);
      this.Narrative = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Narrative' field has been set.
      * @return True if the 'Narrative' field has been set, false otherwise.
      */
    public boolean hasNarrative() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Narrative' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearNarrative() {
      Narrative = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'CurCode' field.
      * Currency code
      * @return The value.
      */
    public java.lang.String getCurCode() {
      return CurCode;
    }


    /**
      * Sets the value of the 'CurCode' field.
      * Currency code
      * @param value The value of 'CurCode'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setCurCode(java.lang.String value) {
      validate(fields()[6], value);
      this.CurCode = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'CurCode' field has been set.
      * Currency code
      * @return True if the 'CurCode' field has been set, false otherwise.
      */
    public boolean hasCurCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'CurCode' field.
      * Currency code
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearCurCode() {
      CurCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Amount' field.
      * Transaction amount (legacy field - use AmountMinor for precision)
      * @return The value.
      */
    public double getAmount() {
      return Amount;
    }


    /**
      * Sets the value of the 'Amount' field.
      * Transaction amount (legacy field - use AmountMinor for precision)
      * @param value The value of 'Amount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAmount(double value) {
      validate(fields()[7], value);
      this.Amount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Amount' field has been set.
      * Transaction amount (legacy field - use AmountMinor for precision)
      * @return True if the 'Amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Amount' field.
      * Transaction amount (legacy field - use AmountMinor for precision)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAmount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'AmountMinor' field.
      * Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return The value.
      */
    public long getAmountMinor() {
      return AmountMinor;
    }


    /**
      * Sets the value of the 'AmountMinor' field.
      * Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
      * @param value The value of 'AmountMinor'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAmountMinor(long value) {
      validate(fields()[8], value);
      this.AmountMinor = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'AmountMinor' field has been set.
      * Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return True if the 'AmountMinor' field has been set, false otherwise.
      */
    public boolean hasAmountMinor() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'AmountMinor' field.
      * Transaction amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAmountMinor() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'AcctUse' field.
      * @return The value.
      */
    public java.lang.String getAcctUse() {
      return AcctUse;
    }


    /**
      * Sets the value of the 'AcctUse' field.
      * @param value The value of 'AcctUse'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder setAcctUse(java.lang.String value) {
      validate(fields()[9], value);
      this.AcctUse = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'AcctUse' field has been set.
      * @return True if the 'AcctUse' field has been set, false otherwise.
      */
    public boolean hasAcctUse() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'AcctUse' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.FromAccount.Builder clearAcctUse() {
      AcctUse = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FromAccount build() {
      try {
        FromAccount record = new FromAccount();
        record.AcctId = fieldSetFlags()[0] ? this.AcctId : (java.lang.String) defaultValue(fields()[0]);
        record.AcctSys = fieldSetFlags()[1] ? this.AcctSys : (java.lang.String) defaultValue(fields()[1]);
        record.AcctGrp = fieldSetFlags()[2] ? this.AcctGrp : (java.lang.String) defaultValue(fields()[2]);
        record.Name = fieldSetFlags()[3] ? this.Name : (java.lang.String) defaultValue(fields()[3]);
        record.PmtAuthMethod = fieldSetFlags()[4] ? this.PmtAuthMethod : (java.lang.String) defaultValue(fields()[4]);
        record.Narrative = fieldSetFlags()[5] ? this.Narrative : (java.lang.String) defaultValue(fields()[5]);
        record.CurCode = fieldSetFlags()[6] ? this.CurCode : (java.lang.String) defaultValue(fields()[6]);
        record.Amount = fieldSetFlags()[7] ? this.Amount : (java.lang.Double) defaultValue(fields()[7]);
        record.AmountMinor = fieldSetFlags()[8] ? this.AmountMinor : (java.lang.Long) defaultValue(fields()[8]);
        record.AcctUse = fieldSetFlags()[9] ? this.AcctUse : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FromAccount>
    WRITER$ = (org.apache.avro.io.DatumWriter<FromAccount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FromAccount>
    READER$ = (org.apache.avro.io.DatumReader<FromAccount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.AcctId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.AcctId);
    }

    if (this.AcctSys == null) {
      throw new IllegalStateException("AcctSys cannot be null for FromAccount encoding");
    }
    out.writeString(this.AcctSys);

    if (this.AcctGrp == null) {
      throw new IllegalStateException("AcctGrp cannot be null for FromAccount encoding");
    }
    out.writeString(this.AcctGrp);

    if (this.Name == null) {
      throw new IllegalStateException("Name cannot be null for FromAccount encoding");
    }
    out.writeString(this.Name);

    if (this.PmtAuthMethod == null) {
      throw new IllegalStateException("PmtAuthMethod cannot be null for FromAccount encoding");
    }
    out.writeString(this.PmtAuthMethod);

    if (this.Narrative == null) {
      throw new IllegalStateException("Narrative cannot be null for FromAccount encoding");
    }
    out.writeString(this.Narrative);

    if (this.CurCode == null) {
      throw new IllegalStateException("CurCode cannot be null for FromAccount encoding");
    }
    out.writeString(this.CurCode);

    out.writeDouble(this.Amount);

    out.writeLong(this.AmountMinor);

    if (this.AcctUse == null) {
      throw new IllegalStateException("AcctUse cannot be null for FromAccount encoding");
    }
    out.writeString(this.AcctUse);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.AcctId = null;
      } else {
        this.AcctId = in.readString();
      }

      this.AcctSys = in.readString();

      this.AcctGrp = in.readString();

      this.Name = in.readString();

      this.PmtAuthMethod = in.readString();

      this.Narrative = in.readString();

      this.CurCode = in.readString();

      this.Amount = in.readDouble();

      this.AmountMinor = in.readLong();

      this.AcctUse = in.readString();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.AcctId = null;
          } else {
            this.AcctId = in.readString();
          }
          break;

        case 1:
          this.AcctSys = in.readString();
          break;

        case 2:
          this.AcctGrp = in.readString();
          break;

        case 3:
          this.Name = in.readString();
          break;

        case 4:
          this.PmtAuthMethod = in.readString();
          break;

        case 5:
          this.Narrative = in.readString();
          break;

        case 6:
          this.CurCode = in.readString();
          break;

        case 7:
          this.Amount = in.readDouble();
          break;

        case 8:
          this.AmountMinor = in.readLong();
          break;

        case 9:
          this.AcctUse = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










