/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MessageContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6948253339562084483L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MessageContext\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"OrigMsgTyp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InstdClrgPref\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InstdMoPCat\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Site\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"BaseAmt\",\"type\":[\"null\",\"double\"],\"doc\":\"Base amount (legacy field - use BaseAmtMinor for precision)\",\"default\":null},{\"name\":\"BaseAmtMinor\",\"type\":[\"null\",\"long\"],\"doc\":\"Base amount in minor units (e.g., cents for USD) for precise monetary representation\",\"default\":null},{\"name\":\"BaseCcy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"SenderBIC\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ProcCtryCd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Department\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"MsgId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Direction\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MessageContext> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MessageContext> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MessageContext> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MessageContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MessageContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MessageContext to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MessageContext from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MessageContext instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MessageContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String OrigMsgTyp;
  private java.lang.String InstdClrgPref;
  private java.lang.String InstdMoPCat;
  private java.lang.String Site;
  /** Base amount (legacy field - use BaseAmtMinor for precision) */
  private java.lang.Double BaseAmt;
  /** Base amount in minor units (e.g., cents for USD) for precise monetary representation */
  private java.lang.Long BaseAmtMinor;
  private java.lang.String BaseCcy;
  private java.lang.String SenderBIC;
  private java.lang.String ProcCtryCd;
  private java.lang.String Department;
  private java.lang.String MsgId;
  private java.lang.String Direction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MessageContext() {}

  /**
   * All-args constructor.
   * @param OrigMsgTyp The new value for OrigMsgTyp
   * @param InstdClrgPref The new value for InstdClrgPref
   * @param InstdMoPCat The new value for InstdMoPCat
   * @param Site The new value for Site
   * @param BaseAmt Base amount (legacy field - use BaseAmtMinor for precision)
   * @param BaseAmtMinor Base amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param BaseCcy The new value for BaseCcy
   * @param SenderBIC The new value for SenderBIC
   * @param ProcCtryCd The new value for ProcCtryCd
   * @param Department The new value for Department
   * @param MsgId The new value for MsgId
   * @param Direction The new value for Direction
   */
  public MessageContext(java.lang.String OrigMsgTyp, java.lang.String InstdClrgPref, java.lang.String InstdMoPCat, java.lang.String Site, java.lang.Double BaseAmt, java.lang.Long BaseAmtMinor, java.lang.String BaseCcy, java.lang.String SenderBIC, java.lang.String ProcCtryCd, java.lang.String Department, java.lang.String MsgId, java.lang.String Direction) {
    this.OrigMsgTyp = OrigMsgTyp;
    this.InstdClrgPref = InstdClrgPref;
    this.InstdMoPCat = InstdMoPCat;
    this.Site = Site;
    this.BaseAmt = BaseAmt;
    this.BaseAmtMinor = BaseAmtMinor;
    this.BaseCcy = BaseCcy;
    this.SenderBIC = SenderBIC;
    this.ProcCtryCd = ProcCtryCd;
    this.Department = Department;
    this.MsgId = MsgId;
    this.Direction = Direction;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return OrigMsgTyp;
    case 1: return InstdClrgPref;
    case 2: return InstdMoPCat;
    case 3: return Site;
    case 4: return BaseAmt;
    case 5: return BaseAmtMinor;
    case 6: return BaseCcy;
    case 7: return SenderBIC;
    case 8: return ProcCtryCd;
    case 9: return Department;
    case 10: return MsgId;
    case 11: return Direction;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: OrigMsgTyp = value$ != null ? value$.toString() : null; break;
    case 1: InstdClrgPref = value$ != null ? value$.toString() : null; break;
    case 2: InstdMoPCat = value$ != null ? value$.toString() : null; break;
    case 3: Site = value$ != null ? value$.toString() : null; break;
    case 4: BaseAmt = (java.lang.Double)value$; break;
    case 5: BaseAmtMinor = (java.lang.Long)value$; break;
    case 6: BaseCcy = value$ != null ? value$.toString() : null; break;
    case 7: SenderBIC = value$ != null ? value$.toString() : null; break;
    case 8: ProcCtryCd = value$ != null ? value$.toString() : null; break;
    case 9: Department = value$ != null ? value$.toString() : null; break;
    case 10: MsgId = value$ != null ? value$.toString() : null; break;
    case 11: Direction = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'OrigMsgTyp' field.
   * @return The value of the 'OrigMsgTyp' field.
   */
  public java.lang.String getOrigMsgTyp() {
    return OrigMsgTyp;
  }


  /**
   * Sets the value of the 'OrigMsgTyp' field.
   * @param value the value to set.
   */
  public void setOrigMsgTyp(java.lang.String value) {
    this.OrigMsgTyp = value;
  }

  /**
   * Gets the value of the 'InstdClrgPref' field.
   * @return The value of the 'InstdClrgPref' field.
   */
  public java.lang.String getInstdClrgPref() {
    return InstdClrgPref;
  }


  /**
   * Sets the value of the 'InstdClrgPref' field.
   * @param value the value to set.
   */
  public void setInstdClrgPref(java.lang.String value) {
    this.InstdClrgPref = value;
  }

  /**
   * Gets the value of the 'InstdMoPCat' field.
   * @return The value of the 'InstdMoPCat' field.
   */
  public java.lang.String getInstdMoPCat() {
    return InstdMoPCat;
  }


  /**
   * Sets the value of the 'InstdMoPCat' field.
   * @param value the value to set.
   */
  public void setInstdMoPCat(java.lang.String value) {
    this.InstdMoPCat = value;
  }

  /**
   * Gets the value of the 'Site' field.
   * @return The value of the 'Site' field.
   */
  public java.lang.String getSite() {
    return Site;
  }


  /**
   * Sets the value of the 'Site' field.
   * @param value the value to set.
   */
  public void setSite(java.lang.String value) {
    this.Site = value;
  }

  /**
   * Gets the value of the 'BaseAmt' field.
   * @return Base amount (legacy field - use BaseAmtMinor for precision)
   */
  public java.lang.Double getBaseAmt() {
    return BaseAmt;
  }


  /**
   * Sets the value of the 'BaseAmt' field.
   * Base amount (legacy field - use BaseAmtMinor for precision)
   * @param value the value to set.
   */
  public void setBaseAmt(java.lang.Double value) {
    this.BaseAmt = value;
  }

  /**
   * Gets the value of the 'BaseAmtMinor' field.
   * @return Base amount in minor units (e.g., cents for USD) for precise monetary representation
   */
  public java.lang.Long getBaseAmtMinor() {
    return BaseAmtMinor;
  }


  /**
   * Sets the value of the 'BaseAmtMinor' field.
   * Base amount in minor units (e.g., cents for USD) for precise monetary representation
   * @param value the value to set.
   */
  public void setBaseAmtMinor(java.lang.Long value) {
    this.BaseAmtMinor = value;
  }

  /**
   * Gets the value of the 'BaseCcy' field.
   * @return The value of the 'BaseCcy' field.
   */
  public java.lang.String getBaseCcy() {
    return BaseCcy;
  }


  /**
   * Sets the value of the 'BaseCcy' field.
   * @param value the value to set.
   */
  public void setBaseCcy(java.lang.String value) {
    this.BaseCcy = value;
  }

  /**
   * Gets the value of the 'SenderBIC' field.
   * @return The value of the 'SenderBIC' field.
   */
  public java.lang.String getSenderBIC() {
    return SenderBIC;
  }


  /**
   * Sets the value of the 'SenderBIC' field.
   * @param value the value to set.
   */
  public void setSenderBIC(java.lang.String value) {
    this.SenderBIC = value;
  }

  /**
   * Gets the value of the 'ProcCtryCd' field.
   * @return The value of the 'ProcCtryCd' field.
   */
  public java.lang.String getProcCtryCd() {
    return ProcCtryCd;
  }


  /**
   * Sets the value of the 'ProcCtryCd' field.
   * @param value the value to set.
   */
  public void setProcCtryCd(java.lang.String value) {
    this.ProcCtryCd = value;
  }

  /**
   * Gets the value of the 'Department' field.
   * @return The value of the 'Department' field.
   */
  public java.lang.String getDepartment() {
    return Department;
  }


  /**
   * Sets the value of the 'Department' field.
   * @param value the value to set.
   */
  public void setDepartment(java.lang.String value) {
    this.Department = value;
  }

  /**
   * Gets the value of the 'MsgId' field.
   * @return The value of the 'MsgId' field.
   */
  public java.lang.String getMsgId() {
    return MsgId;
  }


  /**
   * Sets the value of the 'MsgId' field.
   * @param value the value to set.
   */
  public void setMsgId(java.lang.String value) {
    this.MsgId = value;
  }

  /**
   * Gets the value of the 'Direction' field.
   * @return The value of the 'Direction' field.
   */
  public java.lang.String getDirection() {
    return Direction;
  }


  /**
   * Sets the value of the 'Direction' field.
   * @param value the value to set.
   */
  public void setDirection(java.lang.String value) {
    this.Direction = value;
  }

  /**
   * Creates a new MessageContext RecordBuilder.
   * @return A new MessageContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageContext.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.MessageContext.Builder();
  }

  /**
   * Creates a new MessageContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MessageContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageContext.Builder newBuilder(com.anz.fastpayment.inward.avro.MessageContext.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.MessageContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.MessageContext.Builder(other);
    }
  }

  /**
   * Creates a new MessageContext RecordBuilder by copying an existing MessageContext instance.
   * @param other The existing instance to copy.
   * @return A new MessageContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageContext.Builder newBuilder(com.anz.fastpayment.inward.avro.MessageContext other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.MessageContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.MessageContext.Builder(other);
    }
  }

  /**
   * RecordBuilder for MessageContext instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MessageContext>
    implements org.apache.avro.data.RecordBuilder<MessageContext> {

    private java.lang.String OrigMsgTyp;
    private java.lang.String InstdClrgPref;
    private java.lang.String InstdMoPCat;
    private java.lang.String Site;
    /** Base amount (legacy field - use BaseAmtMinor for precision) */
    private java.lang.Double BaseAmt;
    /** Base amount in minor units (e.g., cents for USD) for precise monetary representation */
    private java.lang.Long BaseAmtMinor;
    private java.lang.String BaseCcy;
    private java.lang.String SenderBIC;
    private java.lang.String ProcCtryCd;
    private java.lang.String Department;
    private java.lang.String MsgId;
    private java.lang.String Direction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.MessageContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.OrigMsgTyp)) {
        this.OrigMsgTyp = data().deepCopy(fields()[0].schema(), other.OrigMsgTyp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.InstdClrgPref)) {
        this.InstdClrgPref = data().deepCopy(fields()[1].schema(), other.InstdClrgPref);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.InstdMoPCat)) {
        this.InstdMoPCat = data().deepCopy(fields()[2].schema(), other.InstdMoPCat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Site)) {
        this.Site = data().deepCopy(fields()[3].schema(), other.Site);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.BaseAmt)) {
        this.BaseAmt = data().deepCopy(fields()[4].schema(), other.BaseAmt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.BaseAmtMinor)) {
        this.BaseAmtMinor = data().deepCopy(fields()[5].schema(), other.BaseAmtMinor);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.BaseCcy)) {
        this.BaseCcy = data().deepCopy(fields()[6].schema(), other.BaseCcy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.SenderBIC)) {
        this.SenderBIC = data().deepCopy(fields()[7].schema(), other.SenderBIC);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ProcCtryCd)) {
        this.ProcCtryCd = data().deepCopy(fields()[8].schema(), other.ProcCtryCd);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.Department)) {
        this.Department = data().deepCopy(fields()[9].schema(), other.Department);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.MsgId)) {
        this.MsgId = data().deepCopy(fields()[10].schema(), other.MsgId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.Direction)) {
        this.Direction = data().deepCopy(fields()[11].schema(), other.Direction);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing MessageContext instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.MessageContext other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.OrigMsgTyp)) {
        this.OrigMsgTyp = data().deepCopy(fields()[0].schema(), other.OrigMsgTyp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.InstdClrgPref)) {
        this.InstdClrgPref = data().deepCopy(fields()[1].schema(), other.InstdClrgPref);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.InstdMoPCat)) {
        this.InstdMoPCat = data().deepCopy(fields()[2].schema(), other.InstdMoPCat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Site)) {
        this.Site = data().deepCopy(fields()[3].schema(), other.Site);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.BaseAmt)) {
        this.BaseAmt = data().deepCopy(fields()[4].schema(), other.BaseAmt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.BaseAmtMinor)) {
        this.BaseAmtMinor = data().deepCopy(fields()[5].schema(), other.BaseAmtMinor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.BaseCcy)) {
        this.BaseCcy = data().deepCopy(fields()[6].schema(), other.BaseCcy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.SenderBIC)) {
        this.SenderBIC = data().deepCopy(fields()[7].schema(), other.SenderBIC);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ProcCtryCd)) {
        this.ProcCtryCd = data().deepCopy(fields()[8].schema(), other.ProcCtryCd);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.Department)) {
        this.Department = data().deepCopy(fields()[9].schema(), other.Department);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.MsgId)) {
        this.MsgId = data().deepCopy(fields()[10].schema(), other.MsgId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.Direction)) {
        this.Direction = data().deepCopy(fields()[11].schema(), other.Direction);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'OrigMsgTyp' field.
      * @return The value.
      */
    public java.lang.String getOrigMsgTyp() {
      return OrigMsgTyp;
    }


    /**
      * Sets the value of the 'OrigMsgTyp' field.
      * @param value The value of 'OrigMsgTyp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setOrigMsgTyp(java.lang.String value) {
      validate(fields()[0], value);
      this.OrigMsgTyp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'OrigMsgTyp' field has been set.
      * @return True if the 'OrigMsgTyp' field has been set, false otherwise.
      */
    public boolean hasOrigMsgTyp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'OrigMsgTyp' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearOrigMsgTyp() {
      OrigMsgTyp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstdClrgPref' field.
      * @return The value.
      */
    public java.lang.String getInstdClrgPref() {
      return InstdClrgPref;
    }


    /**
      * Sets the value of the 'InstdClrgPref' field.
      * @param value The value of 'InstdClrgPref'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setInstdClrgPref(java.lang.String value) {
      validate(fields()[1], value);
      this.InstdClrgPref = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'InstdClrgPref' field has been set.
      * @return True if the 'InstdClrgPref' field has been set, false otherwise.
      */
    public boolean hasInstdClrgPref() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'InstdClrgPref' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearInstdClrgPref() {
      InstdClrgPref = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstdMoPCat' field.
      * @return The value.
      */
    public java.lang.String getInstdMoPCat() {
      return InstdMoPCat;
    }


    /**
      * Sets the value of the 'InstdMoPCat' field.
      * @param value The value of 'InstdMoPCat'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setInstdMoPCat(java.lang.String value) {
      validate(fields()[2], value);
      this.InstdMoPCat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'InstdMoPCat' field has been set.
      * @return True if the 'InstdMoPCat' field has been set, false otherwise.
      */
    public boolean hasInstdMoPCat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'InstdMoPCat' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearInstdMoPCat() {
      InstdMoPCat = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Site' field.
      * @return The value.
      */
    public java.lang.String getSite() {
      return Site;
    }


    /**
      * Sets the value of the 'Site' field.
      * @param value The value of 'Site'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setSite(java.lang.String value) {
      validate(fields()[3], value);
      this.Site = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Site' field has been set.
      * @return True if the 'Site' field has been set, false otherwise.
      */
    public boolean hasSite() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Site' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearSite() {
      Site = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'BaseAmt' field.
      * Base amount (legacy field - use BaseAmtMinor for precision)
      * @return The value.
      */
    public java.lang.Double getBaseAmt() {
      return BaseAmt;
    }


    /**
      * Sets the value of the 'BaseAmt' field.
      * Base amount (legacy field - use BaseAmtMinor for precision)
      * @param value The value of 'BaseAmt'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setBaseAmt(java.lang.Double value) {
      validate(fields()[4], value);
      this.BaseAmt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'BaseAmt' field has been set.
      * Base amount (legacy field - use BaseAmtMinor for precision)
      * @return True if the 'BaseAmt' field has been set, false otherwise.
      */
    public boolean hasBaseAmt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'BaseAmt' field.
      * Base amount (legacy field - use BaseAmtMinor for precision)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearBaseAmt() {
      BaseAmt = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'BaseAmtMinor' field.
      * Base amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return The value.
      */
    public java.lang.Long getBaseAmtMinor() {
      return BaseAmtMinor;
    }


    /**
      * Sets the value of the 'BaseAmtMinor' field.
      * Base amount in minor units (e.g., cents for USD) for precise monetary representation
      * @param value The value of 'BaseAmtMinor'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setBaseAmtMinor(java.lang.Long value) {
      validate(fields()[5], value);
      this.BaseAmtMinor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'BaseAmtMinor' field has been set.
      * Base amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return True if the 'BaseAmtMinor' field has been set, false otherwise.
      */
    public boolean hasBaseAmtMinor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'BaseAmtMinor' field.
      * Base amount in minor units (e.g., cents for USD) for precise monetary representation
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearBaseAmtMinor() {
      BaseAmtMinor = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'BaseCcy' field.
      * @return The value.
      */
    public java.lang.String getBaseCcy() {
      return BaseCcy;
    }


    /**
      * Sets the value of the 'BaseCcy' field.
      * @param value The value of 'BaseCcy'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setBaseCcy(java.lang.String value) {
      validate(fields()[6], value);
      this.BaseCcy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'BaseCcy' field has been set.
      * @return True if the 'BaseCcy' field has been set, false otherwise.
      */
    public boolean hasBaseCcy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'BaseCcy' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearBaseCcy() {
      BaseCcy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'SenderBIC' field.
      * @return The value.
      */
    public java.lang.String getSenderBIC() {
      return SenderBIC;
    }


    /**
      * Sets the value of the 'SenderBIC' field.
      * @param value The value of 'SenderBIC'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setSenderBIC(java.lang.String value) {
      validate(fields()[7], value);
      this.SenderBIC = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'SenderBIC' field has been set.
      * @return True if the 'SenderBIC' field has been set, false otherwise.
      */
    public boolean hasSenderBIC() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'SenderBIC' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearSenderBIC() {
      SenderBIC = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ProcCtryCd' field.
      * @return The value.
      */
    public java.lang.String getProcCtryCd() {
      return ProcCtryCd;
    }


    /**
      * Sets the value of the 'ProcCtryCd' field.
      * @param value The value of 'ProcCtryCd'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setProcCtryCd(java.lang.String value) {
      validate(fields()[8], value);
      this.ProcCtryCd = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ProcCtryCd' field has been set.
      * @return True if the 'ProcCtryCd' field has been set, false otherwise.
      */
    public boolean hasProcCtryCd() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ProcCtryCd' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearProcCtryCd() {
      ProcCtryCd = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'Department' field.
      * @return The value.
      */
    public java.lang.String getDepartment() {
      return Department;
    }


    /**
      * Sets the value of the 'Department' field.
      * @param value The value of 'Department'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setDepartment(java.lang.String value) {
      validate(fields()[9], value);
      this.Department = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'Department' field has been set.
      * @return True if the 'Department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'Department' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearDepartment() {
      Department = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'MsgId' field.
      * @return The value.
      */
    public java.lang.String getMsgId() {
      return MsgId;
    }


    /**
      * Sets the value of the 'MsgId' field.
      * @param value The value of 'MsgId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setMsgId(java.lang.String value) {
      validate(fields()[10], value);
      this.MsgId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'MsgId' field has been set.
      * @return True if the 'MsgId' field has been set, false otherwise.
      */
    public boolean hasMsgId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'MsgId' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearMsgId() {
      MsgId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'Direction' field.
      * @return The value.
      */
    public java.lang.String getDirection() {
      return Direction;
    }


    /**
      * Sets the value of the 'Direction' field.
      * @param value The value of 'Direction'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder setDirection(java.lang.String value) {
      validate(fields()[11], value);
      this.Direction = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'Direction' field has been set.
      * @return True if the 'Direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'Direction' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageContext.Builder clearDirection() {
      Direction = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MessageContext build() {
      try {
        MessageContext record = new MessageContext();
        record.OrigMsgTyp = fieldSetFlags()[0] ? this.OrigMsgTyp : (java.lang.String) defaultValue(fields()[0]);
        record.InstdClrgPref = fieldSetFlags()[1] ? this.InstdClrgPref : (java.lang.String) defaultValue(fields()[1]);
        record.InstdMoPCat = fieldSetFlags()[2] ? this.InstdMoPCat : (java.lang.String) defaultValue(fields()[2]);
        record.Site = fieldSetFlags()[3] ? this.Site : (java.lang.String) defaultValue(fields()[3]);
        record.BaseAmt = fieldSetFlags()[4] ? this.BaseAmt : (java.lang.Double) defaultValue(fields()[4]);
        record.BaseAmtMinor = fieldSetFlags()[5] ? this.BaseAmtMinor : (java.lang.Long) defaultValue(fields()[5]);
        record.BaseCcy = fieldSetFlags()[6] ? this.BaseCcy : (java.lang.String) defaultValue(fields()[6]);
        record.SenderBIC = fieldSetFlags()[7] ? this.SenderBIC : (java.lang.String) defaultValue(fields()[7]);
        record.ProcCtryCd = fieldSetFlags()[8] ? this.ProcCtryCd : (java.lang.String) defaultValue(fields()[8]);
        record.Department = fieldSetFlags()[9] ? this.Department : (java.lang.String) defaultValue(fields()[9]);
        record.MsgId = fieldSetFlags()[10] ? this.MsgId : (java.lang.String) defaultValue(fields()[10]);
        record.Direction = fieldSetFlags()[11] ? this.Direction : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MessageContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<MessageContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MessageContext>
    READER$ = (org.apache.avro.io.DatumReader<MessageContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.OrigMsgTyp == null) {
      throw new IllegalStateException("OrigMsgTyp cannot be null for MessageContext encoding");
    }
    out.writeString(this.OrigMsgTyp);

    if (this.InstdClrgPref == null) {
      throw new IllegalStateException("InstdClrgPref cannot be null for MessageContext encoding");
    }
    out.writeString(this.InstdClrgPref);

    if (this.InstdMoPCat == null) {
      throw new IllegalStateException("InstdMoPCat cannot be null for MessageContext encoding");
    }
    out.writeString(this.InstdMoPCat);

    if (this.Site == null) {
      throw new IllegalStateException("Site cannot be null for MessageContext encoding");
    }
    out.writeString(this.Site);

    if (this.BaseAmt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.BaseAmt);
    }

    if (this.BaseAmtMinor == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.BaseAmtMinor);
    }

    if (this.BaseCcy == null) {
      throw new IllegalStateException("BaseCcy cannot be null for MessageContext encoding");
    }
    out.writeString(this.BaseCcy);

    if (this.SenderBIC == null) {
      throw new IllegalStateException("SenderBIC cannot be null for MessageContext encoding");
    }
    out.writeString(this.SenderBIC);

    if (this.ProcCtryCd == null) {
      throw new IllegalStateException("ProcCtryCd cannot be null for MessageContext encoding");
    }
    out.writeString(this.ProcCtryCd);

    if (this.Department == null) {
      throw new IllegalStateException("Department cannot be null for MessageContext encoding");
    }
    out.writeString(this.Department);

    if (this.MsgId == null) {
      throw new IllegalStateException("MsgId cannot be null for MessageContext encoding");
    }
    out.writeString(this.MsgId);

    if (this.Direction == null) {
      throw new IllegalStateException("Direction cannot be null for MessageContext encoding");
    }
    out.writeString(this.Direction);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.OrigMsgTyp = in.readString();

      this.InstdClrgPref = in.readString();

      this.InstdMoPCat = in.readString();

      this.Site = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.BaseAmt = null;
      } else {
        this.BaseAmt = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.BaseAmtMinor = null;
      } else {
        this.BaseAmtMinor = in.readLong();
      }

      this.BaseCcy = in.readString();

      this.SenderBIC = in.readString();

      this.ProcCtryCd = in.readString();

      this.Department = in.readString();

      this.MsgId = in.readString();

      this.Direction = in.readString();

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.OrigMsgTyp = in.readString();
          break;

        case 1:
          this.InstdClrgPref = in.readString();
          break;

        case 2:
          this.InstdMoPCat = in.readString();
          break;

        case 3:
          this.Site = in.readString();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.BaseAmt = null;
          } else {
            this.BaseAmt = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.BaseAmtMinor = null;
          } else {
            this.BaseAmtMinor = in.readLong();
          }
          break;

        case 6:
          this.BaseCcy = in.readString();
          break;

        case 7:
          this.SenderBIC = in.readString();
          break;

        case 8:
          this.ProcCtryCd = in.readString();
          break;

        case 9:
          this.Department = in.readString();
          break;

        case 10:
          this.MsgId = in.readString();
          break;

        case 11:
          this.Direction = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










