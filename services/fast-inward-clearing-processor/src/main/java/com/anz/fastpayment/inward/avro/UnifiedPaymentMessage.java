/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Simplified Unified Payment Message for Fast Payment System */
@org.apache.avro.specific.AvroGenerated
public class UnifiedPaymentMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7186329850997605734L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UnifiedPaymentMessage\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"doc\":\"Simplified Unified Payment Message for Fast Payment System\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique transaction identifier\"},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"Transaction amount\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code (e.g., SGD)\"},{\"name\":\"senderAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Sender account number\"},{\"name\":\"receiverAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Receiver account number\"},{\"name\":\"transactionType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of transaction (CTI, DDI, etc.)\"},{\"name\":\"priority\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Transaction priority (HIGH, NORMAL, LOW)\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)\"},{\"name\":\"componentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Component name (e.g., PSPAPFAFAST)\"},{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the message\"},{\"name\":\"channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Channel identifier (e.g., G3I)\"},{\"name\":\"direction\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Direction (I for Inward, O for Outward)\"},{\"name\":\"domainName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Domain name (e.g., PAYMENTS)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<UnifiedPaymentMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UnifiedPaymentMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UnifiedPaymentMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UnifiedPaymentMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UnifiedPaymentMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UnifiedPaymentMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UnifiedPaymentMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UnifiedPaymentMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UnifiedPaymentMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique transaction identifier */
  private java.lang.String transactionId;
  /** Transaction amount */
  private double amount;
  /** Currency code (e.g., SGD) */
  private java.lang.String currency;
  /** Sender account number */
  private java.lang.String senderAccount;
  /** Receiver account number */
  private java.lang.String receiverAccount;
  /** Type of transaction (CTI, DDI, etc.) */
  private java.lang.String transactionType;
  /** Transaction priority (HIGH, NORMAL, LOW) */
  private java.lang.String priority;
  /** Transaction timestamp in epoch milliseconds (Unix timestamp * 1000) */
  private java.time.Instant timestamp;
  /** Component name (e.g., PSPAPFAFAST) */
  private java.lang.String componentName;
  /** Unique identifier for the message */
  private java.lang.String uuid;
  /** Channel identifier (e.g., G3I) */
  private java.lang.String channel;
  /** Direction (I for Inward, O for Outward) */
  private java.lang.String direction;
  /** Domain name (e.g., PAYMENTS) */
  private java.lang.String domainName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UnifiedPaymentMessage() {}

  /**
   * All-args constructor.
   * @param transactionId Unique transaction identifier
   * @param amount Transaction amount
   * @param currency Currency code (e.g., SGD)
   * @param senderAccount Sender account number
   * @param receiverAccount Receiver account number
   * @param transactionType Type of transaction (CTI, DDI, etc.)
   * @param priority Transaction priority (HIGH, NORMAL, LOW)
   * @param timestamp Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
   * @param componentName Component name (e.g., PSPAPFAFAST)
   * @param uuid Unique identifier for the message
   * @param channel Channel identifier (e.g., G3I)
   * @param direction Direction (I for Inward, O for Outward)
   * @param domainName Domain name (e.g., PAYMENTS)
   */
  public UnifiedPaymentMessage(java.lang.String transactionId, java.lang.Double amount, java.lang.String currency, java.lang.String senderAccount, java.lang.String receiverAccount, java.lang.String transactionType, java.lang.String priority, java.time.Instant timestamp, java.lang.String componentName, java.lang.String uuid, java.lang.String channel, java.lang.String direction, java.lang.String domainName) {
    this.transactionId = transactionId;
    this.amount = amount;
    this.currency = currency;
    this.senderAccount = senderAccount;
    this.receiverAccount = receiverAccount;
    this.transactionType = transactionType;
    this.priority = priority;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.componentName = componentName;
    this.uuid = uuid;
    this.channel = channel;
    this.direction = direction;
    this.domainName = domainName;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return amount;
    case 2: return currency;
    case 3: return senderAccount;
    case 4: return receiverAccount;
    case 5: return transactionType;
    case 6: return priority;
    case 7: return timestamp;
    case 8: return componentName;
    case 9: return uuid;
    case 10: return channel;
    case 11: return direction;
    case 12: return domainName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = value$ != null ? value$.toString() : null; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: currency = value$ != null ? value$.toString() : null; break;
    case 3: senderAccount = value$ != null ? value$.toString() : null; break;
    case 4: receiverAccount = value$ != null ? value$.toString() : null; break;
    case 5: transactionType = value$ != null ? value$.toString() : null; break;
    case 6: priority = value$ != null ? value$.toString() : null; break;
    case 7: timestamp = (java.time.Instant)value$; break;
    case 8: componentName = value$ != null ? value$.toString() : null; break;
    case 9: uuid = value$ != null ? value$.toString() : null; break;
    case 10: channel = value$ != null ? value$.toString() : null; break;
    case 11: direction = value$ != null ? value$.toString() : null; break;
    case 12: domainName = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return Unique transaction identifier
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * Unique transaction identifier
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.String value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Transaction amount
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Transaction amount
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Currency code (e.g., SGD)
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Currency code (e.g., SGD)
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'senderAccount' field.
   * @return Sender account number
   */
  public java.lang.String getSenderAccount() {
    return senderAccount;
  }


  /**
   * Sets the value of the 'senderAccount' field.
   * Sender account number
   * @param value the value to set.
   */
  public void setSenderAccount(java.lang.String value) {
    this.senderAccount = value;
  }

  /**
   * Gets the value of the 'receiverAccount' field.
   * @return Receiver account number
   */
  public java.lang.String getReceiverAccount() {
    return receiverAccount;
  }


  /**
   * Sets the value of the 'receiverAccount' field.
   * Receiver account number
   * @param value the value to set.
   */
  public void setReceiverAccount(java.lang.String value) {
    this.receiverAccount = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return Type of transaction (CTI, DDI, etc.)
   */
  public java.lang.String getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * Type of transaction (CTI, DDI, etc.)
   * @param value the value to set.
   */
  public void setTransactionType(java.lang.String value) {
    this.transactionType = value;
  }

  /**
   * Gets the value of the 'priority' field.
   * @return Transaction priority (HIGH, NORMAL, LOW)
   */
  public java.lang.String getPriority() {
    return priority;
  }


  /**
   * Sets the value of the 'priority' field.
   * Transaction priority (HIGH, NORMAL, LOW)
   * @param value the value to set.
   */
  public void setPriority(java.lang.String value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'componentName' field.
   * @return Component name (e.g., PSPAPFAFAST)
   */
  public java.lang.String getComponentName() {
    return componentName;
  }


  /**
   * Sets the value of the 'componentName' field.
   * Component name (e.g., PSPAPFAFAST)
   * @param value the value to set.
   */
  public void setComponentName(java.lang.String value) {
    this.componentName = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Unique identifier for the message
   */
  public java.lang.String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * Unique identifier for the message
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'channel' field.
   * @return Channel identifier (e.g., G3I)
   */
  public java.lang.String getChannel() {
    return channel;
  }


  /**
   * Sets the value of the 'channel' field.
   * Channel identifier (e.g., G3I)
   * @param value the value to set.
   */
  public void setChannel(java.lang.String value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return Direction (I for Inward, O for Outward)
   */
  public java.lang.String getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * Direction (I for Inward, O for Outward)
   * @param value the value to set.
   */
  public void setDirection(java.lang.String value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'domainName' field.
   * @return Domain name (e.g., PAYMENTS)
   */
  public java.lang.String getDomainName() {
    return domainName;
  }


  /**
   * Sets the value of the 'domainName' field.
   * Domain name (e.g., PAYMENTS)
   * @param value the value to set.
   */
  public void setDomainName(java.lang.String value) {
    this.domainName = value;
  }

  /**
   * Creates a new UnifiedPaymentMessage RecordBuilder.
   * @return A new UnifiedPaymentMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder();
  }

  /**
   * Creates a new UnifiedPaymentMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UnifiedPaymentMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder newBuilder(com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder(other);
    }
  }

  /**
   * Creates a new UnifiedPaymentMessage RecordBuilder by copying an existing UnifiedPaymentMessage instance.
   * @param other The existing instance to copy.
   * @return A new UnifiedPaymentMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder newBuilder(com.anz.fastpayment.inward.avro.UnifiedPaymentMessage other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for UnifiedPaymentMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UnifiedPaymentMessage>
    implements org.apache.avro.data.RecordBuilder<UnifiedPaymentMessage> {

    /** Unique transaction identifier */
    private java.lang.String transactionId;
    /** Transaction amount */
    private double amount;
    /** Currency code (e.g., SGD) */
    private java.lang.String currency;
    /** Sender account number */
    private java.lang.String senderAccount;
    /** Receiver account number */
    private java.lang.String receiverAccount;
    /** Type of transaction (CTI, DDI, etc.) */
    private java.lang.String transactionType;
    /** Transaction priority (HIGH, NORMAL, LOW) */
    private java.lang.String priority;
    /** Transaction timestamp in epoch milliseconds (Unix timestamp * 1000) */
    private java.time.Instant timestamp;
    /** Component name (e.g., PSPAPFAFAST) */
    private java.lang.String componentName;
    /** Unique identifier for the message */
    private java.lang.String uuid;
    /** Channel identifier (e.g., G3I) */
    private java.lang.String channel;
    /** Direction (I for Inward, O for Outward) */
    private java.lang.String direction;
    /** Domain name (e.g., PAYMENTS) */
    private java.lang.String domainName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.senderAccount)) {
        this.senderAccount = data().deepCopy(fields()[3].schema(), other.senderAccount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.receiverAccount)) {
        this.receiverAccount = data().deepCopy(fields()[4].schema(), other.receiverAccount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.priority)) {
        this.priority = data().deepCopy(fields()[6].schema(), other.priority);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.componentName)) {
        this.componentName = data().deepCopy(fields()[8].schema(), other.componentName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.uuid)) {
        this.uuid = data().deepCopy(fields()[9].schema(), other.uuid);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.channel)) {
        this.channel = data().deepCopy(fields()[10].schema(), other.channel);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.direction)) {
        this.direction = data().deepCopy(fields()[11].schema(), other.direction);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.domainName)) {
        this.domainName = data().deepCopy(fields()[12].schema(), other.domainName);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing UnifiedPaymentMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.UnifiedPaymentMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.senderAccount)) {
        this.senderAccount = data().deepCopy(fields()[3].schema(), other.senderAccount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receiverAccount)) {
        this.receiverAccount = data().deepCopy(fields()[4].schema(), other.receiverAccount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.priority)) {
        this.priority = data().deepCopy(fields()[6].schema(), other.priority);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.componentName)) {
        this.componentName = data().deepCopy(fields()[8].schema(), other.componentName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.uuid)) {
        this.uuid = data().deepCopy(fields()[9].schema(), other.uuid);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.channel)) {
        this.channel = data().deepCopy(fields()[10].schema(), other.channel);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.direction)) {
        this.direction = data().deepCopy(fields()[11].schema(), other.direction);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.domainName)) {
        this.domainName = data().deepCopy(fields()[12].schema(), other.domainName);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * Unique transaction identifier
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * Unique transaction identifier
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setTransactionId(java.lang.String value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * Unique transaction identifier
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * Unique transaction identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Transaction amount
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Transaction amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Transaction amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * Transaction amount
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Currency code (e.g., SGD)
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Currency code (e.g., SGD)
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setCurrency(java.lang.String value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Currency code (e.g., SGD)
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency' field.
      * Currency code (e.g., SGD)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderAccount' field.
      * Sender account number
      * @return The value.
      */
    public java.lang.String getSenderAccount() {
      return senderAccount;
    }


    /**
      * Sets the value of the 'senderAccount' field.
      * Sender account number
      * @param value The value of 'senderAccount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setSenderAccount(java.lang.String value) {
      validate(fields()[3], value);
      this.senderAccount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'senderAccount' field has been set.
      * Sender account number
      * @return True if the 'senderAccount' field has been set, false otherwise.
      */
    public boolean hasSenderAccount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'senderAccount' field.
      * Sender account number
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearSenderAccount() {
      senderAccount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiverAccount' field.
      * Receiver account number
      * @return The value.
      */
    public java.lang.String getReceiverAccount() {
      return receiverAccount;
    }


    /**
      * Sets the value of the 'receiverAccount' field.
      * Receiver account number
      * @param value The value of 'receiverAccount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setReceiverAccount(java.lang.String value) {
      validate(fields()[4], value);
      this.receiverAccount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'receiverAccount' field has been set.
      * Receiver account number
      * @return True if the 'receiverAccount' field has been set, false otherwise.
      */
    public boolean hasReceiverAccount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'receiverAccount' field.
      * Receiver account number
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearReceiverAccount() {
      receiverAccount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * Type of transaction (CTI, DDI, etc.)
      * @return The value.
      */
    public java.lang.String getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * Type of transaction (CTI, DDI, etc.)
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setTransactionType(java.lang.String value) {
      validate(fields()[5], value);
      this.transactionType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * Type of transaction (CTI, DDI, etc.)
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * Type of transaction (CTI, DDI, etc.)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * Transaction priority (HIGH, NORMAL, LOW)
      * @return The value.
      */
    public java.lang.String getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * Transaction priority (HIGH, NORMAL, LOW)
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setPriority(java.lang.String value) {
      validate(fields()[6], value);
      this.priority = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * Transaction priority (HIGH, NORMAL, LOW)
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'priority' field.
      * Transaction priority (HIGH, NORMAL, LOW)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[7], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Transaction timestamp in epoch milliseconds (Unix timestamp * 1000)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'componentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @return The value.
      */
    public java.lang.String getComponentName() {
      return componentName;
    }


    /**
      * Sets the value of the 'componentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @param value The value of 'componentName'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setComponentName(java.lang.String value) {
      validate(fields()[8], value);
      this.componentName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'componentName' field has been set.
      * Component name (e.g., PSPAPFAFAST)
      * @return True if the 'componentName' field has been set, false otherwise.
      */
    public boolean hasComponentName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'componentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearComponentName() {
      componentName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * Unique identifier for the message
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * Unique identifier for the message
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setUuid(java.lang.String value) {
      validate(fields()[9], value);
      this.uuid = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Unique identifier for the message
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Unique identifier for the message
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'channel' field.
      * Channel identifier (e.g., G3I)
      * @return The value.
      */
    public java.lang.String getChannel() {
      return channel;
    }


    /**
      * Sets the value of the 'channel' field.
      * Channel identifier (e.g., G3I)
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setChannel(java.lang.String value) {
      validate(fields()[10], value);
      this.channel = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * Channel identifier (e.g., G3I)
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'channel' field.
      * Channel identifier (e.g., G3I)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * Direction (I for Inward, O for Outward)
      * @return The value.
      */
    public java.lang.String getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * Direction (I for Inward, O for Outward)
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setDirection(java.lang.String value) {
      validate(fields()[11], value);
      this.direction = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * Direction (I for Inward, O for Outward)
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'direction' field.
      * Direction (I for Inward, O for Outward)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'domainName' field.
      * Domain name (e.g., PAYMENTS)
      * @return The value.
      */
    public java.lang.String getDomainName() {
      return domainName;
    }


    /**
      * Sets the value of the 'domainName' field.
      * Domain name (e.g., PAYMENTS)
      * @param value The value of 'domainName'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder setDomainName(java.lang.String value) {
      validate(fields()[12], value);
      this.domainName = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'domainName' field has been set.
      * Domain name (e.g., PAYMENTS)
      * @return True if the 'domainName' field has been set, false otherwise.
      */
    public boolean hasDomainName() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'domainName' field.
      * Domain name (e.g., PAYMENTS)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.UnifiedPaymentMessage.Builder clearDomainName() {
      domainName = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UnifiedPaymentMessage build() {
      try {
        UnifiedPaymentMessage record = new UnifiedPaymentMessage();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.lang.String) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.currency = fieldSetFlags()[2] ? this.currency : (java.lang.String) defaultValue(fields()[2]);
        record.senderAccount = fieldSetFlags()[3] ? this.senderAccount : (java.lang.String) defaultValue(fields()[3]);
        record.receiverAccount = fieldSetFlags()[4] ? this.receiverAccount : (java.lang.String) defaultValue(fields()[4]);
        record.transactionType = fieldSetFlags()[5] ? this.transactionType : (java.lang.String) defaultValue(fields()[5]);
        record.priority = fieldSetFlags()[6] ? this.priority : (java.lang.String) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.time.Instant) defaultValue(fields()[7]);
        record.componentName = fieldSetFlags()[8] ? this.componentName : (java.lang.String) defaultValue(fields()[8]);
        record.uuid = fieldSetFlags()[9] ? this.uuid : (java.lang.String) defaultValue(fields()[9]);
        record.channel = fieldSetFlags()[10] ? this.channel : (java.lang.String) defaultValue(fields()[10]);
        record.direction = fieldSetFlags()[11] ? this.direction : (java.lang.String) defaultValue(fields()[11]);
        record.domainName = fieldSetFlags()[12] ? this.domainName : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UnifiedPaymentMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<UnifiedPaymentMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UnifiedPaymentMessage>
    READER$ = (org.apache.avro.io.DatumReader<UnifiedPaymentMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










