/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProcessingContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4376377693923982123L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProcessingContext\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"sideEffect\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"softFail\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"PmtDtls\",\"type\":{\"type\":\"record\",\"name\":\"PaymentDetails\",\"fields\":[{\"name\":\"PmtCtxt\",\"type\":{\"type\":\"record\",\"name\":\"PaymentContext\",\"fields\":[{\"name\":\"PuId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"IntnSrc\",\"type\":{\"type\":\"record\",\"name\":\"IntentionSource\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}},{\"name\":\"ProcCtryCd\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InstdClrgPref\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"InstdMoPCat\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"PmtCtgry\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment category (e.g., DD for Direct Debit)\"},{\"name\":\"actClrMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"actlMtdOfPmtCtgry\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"FIDCIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"FICCIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"VAM\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"derivedDRAccountNo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"derivedDRAccountSys\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"derivedDRBookCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProcessingContext> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProcessingContext> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProcessingContext> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProcessingContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProcessingContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProcessingContext to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProcessingContext from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProcessingContext instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProcessingContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.String> sideEffect;
  private java.util.List<java.lang.String> softFail;
  private com.anz.fastpayment.inward.avro.PaymentDetails PmtDtls;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProcessingContext() {}

  /**
   * All-args constructor.
   * @param sideEffect The new value for sideEffect
   * @param softFail The new value for softFail
   * @param PmtDtls The new value for PmtDtls
   */
  public ProcessingContext(java.util.List<java.lang.String> sideEffect, java.util.List<java.lang.String> softFail, com.anz.fastpayment.inward.avro.PaymentDetails PmtDtls) {
    this.sideEffect = sideEffect;
    this.softFail = softFail;
    this.PmtDtls = PmtDtls;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sideEffect;
    case 1: return softFail;
    case 2: return PmtDtls;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sideEffect = (java.util.List<java.lang.String>)value$; break;
    case 1: softFail = (java.util.List<java.lang.String>)value$; break;
    case 2: PmtDtls = (com.anz.fastpayment.inward.avro.PaymentDetails)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sideEffect' field.
   * @return The value of the 'sideEffect' field.
   */
  public java.util.List<java.lang.String> getSideEffect() {
    return sideEffect;
  }


  /**
   * Sets the value of the 'sideEffect' field.
   * @param value the value to set.
   */
  public void setSideEffect(java.util.List<java.lang.String> value) {
    this.sideEffect = value;
  }

  /**
   * Gets the value of the 'softFail' field.
   * @return The value of the 'softFail' field.
   */
  public java.util.List<java.lang.String> getSoftFail() {
    return softFail;
  }


  /**
   * Sets the value of the 'softFail' field.
   * @param value the value to set.
   */
  public void setSoftFail(java.util.List<java.lang.String> value) {
    this.softFail = value;
  }

  /**
   * Gets the value of the 'PmtDtls' field.
   * @return The value of the 'PmtDtls' field.
   */
  public com.anz.fastpayment.inward.avro.PaymentDetails getPmtDtls() {
    return PmtDtls;
  }


  /**
   * Sets the value of the 'PmtDtls' field.
   * @param value the value to set.
   */
  public void setPmtDtls(com.anz.fastpayment.inward.avro.PaymentDetails value) {
    this.PmtDtls = value;
  }

  /**
   * Creates a new ProcessingContext RecordBuilder.
   * @return A new ProcessingContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessingContext.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.ProcessingContext.Builder();
  }

  /**
   * Creates a new ProcessingContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProcessingContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessingContext.Builder newBuilder(com.anz.fastpayment.inward.avro.ProcessingContext.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ProcessingContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ProcessingContext.Builder(other);
    }
  }

  /**
   * Creates a new ProcessingContext RecordBuilder by copying an existing ProcessingContext instance.
   * @param other The existing instance to copy.
   * @return A new ProcessingContext RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessingContext.Builder newBuilder(com.anz.fastpayment.inward.avro.ProcessingContext other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ProcessingContext.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ProcessingContext.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProcessingContext instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProcessingContext>
    implements org.apache.avro.data.RecordBuilder<ProcessingContext> {

    private java.util.List<java.lang.String> sideEffect;
    private java.util.List<java.lang.String> softFail;
    private com.anz.fastpayment.inward.avro.PaymentDetails PmtDtls;
    private com.anz.fastpayment.inward.avro.PaymentDetails.Builder PmtDtlsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ProcessingContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sideEffect)) {
        this.sideEffect = data().deepCopy(fields()[0].schema(), other.sideEffect);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.softFail)) {
        this.softFail = data().deepCopy(fields()[1].schema(), other.softFail);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.PmtDtls)) {
        this.PmtDtls = data().deepCopy(fields()[2].schema(), other.PmtDtls);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPmtDtlsBuilder()) {
        this.PmtDtlsBuilder = com.anz.fastpayment.inward.avro.PaymentDetails.newBuilder(other.getPmtDtlsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ProcessingContext instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ProcessingContext other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sideEffect)) {
        this.sideEffect = data().deepCopy(fields()[0].schema(), other.sideEffect);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.softFail)) {
        this.softFail = data().deepCopy(fields()[1].schema(), other.softFail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PmtDtls)) {
        this.PmtDtls = data().deepCopy(fields()[2].schema(), other.PmtDtls);
        fieldSetFlags()[2] = true;
      }
      this.PmtDtlsBuilder = null;
    }

    /**
      * Gets the value of the 'sideEffect' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSideEffect() {
      return sideEffect;
    }


    /**
      * Sets the value of the 'sideEffect' field.
      * @param value The value of 'sideEffect'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder setSideEffect(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.sideEffect = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sideEffect' field has been set.
      * @return True if the 'sideEffect' field has been set, false otherwise.
      */
    public boolean hasSideEffect() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sideEffect' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder clearSideEffect() {
      sideEffect = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'softFail' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSoftFail() {
      return softFail;
    }


    /**
      * Sets the value of the 'softFail' field.
      * @param value The value of 'softFail'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder setSoftFail(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.softFail = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'softFail' field has been set.
      * @return True if the 'softFail' field has been set, false otherwise.
      */
    public boolean hasSoftFail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'softFail' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder clearSoftFail() {
      softFail = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'PmtDtls' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.PaymentDetails getPmtDtls() {
      return PmtDtls;
    }


    /**
      * Sets the value of the 'PmtDtls' field.
      * @param value The value of 'PmtDtls'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder setPmtDtls(com.anz.fastpayment.inward.avro.PaymentDetails value) {
      validate(fields()[2], value);
      this.PmtDtlsBuilder = null;
      this.PmtDtls = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'PmtDtls' field has been set.
      * @return True if the 'PmtDtls' field has been set, false otherwise.
      */
    public boolean hasPmtDtls() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'PmtDtls' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.PaymentDetails.Builder getPmtDtlsBuilder() {
      if (PmtDtlsBuilder == null) {
        if (hasPmtDtls()) {
          setPmtDtlsBuilder(com.anz.fastpayment.inward.avro.PaymentDetails.newBuilder(PmtDtls));
        } else {
          setPmtDtlsBuilder(com.anz.fastpayment.inward.avro.PaymentDetails.newBuilder());
        }
      }
      return PmtDtlsBuilder;
    }

    /**
     * Sets the Builder instance for the 'PmtDtls' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder setPmtDtlsBuilder(com.anz.fastpayment.inward.avro.PaymentDetails.Builder value) {
      clearPmtDtls();
      PmtDtlsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'PmtDtls' field has an active Builder instance
     * @return True if the 'PmtDtls' field has an active Builder instance
     */
    public boolean hasPmtDtlsBuilder() {
      return PmtDtlsBuilder != null;
    }

    /**
      * Clears the value of the 'PmtDtls' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessingContext.Builder clearPmtDtls() {
      PmtDtls = null;
      PmtDtlsBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProcessingContext build() {
      try {
        ProcessingContext record = new ProcessingContext();
        record.sideEffect = fieldSetFlags()[0] ? this.sideEffect : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.softFail = fieldSetFlags()[1] ? this.softFail : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        if (PmtDtlsBuilder != null) {
          try {
            record.PmtDtls = this.PmtDtlsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("PmtDtls"));
            throw e;
          }
        } else {
          record.PmtDtls = fieldSetFlags()[2] ? this.PmtDtls : (com.anz.fastpayment.inward.avro.PaymentDetails) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProcessingContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProcessingContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProcessingContext>
    READER$ = (org.apache.avro.io.DatumReader<ProcessingContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.sideEffect == null) {
      throw new IllegalStateException("sideEffect cannot be null for ProcessingContext encoding");
    }
    long size0 = this.sideEffect.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.sideEffect) {
      if (e0 == null) {
        throw new IllegalStateException("Array element cannot be null for ProcessingContext.sideEffect encoding");
      }
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.softFail == null) {
      throw new IllegalStateException("softFail cannot be null for ProcessingContext encoding");
    }
    long size1 = this.softFail.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.String e1: this.softFail) {
      if (e1 == null) {
        throw new IllegalStateException("Array element cannot be null for ProcessingContext.softFail encoding");
      }
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    if (this.PmtDtls == null) {
      throw new IllegalStateException("PmtDtls cannot be null for ProcessingContext encoding");
    }
    this.PmtDtls.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.sideEffect;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("sideEffect").schema());
        this.sideEffect = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.String> a1 = this.softFail;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("softFail").schema());
        this.softFail = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

      if (this.PmtDtls == null) {
        this.PmtDtls = new com.anz.fastpayment.inward.avro.PaymentDetails();
      }
      this.PmtDtls.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.sideEffect;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("sideEffect").schema());
            this.sideEffect = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.String> a1 = this.softFail;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("softFail").schema());
            this.softFail = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        case 2:
          if (this.PmtDtls == null) {
            this.PmtDtls = new com.anz.fastpayment.inward.avro.PaymentDetails();
          }
          this.PmtDtls.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










