/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MessageHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8591803022378681784L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MessageHeader\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"ComponentName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Component name (e.g., PSPAPFAFAST)\"},{\"name\":\"UUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the message\"},{\"name\":\"EventInfo\",\"type\":{\"type\":\"record\",\"name\":\"EventInformation\",\"fields\":[{\"name\":\"EventCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Event code (e.g., P.PSP.STS.M.OP_RPI.100)\"},{\"name\":\"EventDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the event\"},{\"name\":\"EventID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique event identifier\"},{\"name\":\"EventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of event (e.g., PE)\"},{\"name\":\"EventProducer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Producer of the event\"},{\"name\":\"EventTS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Event timestamp\"},{\"name\":\"EventTopics\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Kafka topics for the event\"},{\"name\":\"SystemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"System identifier\"},{\"name\":\"Events\",\"type\":{\"type\":\"record\",\"name\":\"EventCollection\",\"fields\":[{\"name\":\"Event\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EventDetail\",\"fields\":[{\"name\":\"EventCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EventID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}},{\"name\":\"EventVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},{\"name\":\"ReplyToQueue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Reply queue name\"},{\"name\":\"ReqMap\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"MUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Message unique identifier\"},{\"name\":\"Channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Channel identifier (e.g., G3I)\"},{\"name\":\"Direction\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Direction (I for Inward, O for Outward)\"},{\"name\":\"RcvdTS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Received timestamp\"},{\"name\":\"DomainName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Domain name (e.g., PAYMENTS)\"},{\"name\":\"DomainType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Domain type (e.g., PAYMENT)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MessageHeader> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MessageHeader> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MessageHeader> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MessageHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MessageHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MessageHeader to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MessageHeader from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MessageHeader instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MessageHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Component name (e.g., PSPAPFAFAST) */
  private java.lang.String ComponentName;
  /** Unique identifier for the message */
  private java.lang.String UUID;
  private com.anz.fastpayment.inward.avro.EventInformation EventInfo;
  /** Reply queue name */
  private java.lang.String ReplyToQueue;
  private java.lang.String ReqMap;
  /** Message unique identifier */
  private java.lang.String MUID;
  /** Channel identifier (e.g., G3I) */
  private java.lang.String Channel;
  /** Direction (I for Inward, O for Outward) */
  private java.lang.String Direction;
  /** Received timestamp */
  private java.lang.String RcvdTS;
  /** Domain name (e.g., PAYMENTS) */
  private java.lang.String DomainName;
  /** Domain type (e.g., PAYMENT) */
  private java.lang.String DomainType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MessageHeader() {}

  /**
   * All-args constructor.
   * @param ComponentName Component name (e.g., PSPAPFAFAST)
   * @param UUID Unique identifier for the message
   * @param EventInfo The new value for EventInfo
   * @param ReplyToQueue Reply queue name
   * @param ReqMap The new value for ReqMap
   * @param MUID Message unique identifier
   * @param Channel Channel identifier (e.g., G3I)
   * @param Direction Direction (I for Inward, O for Outward)
   * @param RcvdTS Received timestamp
   * @param DomainName Domain name (e.g., PAYMENTS)
   * @param DomainType Domain type (e.g., PAYMENT)
   */
  public MessageHeader(java.lang.String ComponentName, java.lang.String UUID, com.anz.fastpayment.inward.avro.EventInformation EventInfo, java.lang.String ReplyToQueue, java.lang.String ReqMap, java.lang.String MUID, java.lang.String Channel, java.lang.String Direction, java.lang.String RcvdTS, java.lang.String DomainName, java.lang.String DomainType) {
    this.ComponentName = ComponentName;
    this.UUID = UUID;
    this.EventInfo = EventInfo;
    this.ReplyToQueue = ReplyToQueue;
    this.ReqMap = ReqMap;
    this.MUID = MUID;
    this.Channel = Channel;
    this.Direction = Direction;
    this.RcvdTS = RcvdTS;
    this.DomainName = DomainName;
    this.DomainType = DomainType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ComponentName;
    case 1: return UUID;
    case 2: return EventInfo;
    case 3: return ReplyToQueue;
    case 4: return ReqMap;
    case 5: return MUID;
    case 6: return Channel;
    case 7: return Direction;
    case 8: return RcvdTS;
    case 9: return DomainName;
    case 10: return DomainType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ComponentName = value$ != null ? value$.toString() : null; break;
    case 1: UUID = value$ != null ? value$.toString() : null; break;
    case 2: EventInfo = (com.anz.fastpayment.inward.avro.EventInformation)value$; break;
    case 3: ReplyToQueue = value$ != null ? value$.toString() : null; break;
    case 4: ReqMap = value$ != null ? value$.toString() : null; break;
    case 5: MUID = value$ != null ? value$.toString() : null; break;
    case 6: Channel = value$ != null ? value$.toString() : null; break;
    case 7: Direction = value$ != null ? value$.toString() : null; break;
    case 8: RcvdTS = value$ != null ? value$.toString() : null; break;
    case 9: DomainName = value$ != null ? value$.toString() : null; break;
    case 10: DomainType = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ComponentName' field.
   * @return Component name (e.g., PSPAPFAFAST)
   */
  public java.lang.String getComponentName() {
    return ComponentName;
  }


  /**
   * Sets the value of the 'ComponentName' field.
   * Component name (e.g., PSPAPFAFAST)
   * @param value the value to set.
   */
  public void setComponentName(java.lang.String value) {
    this.ComponentName = value;
  }

  /**
   * Gets the value of the 'UUID' field.
   * @return Unique identifier for the message
   */
  public java.lang.String getUUID() {
    return UUID;
  }


  /**
   * Sets the value of the 'UUID' field.
   * Unique identifier for the message
   * @param value the value to set.
   */
  public void setUUID(java.lang.String value) {
    this.UUID = value;
  }

  /**
   * Gets the value of the 'EventInfo' field.
   * @return The value of the 'EventInfo' field.
   */
  public com.anz.fastpayment.inward.avro.EventInformation getEventInfo() {
    return EventInfo;
  }


  /**
   * Sets the value of the 'EventInfo' field.
   * @param value the value to set.
   */
  public void setEventInfo(com.anz.fastpayment.inward.avro.EventInformation value) {
    this.EventInfo = value;
  }

  /**
   * Gets the value of the 'ReplyToQueue' field.
   * @return Reply queue name
   */
  public java.lang.String getReplyToQueue() {
    return ReplyToQueue;
  }


  /**
   * Sets the value of the 'ReplyToQueue' field.
   * Reply queue name
   * @param value the value to set.
   */
  public void setReplyToQueue(java.lang.String value) {
    this.ReplyToQueue = value;
  }

  /**
   * Gets the value of the 'ReqMap' field.
   * @return The value of the 'ReqMap' field.
   */
  public java.lang.String getReqMap() {
    return ReqMap;
  }


  /**
   * Sets the value of the 'ReqMap' field.
   * @param value the value to set.
   */
  public void setReqMap(java.lang.String value) {
    this.ReqMap = value;
  }

  /**
   * Gets the value of the 'MUID' field.
   * @return Message unique identifier
   */
  public java.lang.String getMUID() {
    return MUID;
  }


  /**
   * Sets the value of the 'MUID' field.
   * Message unique identifier
   * @param value the value to set.
   */
  public void setMUID(java.lang.String value) {
    this.MUID = value;
  }

  /**
   * Gets the value of the 'Channel' field.
   * @return Channel identifier (e.g., G3I)
   */
  public java.lang.String getChannel() {
    return Channel;
  }


  /**
   * Sets the value of the 'Channel' field.
   * Channel identifier (e.g., G3I)
   * @param value the value to set.
   */
  public void setChannel(java.lang.String value) {
    this.Channel = value;
  }

  /**
   * Gets the value of the 'Direction' field.
   * @return Direction (I for Inward, O for Outward)
   */
  public java.lang.String getDirection() {
    return Direction;
  }


  /**
   * Sets the value of the 'Direction' field.
   * Direction (I for Inward, O for Outward)
   * @param value the value to set.
   */
  public void setDirection(java.lang.String value) {
    this.Direction = value;
  }

  /**
   * Gets the value of the 'RcvdTS' field.
   * @return Received timestamp
   */
  public java.lang.String getRcvdTS() {
    return RcvdTS;
  }


  /**
   * Sets the value of the 'RcvdTS' field.
   * Received timestamp
   * @param value the value to set.
   */
  public void setRcvdTS(java.lang.String value) {
    this.RcvdTS = value;
  }

  /**
   * Gets the value of the 'DomainName' field.
   * @return Domain name (e.g., PAYMENTS)
   */
  public java.lang.String getDomainName() {
    return DomainName;
  }


  /**
   * Sets the value of the 'DomainName' field.
   * Domain name (e.g., PAYMENTS)
   * @param value the value to set.
   */
  public void setDomainName(java.lang.String value) {
    this.DomainName = value;
  }

  /**
   * Gets the value of the 'DomainType' field.
   * @return Domain type (e.g., PAYMENT)
   */
  public java.lang.String getDomainType() {
    return DomainType;
  }


  /**
   * Sets the value of the 'DomainType' field.
   * Domain type (e.g., PAYMENT)
   * @param value the value to set.
   */
  public void setDomainType(java.lang.String value) {
    this.DomainType = value;
  }

  /**
   * Creates a new MessageHeader RecordBuilder.
   * @return A new MessageHeader RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageHeader.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.MessageHeader.Builder();
  }

  /**
   * Creates a new MessageHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MessageHeader RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageHeader.Builder newBuilder(com.anz.fastpayment.inward.avro.MessageHeader.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.MessageHeader.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.MessageHeader.Builder(other);
    }
  }

  /**
   * Creates a new MessageHeader RecordBuilder by copying an existing MessageHeader instance.
   * @param other The existing instance to copy.
   * @return A new MessageHeader RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.MessageHeader.Builder newBuilder(com.anz.fastpayment.inward.avro.MessageHeader other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.MessageHeader.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.MessageHeader.Builder(other);
    }
  }

  /**
   * RecordBuilder for MessageHeader instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MessageHeader>
    implements org.apache.avro.data.RecordBuilder<MessageHeader> {

    /** Component name (e.g., PSPAPFAFAST) */
    private java.lang.String ComponentName;
    /** Unique identifier for the message */
    private java.lang.String UUID;
    private com.anz.fastpayment.inward.avro.EventInformation EventInfo;
    private com.anz.fastpayment.inward.avro.EventInformation.Builder EventInfoBuilder;
    /** Reply queue name */
    private java.lang.String ReplyToQueue;
    private java.lang.String ReqMap;
    /** Message unique identifier */
    private java.lang.String MUID;
    /** Channel identifier (e.g., G3I) */
    private java.lang.String Channel;
    /** Direction (I for Inward, O for Outward) */
    private java.lang.String Direction;
    /** Received timestamp */
    private java.lang.String RcvdTS;
    /** Domain name (e.g., PAYMENTS) */
    private java.lang.String DomainName;
    /** Domain type (e.g., PAYMENT) */
    private java.lang.String DomainType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.MessageHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ComponentName)) {
        this.ComponentName = data().deepCopy(fields()[0].schema(), other.ComponentName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.UUID)) {
        this.UUID = data().deepCopy(fields()[1].schema(), other.UUID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.EventInfo)) {
        this.EventInfo = data().deepCopy(fields()[2].schema(), other.EventInfo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasEventInfoBuilder()) {
        this.EventInfoBuilder = com.anz.fastpayment.inward.avro.EventInformation.newBuilder(other.getEventInfoBuilder());
      }
      if (isValidValue(fields()[3], other.ReplyToQueue)) {
        this.ReplyToQueue = data().deepCopy(fields()[3].schema(), other.ReplyToQueue);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ReqMap)) {
        this.ReqMap = data().deepCopy(fields()[4].schema(), other.ReqMap);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.MUID)) {
        this.MUID = data().deepCopy(fields()[5].schema(), other.MUID);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.Channel)) {
        this.Channel = data().deepCopy(fields()[6].schema(), other.Channel);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.Direction)) {
        this.Direction = data().deepCopy(fields()[7].schema(), other.Direction);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.RcvdTS)) {
        this.RcvdTS = data().deepCopy(fields()[8].schema(), other.RcvdTS);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.DomainName)) {
        this.DomainName = data().deepCopy(fields()[9].schema(), other.DomainName);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.DomainType)) {
        this.DomainType = data().deepCopy(fields()[10].schema(), other.DomainType);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing MessageHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.MessageHeader other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ComponentName)) {
        this.ComponentName = data().deepCopy(fields()[0].schema(), other.ComponentName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.UUID)) {
        this.UUID = data().deepCopy(fields()[1].schema(), other.UUID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EventInfo)) {
        this.EventInfo = data().deepCopy(fields()[2].schema(), other.EventInfo);
        fieldSetFlags()[2] = true;
      }
      this.EventInfoBuilder = null;
      if (isValidValue(fields()[3], other.ReplyToQueue)) {
        this.ReplyToQueue = data().deepCopy(fields()[3].schema(), other.ReplyToQueue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ReqMap)) {
        this.ReqMap = data().deepCopy(fields()[4].schema(), other.ReqMap);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.MUID)) {
        this.MUID = data().deepCopy(fields()[5].schema(), other.MUID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Channel)) {
        this.Channel = data().deepCopy(fields()[6].schema(), other.Channel);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Direction)) {
        this.Direction = data().deepCopy(fields()[7].schema(), other.Direction);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.RcvdTS)) {
        this.RcvdTS = data().deepCopy(fields()[8].schema(), other.RcvdTS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.DomainName)) {
        this.DomainName = data().deepCopy(fields()[9].schema(), other.DomainName);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.DomainType)) {
        this.DomainType = data().deepCopy(fields()[10].schema(), other.DomainType);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'ComponentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @return The value.
      */
    public java.lang.String getComponentName() {
      return ComponentName;
    }


    /**
      * Sets the value of the 'ComponentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @param value The value of 'ComponentName'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setComponentName(java.lang.String value) {
      validate(fields()[0], value);
      this.ComponentName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ComponentName' field has been set.
      * Component name (e.g., PSPAPFAFAST)
      * @return True if the 'ComponentName' field has been set, false otherwise.
      */
    public boolean hasComponentName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ComponentName' field.
      * Component name (e.g., PSPAPFAFAST)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearComponentName() {
      ComponentName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'UUID' field.
      * Unique identifier for the message
      * @return The value.
      */
    public java.lang.String getUUID() {
      return UUID;
    }


    /**
      * Sets the value of the 'UUID' field.
      * Unique identifier for the message
      * @param value The value of 'UUID'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setUUID(java.lang.String value) {
      validate(fields()[1], value);
      this.UUID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'UUID' field has been set.
      * Unique identifier for the message
      * @return True if the 'UUID' field has been set, false otherwise.
      */
    public boolean hasUUID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'UUID' field.
      * Unique identifier for the message
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearUUID() {
      UUID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventInfo' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.EventInformation getEventInfo() {
      return EventInfo;
    }


    /**
      * Sets the value of the 'EventInfo' field.
      * @param value The value of 'EventInfo'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setEventInfo(com.anz.fastpayment.inward.avro.EventInformation value) {
      validate(fields()[2], value);
      this.EventInfoBuilder = null;
      this.EventInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EventInfo' field has been set.
      * @return True if the 'EventInfo' field has been set, false otherwise.
      */
    public boolean hasEventInfo() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'EventInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder getEventInfoBuilder() {
      if (EventInfoBuilder == null) {
        if (hasEventInfo()) {
          setEventInfoBuilder(com.anz.fastpayment.inward.avro.EventInformation.newBuilder(EventInfo));
        } else {
          setEventInfoBuilder(com.anz.fastpayment.inward.avro.EventInformation.newBuilder());
        }
      }
      return EventInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setEventInfoBuilder(com.anz.fastpayment.inward.avro.EventInformation.Builder value) {
      clearEventInfo();
      EventInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventInfo' field has an active Builder instance
     * @return True if the 'EventInfo' field has an active Builder instance
     */
    public boolean hasEventInfoBuilder() {
      return EventInfoBuilder != null;
    }

    /**
      * Clears the value of the 'EventInfo' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearEventInfo() {
      EventInfo = null;
      EventInfoBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ReplyToQueue' field.
      * Reply queue name
      * @return The value.
      */
    public java.lang.String getReplyToQueue() {
      return ReplyToQueue;
    }


    /**
      * Sets the value of the 'ReplyToQueue' field.
      * Reply queue name
      * @param value The value of 'ReplyToQueue'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setReplyToQueue(java.lang.String value) {
      validate(fields()[3], value);
      this.ReplyToQueue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ReplyToQueue' field has been set.
      * Reply queue name
      * @return True if the 'ReplyToQueue' field has been set, false otherwise.
      */
    public boolean hasReplyToQueue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ReplyToQueue' field.
      * Reply queue name
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearReplyToQueue() {
      ReplyToQueue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ReqMap' field.
      * @return The value.
      */
    public java.lang.String getReqMap() {
      return ReqMap;
    }


    /**
      * Sets the value of the 'ReqMap' field.
      * @param value The value of 'ReqMap'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setReqMap(java.lang.String value) {
      validate(fields()[4], value);
      this.ReqMap = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ReqMap' field has been set.
      * @return True if the 'ReqMap' field has been set, false otherwise.
      */
    public boolean hasReqMap() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ReqMap' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearReqMap() {
      ReqMap = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'MUID' field.
      * Message unique identifier
      * @return The value.
      */
    public java.lang.String getMUID() {
      return MUID;
    }


    /**
      * Sets the value of the 'MUID' field.
      * Message unique identifier
      * @param value The value of 'MUID'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setMUID(java.lang.String value) {
      validate(fields()[5], value);
      this.MUID = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'MUID' field has been set.
      * Message unique identifier
      * @return True if the 'MUID' field has been set, false otherwise.
      */
    public boolean hasMUID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'MUID' field.
      * Message unique identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearMUID() {
      MUID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Channel' field.
      * Channel identifier (e.g., G3I)
      * @return The value.
      */
    public java.lang.String getChannel() {
      return Channel;
    }


    /**
      * Sets the value of the 'Channel' field.
      * Channel identifier (e.g., G3I)
      * @param value The value of 'Channel'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setChannel(java.lang.String value) {
      validate(fields()[6], value);
      this.Channel = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Channel' field has been set.
      * Channel identifier (e.g., G3I)
      * @return True if the 'Channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Channel' field.
      * Channel identifier (e.g., G3I)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearChannel() {
      Channel = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Direction' field.
      * Direction (I for Inward, O for Outward)
      * @return The value.
      */
    public java.lang.String getDirection() {
      return Direction;
    }


    /**
      * Sets the value of the 'Direction' field.
      * Direction (I for Inward, O for Outward)
      * @param value The value of 'Direction'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setDirection(java.lang.String value) {
      validate(fields()[7], value);
      this.Direction = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Direction' field has been set.
      * Direction (I for Inward, O for Outward)
      * @return True if the 'Direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Direction' field.
      * Direction (I for Inward, O for Outward)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearDirection() {
      Direction = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'RcvdTS' field.
      * Received timestamp
      * @return The value.
      */
    public java.lang.String getRcvdTS() {
      return RcvdTS;
    }


    /**
      * Sets the value of the 'RcvdTS' field.
      * Received timestamp
      * @param value The value of 'RcvdTS'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setRcvdTS(java.lang.String value) {
      validate(fields()[8], value);
      this.RcvdTS = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'RcvdTS' field has been set.
      * Received timestamp
      * @return True if the 'RcvdTS' field has been set, false otherwise.
      */
    public boolean hasRcvdTS() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'RcvdTS' field.
      * Received timestamp
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearRcvdTS() {
      RcvdTS = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'DomainName' field.
      * Domain name (e.g., PAYMENTS)
      * @return The value.
      */
    public java.lang.String getDomainName() {
      return DomainName;
    }


    /**
      * Sets the value of the 'DomainName' field.
      * Domain name (e.g., PAYMENTS)
      * @param value The value of 'DomainName'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setDomainName(java.lang.String value) {
      validate(fields()[9], value);
      this.DomainName = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'DomainName' field has been set.
      * Domain name (e.g., PAYMENTS)
      * @return True if the 'DomainName' field has been set, false otherwise.
      */
    public boolean hasDomainName() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'DomainName' field.
      * Domain name (e.g., PAYMENTS)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearDomainName() {
      DomainName = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'DomainType' field.
      * Domain type (e.g., PAYMENT)
      * @return The value.
      */
    public java.lang.String getDomainType() {
      return DomainType;
    }


    /**
      * Sets the value of the 'DomainType' field.
      * Domain type (e.g., PAYMENT)
      * @param value The value of 'DomainType'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder setDomainType(java.lang.String value) {
      validate(fields()[10], value);
      this.DomainType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'DomainType' field has been set.
      * Domain type (e.g., PAYMENT)
      * @return True if the 'DomainType' field has been set, false otherwise.
      */
    public boolean hasDomainType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'DomainType' field.
      * Domain type (e.g., PAYMENT)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.MessageHeader.Builder clearDomainType() {
      DomainType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MessageHeader build() {
      try {
        MessageHeader record = new MessageHeader();
        record.ComponentName = fieldSetFlags()[0] ? this.ComponentName : (java.lang.String) defaultValue(fields()[0]);
        record.UUID = fieldSetFlags()[1] ? this.UUID : (java.lang.String) defaultValue(fields()[1]);
        if (EventInfoBuilder != null) {
          try {
            record.EventInfo = this.EventInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventInfo"));
            throw e;
          }
        } else {
          record.EventInfo = fieldSetFlags()[2] ? this.EventInfo : (com.anz.fastpayment.inward.avro.EventInformation) defaultValue(fields()[2]);
        }
        record.ReplyToQueue = fieldSetFlags()[3] ? this.ReplyToQueue : (java.lang.String) defaultValue(fields()[3]);
        record.ReqMap = fieldSetFlags()[4] ? this.ReqMap : (java.lang.String) defaultValue(fields()[4]);
        record.MUID = fieldSetFlags()[5] ? this.MUID : (java.lang.String) defaultValue(fields()[5]);
        record.Channel = fieldSetFlags()[6] ? this.Channel : (java.lang.String) defaultValue(fields()[6]);
        record.Direction = fieldSetFlags()[7] ? this.Direction : (java.lang.String) defaultValue(fields()[7]);
        record.RcvdTS = fieldSetFlags()[8] ? this.RcvdTS : (java.lang.String) defaultValue(fields()[8]);
        record.DomainName = fieldSetFlags()[9] ? this.DomainName : (java.lang.String) defaultValue(fields()[9]);
        record.DomainType = fieldSetFlags()[10] ? this.DomainType : (java.lang.String) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MessageHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<MessageHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MessageHeader>
    READER$ = (org.apache.avro.io.DatumReader<MessageHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.ComponentName == null) {
      throw new IllegalStateException("ComponentName cannot be null for MessageHeader encoding");
    }
    out.writeString(this.ComponentName);

    if (this.UUID == null) {
      throw new IllegalStateException("UUID cannot be null for MessageHeader encoding");
    }
    out.writeString(this.UUID);

    if (this.EventInfo == null) {
      throw new IllegalStateException("EventInfo cannot be null for MessageHeader encoding");
    }
    this.EventInfo.customEncode(out);

    if (this.ReplyToQueue == null) {
      throw new IllegalStateException("ReplyToQueue cannot be null for MessageHeader encoding");
    }
    out.writeString(this.ReplyToQueue);

    if (this.ReqMap == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ReqMap);
    }

    if (this.MUID == null) {
      throw new IllegalStateException("MUID cannot be null for MessageHeader encoding");
    }
    out.writeString(this.MUID);

    if (this.Channel == null) {
      throw new IllegalStateException("Channel cannot be null for MessageHeader encoding");
    }
    out.writeString(this.Channel);

    if (this.Direction == null) {
      throw new IllegalStateException("Direction cannot be null for MessageHeader encoding");
    }
    out.writeString(this.Direction);

    if (this.RcvdTS == null) {
      throw new IllegalStateException("RcvdTS cannot be null for MessageHeader encoding");
    }
    out.writeString(this.RcvdTS);

    if (this.DomainName == null) {
      throw new IllegalStateException("DomainName cannot be null for MessageHeader encoding");
    }
    out.writeString(this.DomainName);

    if (this.DomainType == null) {
      throw new IllegalStateException("DomainType cannot be null for MessageHeader encoding");
    }
    out.writeString(this.DomainType);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ComponentName = in.readString();

      this.UUID = in.readString();

      if (this.EventInfo == null) {
        this.EventInfo = new com.anz.fastpayment.inward.avro.EventInformation();
      }
      this.EventInfo.customDecode(in);

      this.ReplyToQueue = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.ReqMap = null;
      } else {
        this.ReqMap = in.readString();
      }

      this.MUID = in.readString();

      this.Channel = in.readString();

      this.Direction = in.readString();

      this.RcvdTS = in.readString();

      this.DomainName = in.readString();

      this.DomainType = in.readString();

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ComponentName = in.readString();
          break;

        case 1:
          this.UUID = in.readString();
          break;

        case 2:
          if (this.EventInfo == null) {
            this.EventInfo = new com.anz.fastpayment.inward.avro.EventInformation();
          }
          this.EventInfo.customDecode(in);
          break;

        case 3:
          this.ReplyToQueue = in.readString();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ReqMap = null;
          } else {
            this.ReqMap = in.readString();
          }
          break;

        case 5:
          this.MUID = in.readString();
          break;

        case 6:
          this.Channel = in.readString();
          break;

        case 7:
          this.Direction = in.readString();
          break;

        case 8:
          this.RcvdTS = in.readString();
          break;

        case 9:
          this.DomainName = in.readString();
          break;

        case 10:
          this.DomainType = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










