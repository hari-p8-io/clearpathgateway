/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ToBeneficiary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6224659763761968799L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ToBeneficiary\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ToBeneficiary> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ToBeneficiary> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ToBeneficiary> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ToBeneficiary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ToBeneficiary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ToBeneficiary to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ToBeneficiary from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ToBeneficiary instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ToBeneficiary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String Name;
  private java.lang.String Country;
  private java.lang.String Message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ToBeneficiary() {}

  /**
   * All-args constructor.
   * @param Name The new value for Name
   * @param Country The new value for Country
   * @param Message The new value for Message
   */
  public ToBeneficiary(java.lang.String Name, java.lang.String Country, java.lang.String Message) {
    this.Name = Name;
    this.Country = Country;
    this.Message = Message;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Name;
    case 1: return Country;
    case 2: return Message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Name = value$ != null ? value$.toString() : null; break;
    case 1: Country = value$ != null ? value$.toString() : null; break;
    case 2: Message = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.String getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Country' field.
   * @return The value of the 'Country' field.
   */
  public java.lang.String getCountry() {
    return Country;
  }


  /**
   * Sets the value of the 'Country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.Country = value;
  }

  /**
   * Gets the value of the 'Message' field.
   * @return The value of the 'Message' field.
   */
  public java.lang.String getMessage() {
    return Message;
  }


  /**
   * Sets the value of the 'Message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.Message = value;
  }

  /**
   * Creates a new ToBeneficiary RecordBuilder.
   * @return A new ToBeneficiary RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ToBeneficiary.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.ToBeneficiary.Builder();
  }

  /**
   * Creates a new ToBeneficiary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ToBeneficiary RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ToBeneficiary.Builder newBuilder(com.anz.fastpayment.inward.avro.ToBeneficiary.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ToBeneficiary.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ToBeneficiary.Builder(other);
    }
  }

  /**
   * Creates a new ToBeneficiary RecordBuilder by copying an existing ToBeneficiary instance.
   * @param other The existing instance to copy.
   * @return A new ToBeneficiary RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ToBeneficiary.Builder newBuilder(com.anz.fastpayment.inward.avro.ToBeneficiary other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ToBeneficiary.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ToBeneficiary.Builder(other);
    }
  }

  /**
   * RecordBuilder for ToBeneficiary instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ToBeneficiary>
    implements org.apache.avro.data.RecordBuilder<ToBeneficiary> {

    private java.lang.String Name;
    private java.lang.String Country;
    private java.lang.String Message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ToBeneficiary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Name)) {
        this.Name = data().deepCopy(fields()[0].schema(), other.Name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Country)) {
        this.Country = data().deepCopy(fields()[1].schema(), other.Country);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Message)) {
        this.Message = data().deepCopy(fields()[2].schema(), other.Message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ToBeneficiary instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ToBeneficiary other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Name)) {
        this.Name = data().deepCopy(fields()[0].schema(), other.Name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Country)) {
        this.Country = data().deepCopy(fields()[1].schema(), other.Country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Message)) {
        this.Message = data().deepCopy(fields()[2].schema(), other.Message);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.Name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder clearName() {
      Name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return Country;
    }


    /**
      * Sets the value of the 'Country' field.
      * @param value The value of 'Country'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder setCountry(java.lang.String value) {
      validate(fields()[1], value);
      this.Country = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Country' field has been set.
      * @return True if the 'Country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Country' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder clearCountry() {
      Country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return Message;
    }


    /**
      * Sets the value of the 'Message' field.
      * @param value The value of 'Message'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder setMessage(java.lang.String value) {
      validate(fields()[2], value);
      this.Message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Message' field has been set.
      * @return True if the 'Message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Message' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ToBeneficiary.Builder clearMessage() {
      Message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ToBeneficiary build() {
      try {
        ToBeneficiary record = new ToBeneficiary();
        record.Name = fieldSetFlags()[0] ? this.Name : (java.lang.String) defaultValue(fields()[0]);
        record.Country = fieldSetFlags()[1] ? this.Country : (java.lang.String) defaultValue(fields()[1]);
        record.Message = fieldSetFlags()[2] ? this.Message : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ToBeneficiary>
    WRITER$ = (org.apache.avro.io.DatumWriter<ToBeneficiary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ToBeneficiary>
    READER$ = (org.apache.avro.io.DatumReader<ToBeneficiary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.Name == null) {
      throw new IllegalStateException("Name cannot be null for ToBeneficiary encoding");
    }
    out.writeString(this.Name);

    if (this.Country == null) {
      throw new IllegalStateException("Country cannot be null for ToBeneficiary encoding");
    }
    out.writeString(this.Country);

    if (this.Message == null) {
      throw new IllegalStateException("Message cannot be null for ToBeneficiary encoding");
    }
    out.writeString(this.Message);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Name = in.readString();

      this.Country = in.readString();

      this.Message = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Name = in.readString();
          break;

        case 1:
          this.Country = in.readString();
          break;

        case 2:
          this.Message = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










