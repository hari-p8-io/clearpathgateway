/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Simplified Processed Transaction Message */
@org.apache.avro.specific.AvroGenerated
public class ProcessedTransactionMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1036069756921261736L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProcessedTransactionMessage\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"doc\":\"Simplified Processed Transaction Message\",\"fields\":[{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique transaction identifier\"},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"Transaction amount\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code\"},{\"name\":\"senderAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Sender account number\"},{\"name\":\"receiverAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Receiver account number\"},{\"name\":\"transactionType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of transaction\"},{\"name\":\"priority\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Transaction priority\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Original transaction timestamp\"},{\"name\":\"processingTimestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"When the transaction was processed\"},{\"name\":\"processingNodeId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID of the processing node\"},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Processing status (SUCCESS, FAILED, PENDING)\"},{\"name\":\"validationPassed\",\"type\":\"boolean\",\"doc\":\"Whether validation passed\"},{\"name\":\"businessRulesPassed\",\"type\":\"boolean\",\"doc\":\"Whether business rules passed\"},{\"name\":\"errorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Error message if processing failed\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProcessedTransactionMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProcessedTransactionMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProcessedTransactionMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProcessedTransactionMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProcessedTransactionMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProcessedTransactionMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProcessedTransactionMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProcessedTransactionMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProcessedTransactionMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique transaction identifier */
  private java.lang.String transactionId;
  /** Transaction amount */
  private double amount;
  /** Currency code */
  private java.lang.String currency;
  /** Sender account number */
  private java.lang.String senderAccount;
  /** Receiver account number */
  private java.lang.String receiverAccount;
  /** Type of transaction */
  private java.lang.String transactionType;
  /** Transaction priority */
  private java.lang.String priority;
  /** Original transaction timestamp */
  private java.lang.String timestamp;
  /** When the transaction was processed */
  private java.lang.String processingTimestamp;
  /** ID of the processing node */
  private java.lang.String processingNodeId;
  /** Processing status (SUCCESS, FAILED, PENDING) */
  private java.lang.String status;
  /** Whether validation passed */
  private boolean validationPassed;
  /** Whether business rules passed */
  private boolean businessRulesPassed;
  /** Error message if processing failed */
  private java.lang.String errorMessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProcessedTransactionMessage() {}

  /**
   * All-args constructor.
   * @param transactionId Unique transaction identifier
   * @param amount Transaction amount
   * @param currency Currency code
   * @param senderAccount Sender account number
   * @param receiverAccount Receiver account number
   * @param transactionType Type of transaction
   * @param priority Transaction priority
   * @param timestamp Original transaction timestamp
   * @param processingTimestamp When the transaction was processed
   * @param processingNodeId ID of the processing node
   * @param status Processing status (SUCCESS, FAILED, PENDING)
   * @param validationPassed Whether validation passed
   * @param businessRulesPassed Whether business rules passed
   * @param errorMessage Error message if processing failed
   */
  public ProcessedTransactionMessage(java.lang.String transactionId, java.lang.Double amount, java.lang.String currency, java.lang.String senderAccount, java.lang.String receiverAccount, java.lang.String transactionType, java.lang.String priority, java.lang.String timestamp, java.lang.String processingTimestamp, java.lang.String processingNodeId, java.lang.String status, java.lang.Boolean validationPassed, java.lang.Boolean businessRulesPassed, java.lang.String errorMessage) {
    this.transactionId = transactionId;
    this.amount = amount;
    this.currency = currency;
    this.senderAccount = senderAccount;
    this.receiverAccount = receiverAccount;
    this.transactionType = transactionType;
    this.priority = priority;
    this.timestamp = timestamp;
    this.processingTimestamp = processingTimestamp;
    this.processingNodeId = processingNodeId;
    this.status = status;
    this.validationPassed = validationPassed;
    this.businessRulesPassed = businessRulesPassed;
    this.errorMessage = errorMessage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionId;
    case 1: return amount;
    case 2: return currency;
    case 3: return senderAccount;
    case 4: return receiverAccount;
    case 5: return transactionType;
    case 6: return priority;
    case 7: return timestamp;
    case 8: return processingTimestamp;
    case 9: return processingNodeId;
    case 10: return status;
    case 11: return validationPassed;
    case 12: return businessRulesPassed;
    case 13: return errorMessage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionId = value$ != null ? value$.toString() : null; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: currency = value$ != null ? value$.toString() : null; break;
    case 3: senderAccount = value$ != null ? value$.toString() : null; break;
    case 4: receiverAccount = value$ != null ? value$.toString() : null; break;
    case 5: transactionType = value$ != null ? value$.toString() : null; break;
    case 6: priority = value$ != null ? value$.toString() : null; break;
    case 7: timestamp = value$ != null ? value$.toString() : null; break;
    case 8: processingTimestamp = value$ != null ? value$.toString() : null; break;
    case 9: processingNodeId = value$ != null ? value$.toString() : null; break;
    case 10: status = value$ != null ? value$.toString() : null; break;
    case 11: validationPassed = (java.lang.Boolean)value$; break;
    case 12: businessRulesPassed = (java.lang.Boolean)value$; break;
    case 13: errorMessage = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return Unique transaction identifier
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * Unique transaction identifier
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.String value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Transaction amount
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * Transaction amount
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Currency code
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Currency code
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'senderAccount' field.
   * @return Sender account number
   */
  public java.lang.String getSenderAccount() {
    return senderAccount;
  }


  /**
   * Sets the value of the 'senderAccount' field.
   * Sender account number
   * @param value the value to set.
   */
  public void setSenderAccount(java.lang.String value) {
    this.senderAccount = value;
  }

  /**
   * Gets the value of the 'receiverAccount' field.
   * @return Receiver account number
   */
  public java.lang.String getReceiverAccount() {
    return receiverAccount;
  }


  /**
   * Sets the value of the 'receiverAccount' field.
   * Receiver account number
   * @param value the value to set.
   */
  public void setReceiverAccount(java.lang.String value) {
    this.receiverAccount = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return Type of transaction
   */
  public java.lang.String getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * Type of transaction
   * @param value the value to set.
   */
  public void setTransactionType(java.lang.String value) {
    this.transactionType = value;
  }

  /**
   * Gets the value of the 'priority' field.
   * @return Transaction priority
   */
  public java.lang.String getPriority() {
    return priority;
  }


  /**
   * Sets the value of the 'priority' field.
   * Transaction priority
   * @param value the value to set.
   */
  public void setPriority(java.lang.String value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Original transaction timestamp
   */
  public java.lang.String getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Original transaction timestamp
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'processingTimestamp' field.
   * @return When the transaction was processed
   */
  public java.lang.String getProcessingTimestamp() {
    return processingTimestamp;
  }


  /**
   * Sets the value of the 'processingTimestamp' field.
   * When the transaction was processed
   * @param value the value to set.
   */
  public void setProcessingTimestamp(java.lang.String value) {
    this.processingTimestamp = value;
  }

  /**
   * Gets the value of the 'processingNodeId' field.
   * @return ID of the processing node
   */
  public java.lang.String getProcessingNodeId() {
    return processingNodeId;
  }


  /**
   * Sets the value of the 'processingNodeId' field.
   * ID of the processing node
   * @param value the value to set.
   */
  public void setProcessingNodeId(java.lang.String value) {
    this.processingNodeId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Processing status (SUCCESS, FAILED, PENDING)
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Processing status (SUCCESS, FAILED, PENDING)
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'validationPassed' field.
   * @return Whether validation passed
   */
  public boolean getValidationPassed() {
    return validationPassed;
  }


  /**
   * Sets the value of the 'validationPassed' field.
   * Whether validation passed
   * @param value the value to set.
   */
  public void setValidationPassed(boolean value) {
    this.validationPassed = value;
  }

  /**
   * Gets the value of the 'businessRulesPassed' field.
   * @return Whether business rules passed
   */
  public boolean getBusinessRulesPassed() {
    return businessRulesPassed;
  }


  /**
   * Sets the value of the 'businessRulesPassed' field.
   * Whether business rules passed
   * @param value the value to set.
   */
  public void setBusinessRulesPassed(boolean value) {
    this.businessRulesPassed = value;
  }

  /**
   * Gets the value of the 'errorMessage' field.
   * @return Error message if processing failed
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }


  /**
   * Sets the value of the 'errorMessage' field.
   * Error message if processing failed
   * @param value the value to set.
   */
  public void setErrorMessage(java.lang.String value) {
    this.errorMessage = value;
  }

  /**
   * Creates a new ProcessedTransactionMessage RecordBuilder.
   * @return A new ProcessedTransactionMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder();
  }

  /**
   * Creates a new ProcessedTransactionMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProcessedTransactionMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder newBuilder(com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder(other);
    }
  }

  /**
   * Creates a new ProcessedTransactionMessage RecordBuilder by copying an existing ProcessedTransactionMessage instance.
   * @param other The existing instance to copy.
   * @return A new ProcessedTransactionMessage RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder newBuilder(com.anz.fastpayment.inward.avro.ProcessedTransactionMessage other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProcessedTransactionMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProcessedTransactionMessage>
    implements org.apache.avro.data.RecordBuilder<ProcessedTransactionMessage> {

    /** Unique transaction identifier */
    private java.lang.String transactionId;
    /** Transaction amount */
    private double amount;
    /** Currency code */
    private java.lang.String currency;
    /** Sender account number */
    private java.lang.String senderAccount;
    /** Receiver account number */
    private java.lang.String receiverAccount;
    /** Type of transaction */
    private java.lang.String transactionType;
    /** Transaction priority */
    private java.lang.String priority;
    /** Original transaction timestamp */
    private java.lang.String timestamp;
    /** When the transaction was processed */
    private java.lang.String processingTimestamp;
    /** ID of the processing node */
    private java.lang.String processingNodeId;
    /** Processing status (SUCCESS, FAILED, PENDING) */
    private java.lang.String status;
    /** Whether validation passed */
    private boolean validationPassed;
    /** Whether business rules passed */
    private boolean businessRulesPassed;
    /** Error message if processing failed */
    private java.lang.String errorMessage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.senderAccount)) {
        this.senderAccount = data().deepCopy(fields()[3].schema(), other.senderAccount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.receiverAccount)) {
        this.receiverAccount = data().deepCopy(fields()[4].schema(), other.receiverAccount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.priority)) {
        this.priority = data().deepCopy(fields()[6].schema(), other.priority);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.processingTimestamp)) {
        this.processingTimestamp = data().deepCopy(fields()[8].schema(), other.processingTimestamp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.processingNodeId)) {
        this.processingNodeId = data().deepCopy(fields()[9].schema(), other.processingNodeId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.status)) {
        this.status = data().deepCopy(fields()[10].schema(), other.status);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.validationPassed)) {
        this.validationPassed = data().deepCopy(fields()[11].schema(), other.validationPassed);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.businessRulesPassed)) {
        this.businessRulesPassed = data().deepCopy(fields()[12].schema(), other.businessRulesPassed);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[13].schema(), other.errorMessage);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing ProcessedTransactionMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.ProcessedTransactionMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[0].schema(), other.transactionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.senderAccount)) {
        this.senderAccount = data().deepCopy(fields()[3].schema(), other.senderAccount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.receiverAccount)) {
        this.receiverAccount = data().deepCopy(fields()[4].schema(), other.receiverAccount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[5].schema(), other.transactionType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.priority)) {
        this.priority = data().deepCopy(fields()[6].schema(), other.priority);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.processingTimestamp)) {
        this.processingTimestamp = data().deepCopy(fields()[8].schema(), other.processingTimestamp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.processingNodeId)) {
        this.processingNodeId = data().deepCopy(fields()[9].schema(), other.processingNodeId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.status)) {
        this.status = data().deepCopy(fields()[10].schema(), other.status);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.validationPassed)) {
        this.validationPassed = data().deepCopy(fields()[11].schema(), other.validationPassed);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.businessRulesPassed)) {
        this.businessRulesPassed = data().deepCopy(fields()[12].schema(), other.businessRulesPassed);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[13].schema(), other.errorMessage);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'transactionId' field.
      * Unique transaction identifier
      * @return The value.
      */
    public java.lang.String getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * Unique transaction identifier
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setTransactionId(java.lang.String value) {
      validate(fields()[0], value);
      this.transactionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * Unique transaction identifier
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * Unique transaction identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Transaction amount
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Transaction amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Transaction amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * Transaction amount
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Currency code
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Currency code
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setCurrency(java.lang.String value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Currency code
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency' field.
      * Currency code
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderAccount' field.
      * Sender account number
      * @return The value.
      */
    public java.lang.String getSenderAccount() {
      return senderAccount;
    }


    /**
      * Sets the value of the 'senderAccount' field.
      * Sender account number
      * @param value The value of 'senderAccount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setSenderAccount(java.lang.String value) {
      validate(fields()[3], value);
      this.senderAccount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'senderAccount' field has been set.
      * Sender account number
      * @return True if the 'senderAccount' field has been set, false otherwise.
      */
    public boolean hasSenderAccount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'senderAccount' field.
      * Sender account number
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearSenderAccount() {
      senderAccount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiverAccount' field.
      * Receiver account number
      * @return The value.
      */
    public java.lang.String getReceiverAccount() {
      return receiverAccount;
    }


    /**
      * Sets the value of the 'receiverAccount' field.
      * Receiver account number
      * @param value The value of 'receiverAccount'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setReceiverAccount(java.lang.String value) {
      validate(fields()[4], value);
      this.receiverAccount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'receiverAccount' field has been set.
      * Receiver account number
      * @return True if the 'receiverAccount' field has been set, false otherwise.
      */
    public boolean hasReceiverAccount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'receiverAccount' field.
      * Receiver account number
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearReceiverAccount() {
      receiverAccount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * Type of transaction
      * @return The value.
      */
    public java.lang.String getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * Type of transaction
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setTransactionType(java.lang.String value) {
      validate(fields()[5], value);
      this.transactionType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * Type of transaction
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * Type of transaction
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * Transaction priority
      * @return The value.
      */
    public java.lang.String getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * Transaction priority
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setPriority(java.lang.String value) {
      validate(fields()[6], value);
      this.priority = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * Transaction priority
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'priority' field.
      * Transaction priority
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Original transaction timestamp
      * @return The value.
      */
    public java.lang.String getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Original transaction timestamp
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setTimestamp(java.lang.String value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Original transaction timestamp
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Original transaction timestamp
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingTimestamp' field.
      * When the transaction was processed
      * @return The value.
      */
    public java.lang.String getProcessingTimestamp() {
      return processingTimestamp;
    }


    /**
      * Sets the value of the 'processingTimestamp' field.
      * When the transaction was processed
      * @param value The value of 'processingTimestamp'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setProcessingTimestamp(java.lang.String value) {
      validate(fields()[8], value);
      this.processingTimestamp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'processingTimestamp' field has been set.
      * When the transaction was processed
      * @return True if the 'processingTimestamp' field has been set, false otherwise.
      */
    public boolean hasProcessingTimestamp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'processingTimestamp' field.
      * When the transaction was processed
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearProcessingTimestamp() {
      processingTimestamp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingNodeId' field.
      * ID of the processing node
      * @return The value.
      */
    public java.lang.String getProcessingNodeId() {
      return processingNodeId;
    }


    /**
      * Sets the value of the 'processingNodeId' field.
      * ID of the processing node
      * @param value The value of 'processingNodeId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setProcessingNodeId(java.lang.String value) {
      validate(fields()[9], value);
      this.processingNodeId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'processingNodeId' field has been set.
      * ID of the processing node
      * @return True if the 'processingNodeId' field has been set, false otherwise.
      */
    public boolean hasProcessingNodeId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'processingNodeId' field.
      * ID of the processing node
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearProcessingNodeId() {
      processingNodeId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Processing status (SUCCESS, FAILED, PENDING)
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Processing status (SUCCESS, FAILED, PENDING)
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setStatus(java.lang.String value) {
      validate(fields()[10], value);
      this.status = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Processing status (SUCCESS, FAILED, PENDING)
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'status' field.
      * Processing status (SUCCESS, FAILED, PENDING)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearStatus() {
      status = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'validationPassed' field.
      * Whether validation passed
      * @return The value.
      */
    public boolean getValidationPassed() {
      return validationPassed;
    }


    /**
      * Sets the value of the 'validationPassed' field.
      * Whether validation passed
      * @param value The value of 'validationPassed'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setValidationPassed(boolean value) {
      validate(fields()[11], value);
      this.validationPassed = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'validationPassed' field has been set.
      * Whether validation passed
      * @return True if the 'validationPassed' field has been set, false otherwise.
      */
    public boolean hasValidationPassed() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'validationPassed' field.
      * Whether validation passed
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearValidationPassed() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'businessRulesPassed' field.
      * Whether business rules passed
      * @return The value.
      */
    public boolean getBusinessRulesPassed() {
      return businessRulesPassed;
    }


    /**
      * Sets the value of the 'businessRulesPassed' field.
      * Whether business rules passed
      * @param value The value of 'businessRulesPassed'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setBusinessRulesPassed(boolean value) {
      validate(fields()[12], value);
      this.businessRulesPassed = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'businessRulesPassed' field has been set.
      * Whether business rules passed
      * @return True if the 'businessRulesPassed' field has been set, false otherwise.
      */
    public boolean hasBusinessRulesPassed() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'businessRulesPassed' field.
      * Whether business rules passed
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearBusinessRulesPassed() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMessage' field.
      * Error message if processing failed
      * @return The value.
      */
    public java.lang.String getErrorMessage() {
      return errorMessage;
    }


    /**
      * Sets the value of the 'errorMessage' field.
      * Error message if processing failed
      * @param value The value of 'errorMessage'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder setErrorMessage(java.lang.String value) {
      validate(fields()[13], value);
      this.errorMessage = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessage' field has been set.
      * Error message if processing failed
      * @return True if the 'errorMessage' field has been set, false otherwise.
      */
    public boolean hasErrorMessage() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'errorMessage' field.
      * Error message if processing failed
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.ProcessedTransactionMessage.Builder clearErrorMessage() {
      errorMessage = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProcessedTransactionMessage build() {
      try {
        ProcessedTransactionMessage record = new ProcessedTransactionMessage();
        record.transactionId = fieldSetFlags()[0] ? this.transactionId : (java.lang.String) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.currency = fieldSetFlags()[2] ? this.currency : (java.lang.String) defaultValue(fields()[2]);
        record.senderAccount = fieldSetFlags()[3] ? this.senderAccount : (java.lang.String) defaultValue(fields()[3]);
        record.receiverAccount = fieldSetFlags()[4] ? this.receiverAccount : (java.lang.String) defaultValue(fields()[4]);
        record.transactionType = fieldSetFlags()[5] ? this.transactionType : (java.lang.String) defaultValue(fields()[5]);
        record.priority = fieldSetFlags()[6] ? this.priority : (java.lang.String) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.String) defaultValue(fields()[7]);
        record.processingTimestamp = fieldSetFlags()[8] ? this.processingTimestamp : (java.lang.String) defaultValue(fields()[8]);
        record.processingNodeId = fieldSetFlags()[9] ? this.processingNodeId : (java.lang.String) defaultValue(fields()[9]);
        record.status = fieldSetFlags()[10] ? this.status : (java.lang.String) defaultValue(fields()[10]);
        record.validationPassed = fieldSetFlags()[11] ? this.validationPassed : (java.lang.Boolean) defaultValue(fields()[11]);
        record.businessRulesPassed = fieldSetFlags()[12] ? this.businessRulesPassed : (java.lang.Boolean) defaultValue(fields()[12]);
        record.errorMessage = fieldSetFlags()[13] ? this.errorMessage : (java.lang.String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProcessedTransactionMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProcessedTransactionMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProcessedTransactionMessage>
    READER$ = (org.apache.avro.io.DatumReader<ProcessedTransactionMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionId);

    out.writeDouble(this.amount);

    out.writeString(this.currency);

    out.writeString(this.senderAccount);

    out.writeString(this.receiverAccount);

    out.writeString(this.transactionType);

    out.writeString(this.priority);

    out.writeString(this.timestamp);

    out.writeString(this.processingTimestamp);

    out.writeString(this.processingNodeId);

    out.writeString(this.status);

    out.writeBoolean(this.validationPassed);

    out.writeBoolean(this.businessRulesPassed);

    if (this.errorMessage == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.errorMessage);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionId = in.readString();

      this.amount = in.readDouble();

      this.currency = in.readString();

      this.senderAccount = in.readString();

      this.receiverAccount = in.readString();

      this.transactionType = in.readString();

      this.priority = in.readString();

      this.timestamp = in.readString();

      this.processingTimestamp = in.readString();

      this.processingNodeId = in.readString();

      this.status = in.readString();

      this.validationPassed = in.readBoolean();

      this.businessRulesPassed = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.errorMessage = null;
      } else {
        this.errorMessage = in.readString();
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionId = in.readString();
          break;

        case 1:
          this.amount = in.readDouble();
          break;

        case 2:
          this.currency = in.readString();
          break;

        case 3:
          this.senderAccount = in.readString();
          break;

        case 4:
          this.receiverAccount = in.readString();
          break;

        case 5:
          this.transactionType = in.readString();
          break;

        case 6:
          this.priority = in.readString();
          break;

        case 7:
          this.timestamp = in.readString();
          break;

        case 8:
          this.processingTimestamp = in.readString();
          break;

        case 9:
          this.processingNodeId = in.readString();
          break;

        case 10:
          this.status = in.readString();
          break;

        case 11:
          this.validationPassed = in.readBoolean();
          break;

        case 12:
          this.businessRulesPassed = in.readBoolean();
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.errorMessage = null;
          } else {
            this.errorMessage = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










