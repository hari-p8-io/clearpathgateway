/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.anz.fastpayment.inward.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7405702662902227851L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventInformation\",\"namespace\":\"com.anz.fastpayment.inward.avro\",\"fields\":[{\"name\":\"EventCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Event code (e.g., P.PSP.STS.M.OP_RPI.100)\"},{\"name\":\"EventDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Description of the event\"},{\"name\":\"EventID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique event identifier\"},{\"name\":\"EventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Type of event (e.g., PE)\"},{\"name\":\"EventProducer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Producer of the event\"},{\"name\":\"EventTS\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Event timestamp\"},{\"name\":\"EventTopics\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Kafka topics for the event\"},{\"name\":\"SystemId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"System identifier\"},{\"name\":\"Events\",\"type\":{\"type\":\"record\",\"name\":\"EventCollection\",\"fields\":[{\"name\":\"Event\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EventDetail\",\"fields\":[{\"name\":\"EventCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EventID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}},{\"name\":\"EventVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventInformation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventInformation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventInformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventInformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventInformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventInformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Event code (e.g., P.PSP.STS.M.OP_RPI.100) */
  private java.lang.String EventCode;
  /** Description of the event */
  private java.lang.String EventDescription;
  /** Unique event identifier */
  private java.lang.String EventID;
  /** Type of event (e.g., PE) */
  private java.lang.String EventType;
  /** Producer of the event */
  private java.lang.String EventProducer;
  /** Event timestamp */
  private java.lang.String EventTS;
  /** Kafka topics for the event */
  private java.lang.String EventTopics;
  /** System identifier */
  private java.lang.String SystemId;
  private com.anz.fastpayment.inward.avro.EventCollection Events;
  private java.lang.String EventVersion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventInformation() {}

  /**
   * All-args constructor.
   * @param EventCode Event code (e.g., P.PSP.STS.M.OP_RPI.100)
   * @param EventDescription Description of the event
   * @param EventID Unique event identifier
   * @param EventType Type of event (e.g., PE)
   * @param EventProducer Producer of the event
   * @param EventTS Event timestamp
   * @param EventTopics Kafka topics for the event
   * @param SystemId System identifier
   * @param Events The new value for Events
   * @param EventVersion The new value for EventVersion
   */
  public EventInformation(java.lang.String EventCode, java.lang.String EventDescription, java.lang.String EventID, java.lang.String EventType, java.lang.String EventProducer, java.lang.String EventTS, java.lang.String EventTopics, java.lang.String SystemId, com.anz.fastpayment.inward.avro.EventCollection Events, java.lang.String EventVersion) {
    this.EventCode = EventCode;
    this.EventDescription = EventDescription;
    this.EventID = EventID;
    this.EventType = EventType;
    this.EventProducer = EventProducer;
    this.EventTS = EventTS;
    this.EventTopics = EventTopics;
    this.SystemId = SystemId;
    this.Events = Events;
    this.EventVersion = EventVersion;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventCode;
    case 1: return EventDescription;
    case 2: return EventID;
    case 3: return EventType;
    case 4: return EventProducer;
    case 5: return EventTS;
    case 6: return EventTopics;
    case 7: return SystemId;
    case 8: return Events;
    case 9: return EventVersion;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventCode = value$ != null ? value$.toString() : null; break;
    case 1: EventDescription = value$ != null ? value$.toString() : null; break;
    case 2: EventID = value$ != null ? value$.toString() : null; break;
    case 3: EventType = value$ != null ? value$.toString() : null; break;
    case 4: EventProducer = value$ != null ? value$.toString() : null; break;
    case 5: EventTS = value$ != null ? value$.toString() : null; break;
    case 6: EventTopics = value$ != null ? value$.toString() : null; break;
    case 7: SystemId = value$ != null ? value$.toString() : null; break;
    case 8: Events = (com.anz.fastpayment.inward.avro.EventCollection)value$; break;
    case 9: EventVersion = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'EventCode' field.
   * @return Event code (e.g., P.PSP.STS.M.OP_RPI.100)
   */
  public java.lang.String getEventCode() {
    return EventCode;
  }


  /**
   * Sets the value of the 'EventCode' field.
   * Event code (e.g., P.PSP.STS.M.OP_RPI.100)
   * @param value the value to set.
   */
  public void setEventCode(java.lang.String value) {
    this.EventCode = value;
  }

  /**
   * Gets the value of the 'EventDescription' field.
   * @return Description of the event
   */
  public java.lang.String getEventDescription() {
    return EventDescription;
  }


  /**
   * Sets the value of the 'EventDescription' field.
   * Description of the event
   * @param value the value to set.
   */
  public void setEventDescription(java.lang.String value) {
    this.EventDescription = value;
  }

  /**
   * Gets the value of the 'EventID' field.
   * @return Unique event identifier
   */
  public java.lang.String getEventID() {
    return EventID;
  }


  /**
   * Sets the value of the 'EventID' field.
   * Unique event identifier
   * @param value the value to set.
   */
  public void setEventID(java.lang.String value) {
    this.EventID = value;
  }

  /**
   * Gets the value of the 'EventType' field.
   * @return Type of event (e.g., PE)
   */
  public java.lang.String getEventType() {
    return EventType;
  }


  /**
   * Sets the value of the 'EventType' field.
   * Type of event (e.g., PE)
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.EventType = value;
  }

  /**
   * Gets the value of the 'EventProducer' field.
   * @return Producer of the event
   */
  public java.lang.String getEventProducer() {
    return EventProducer;
  }


  /**
   * Sets the value of the 'EventProducer' field.
   * Producer of the event
   * @param value the value to set.
   */
  public void setEventProducer(java.lang.String value) {
    this.EventProducer = value;
  }

  /**
   * Gets the value of the 'EventTS' field.
   * @return Event timestamp
   */
  public java.lang.String getEventTS() {
    return EventTS;
  }


  /**
   * Sets the value of the 'EventTS' field.
   * Event timestamp
   * @param value the value to set.
   */
  public void setEventTS(java.lang.String value) {
    this.EventTS = value;
  }

  /**
   * Gets the value of the 'EventTopics' field.
   * @return Kafka topics for the event
   */
  public java.lang.String getEventTopics() {
    return EventTopics;
  }


  /**
   * Sets the value of the 'EventTopics' field.
   * Kafka topics for the event
   * @param value the value to set.
   */
  public void setEventTopics(java.lang.String value) {
    this.EventTopics = value;
  }

  /**
   * Gets the value of the 'SystemId' field.
   * @return System identifier
   */
  public java.lang.String getSystemId() {
    return SystemId;
  }


  /**
   * Sets the value of the 'SystemId' field.
   * System identifier
   * @param value the value to set.
   */
  public void setSystemId(java.lang.String value) {
    this.SystemId = value;
  }

  /**
   * Gets the value of the 'Events' field.
   * @return The value of the 'Events' field.
   */
  public com.anz.fastpayment.inward.avro.EventCollection getEvents() {
    return Events;
  }


  /**
   * Sets the value of the 'Events' field.
   * @param value the value to set.
   */
  public void setEvents(com.anz.fastpayment.inward.avro.EventCollection value) {
    this.Events = value;
  }

  /**
   * Gets the value of the 'EventVersion' field.
   * @return The value of the 'EventVersion' field.
   */
  public java.lang.String getEventVersion() {
    return EventVersion;
  }


  /**
   * Sets the value of the 'EventVersion' field.
   * @param value the value to set.
   */
  public void setEventVersion(java.lang.String value) {
    this.EventVersion = value;
  }

  /**
   * Creates a new EventInformation RecordBuilder.
   * @return A new EventInformation RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.EventInformation.Builder newBuilder() {
    return new com.anz.fastpayment.inward.avro.EventInformation.Builder();
  }

  /**
   * Creates a new EventInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventInformation RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.EventInformation.Builder newBuilder(com.anz.fastpayment.inward.avro.EventInformation.Builder other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.EventInformation.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.EventInformation.Builder(other);
    }
  }

  /**
   * Creates a new EventInformation RecordBuilder by copying an existing EventInformation instance.
   * @param other The existing instance to copy.
   * @return A new EventInformation RecordBuilder
   */
  public static com.anz.fastpayment.inward.avro.EventInformation.Builder newBuilder(com.anz.fastpayment.inward.avro.EventInformation other) {
    if (other == null) {
      return new com.anz.fastpayment.inward.avro.EventInformation.Builder();
    } else {
      return new com.anz.fastpayment.inward.avro.EventInformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventInformation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventInformation>
    implements org.apache.avro.data.RecordBuilder<EventInformation> {

    /** Event code (e.g., P.PSP.STS.M.OP_RPI.100) */
    private java.lang.String EventCode;
    /** Description of the event */
    private java.lang.String EventDescription;
    /** Unique event identifier */
    private java.lang.String EventID;
    /** Type of event (e.g., PE) */
    private java.lang.String EventType;
    /** Producer of the event */
    private java.lang.String EventProducer;
    /** Event timestamp */
    private java.lang.String EventTS;
    /** Kafka topics for the event */
    private java.lang.String EventTopics;
    /** System identifier */
    private java.lang.String SystemId;
    private com.anz.fastpayment.inward.avro.EventCollection Events;
    private com.anz.fastpayment.inward.avro.EventCollection.Builder EventsBuilder;
    private java.lang.String EventVersion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.EventInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventCode)) {
        this.EventCode = data().deepCopy(fields()[0].schema(), other.EventCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.EventDescription)) {
        this.EventDescription = data().deepCopy(fields()[1].schema(), other.EventDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.EventID)) {
        this.EventID = data().deepCopy(fields()[2].schema(), other.EventID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.EventType)) {
        this.EventType = data().deepCopy(fields()[3].schema(), other.EventType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.EventProducer)) {
        this.EventProducer = data().deepCopy(fields()[4].schema(), other.EventProducer);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.EventTS)) {
        this.EventTS = data().deepCopy(fields()[5].schema(), other.EventTS);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.EventTopics)) {
        this.EventTopics = data().deepCopy(fields()[6].schema(), other.EventTopics);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.SystemId)) {
        this.SystemId = data().deepCopy(fields()[7].schema(), other.SystemId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.Events)) {
        this.Events = data().deepCopy(fields()[8].schema(), other.Events);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasEventsBuilder()) {
        this.EventsBuilder = com.anz.fastpayment.inward.avro.EventCollection.newBuilder(other.getEventsBuilder());
      }
      if (isValidValue(fields()[9], other.EventVersion)) {
        this.EventVersion = data().deepCopy(fields()[9].schema(), other.EventVersion);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing EventInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.anz.fastpayment.inward.avro.EventInformation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.EventCode)) {
        this.EventCode = data().deepCopy(fields()[0].schema(), other.EventCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EventDescription)) {
        this.EventDescription = data().deepCopy(fields()[1].schema(), other.EventDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EventID)) {
        this.EventID = data().deepCopy(fields()[2].schema(), other.EventID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EventType)) {
        this.EventType = data().deepCopy(fields()[3].schema(), other.EventType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.EventProducer)) {
        this.EventProducer = data().deepCopy(fields()[4].schema(), other.EventProducer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.EventTS)) {
        this.EventTS = data().deepCopy(fields()[5].schema(), other.EventTS);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.EventTopics)) {
        this.EventTopics = data().deepCopy(fields()[6].schema(), other.EventTopics);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.SystemId)) {
        this.SystemId = data().deepCopy(fields()[7].schema(), other.SystemId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.Events)) {
        this.Events = data().deepCopy(fields()[8].schema(), other.Events);
        fieldSetFlags()[8] = true;
      }
      this.EventsBuilder = null;
      if (isValidValue(fields()[9], other.EventVersion)) {
        this.EventVersion = data().deepCopy(fields()[9].schema(), other.EventVersion);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'EventCode' field.
      * Event code (e.g., P.PSP.STS.M.OP_RPI.100)
      * @return The value.
      */
    public java.lang.String getEventCode() {
      return EventCode;
    }


    /**
      * Sets the value of the 'EventCode' field.
      * Event code (e.g., P.PSP.STS.M.OP_RPI.100)
      * @param value The value of 'EventCode'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventCode(java.lang.String value) {
      validate(fields()[0], value);
      this.EventCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventCode' field has been set.
      * Event code (e.g., P.PSP.STS.M.OP_RPI.100)
      * @return True if the 'EventCode' field has been set, false otherwise.
      */
    public boolean hasEventCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'EventCode' field.
      * Event code (e.g., P.PSP.STS.M.OP_RPI.100)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventCode() {
      EventCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventDescription' field.
      * Description of the event
      * @return The value.
      */
    public java.lang.String getEventDescription() {
      return EventDescription;
    }


    /**
      * Sets the value of the 'EventDescription' field.
      * Description of the event
      * @param value The value of 'EventDescription'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.EventDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EventDescription' field has been set.
      * Description of the event
      * @return True if the 'EventDescription' field has been set, false otherwise.
      */
    public boolean hasEventDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EventDescription' field.
      * Description of the event
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventDescription() {
      EventDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventID' field.
      * Unique event identifier
      * @return The value.
      */
    public java.lang.String getEventID() {
      return EventID;
    }


    /**
      * Sets the value of the 'EventID' field.
      * Unique event identifier
      * @param value The value of 'EventID'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventID(java.lang.String value) {
      validate(fields()[2], value);
      this.EventID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EventID' field has been set.
      * Unique event identifier
      * @return True if the 'EventID' field has been set, false otherwise.
      */
    public boolean hasEventID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EventID' field.
      * Unique event identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventID() {
      EventID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventType' field.
      * Type of event (e.g., PE)
      * @return The value.
      */
    public java.lang.String getEventType() {
      return EventType;
    }


    /**
      * Sets the value of the 'EventType' field.
      * Type of event (e.g., PE)
      * @param value The value of 'EventType'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventType(java.lang.String value) {
      validate(fields()[3], value);
      this.EventType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'EventType' field has been set.
      * Type of event (e.g., PE)
      * @return True if the 'EventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'EventType' field.
      * Type of event (e.g., PE)
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventType() {
      EventType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventProducer' field.
      * Producer of the event
      * @return The value.
      */
    public java.lang.String getEventProducer() {
      return EventProducer;
    }


    /**
      * Sets the value of the 'EventProducer' field.
      * Producer of the event
      * @param value The value of 'EventProducer'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventProducer(java.lang.String value) {
      validate(fields()[4], value);
      this.EventProducer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'EventProducer' field has been set.
      * Producer of the event
      * @return True if the 'EventProducer' field has been set, false otherwise.
      */
    public boolean hasEventProducer() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'EventProducer' field.
      * Producer of the event
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventProducer() {
      EventProducer = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventTS' field.
      * Event timestamp
      * @return The value.
      */
    public java.lang.String getEventTS() {
      return EventTS;
    }


    /**
      * Sets the value of the 'EventTS' field.
      * Event timestamp
      * @param value The value of 'EventTS'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventTS(java.lang.String value) {
      validate(fields()[5], value);
      this.EventTS = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'EventTS' field has been set.
      * Event timestamp
      * @return True if the 'EventTS' field has been set, false otherwise.
      */
    public boolean hasEventTS() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'EventTS' field.
      * Event timestamp
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventTS() {
      EventTS = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventTopics' field.
      * Kafka topics for the event
      * @return The value.
      */
    public java.lang.String getEventTopics() {
      return EventTopics;
    }


    /**
      * Sets the value of the 'EventTopics' field.
      * Kafka topics for the event
      * @param value The value of 'EventTopics'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventTopics(java.lang.String value) {
      validate(fields()[6], value);
      this.EventTopics = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'EventTopics' field has been set.
      * Kafka topics for the event
      * @return True if the 'EventTopics' field has been set, false otherwise.
      */
    public boolean hasEventTopics() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'EventTopics' field.
      * Kafka topics for the event
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventTopics() {
      EventTopics = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'SystemId' field.
      * System identifier
      * @return The value.
      */
    public java.lang.String getSystemId() {
      return SystemId;
    }


    /**
      * Sets the value of the 'SystemId' field.
      * System identifier
      * @param value The value of 'SystemId'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setSystemId(java.lang.String value) {
      validate(fields()[7], value);
      this.SystemId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'SystemId' field has been set.
      * System identifier
      * @return True if the 'SystemId' field has been set, false otherwise.
      */
    public boolean hasSystemId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'SystemId' field.
      * System identifier
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearSystemId() {
      SystemId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'Events' field.
      * @return The value.
      */
    public com.anz.fastpayment.inward.avro.EventCollection getEvents() {
      return Events;
    }


    /**
      * Sets the value of the 'Events' field.
      * @param value The value of 'Events'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEvents(com.anz.fastpayment.inward.avro.EventCollection value) {
      validate(fields()[8], value);
      this.EventsBuilder = null;
      this.Events = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'Events' field has been set.
      * @return True if the 'Events' field has been set, false otherwise.
      */
    public boolean hasEvents() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'Events' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.anz.fastpayment.inward.avro.EventCollection.Builder getEventsBuilder() {
      if (EventsBuilder == null) {
        if (hasEvents()) {
          setEventsBuilder(com.anz.fastpayment.inward.avro.EventCollection.newBuilder(Events));
        } else {
          setEventsBuilder(com.anz.fastpayment.inward.avro.EventCollection.newBuilder());
        }
      }
      return EventsBuilder;
    }

    /**
     * Sets the Builder instance for the 'Events' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventsBuilder(com.anz.fastpayment.inward.avro.EventCollection.Builder value) {
      clearEvents();
      EventsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Events' field has an active Builder instance
     * @return True if the 'Events' field has an active Builder instance
     */
    public boolean hasEventsBuilder() {
      return EventsBuilder != null;
    }

    /**
      * Clears the value of the 'Events' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEvents() {
      Events = null;
      EventsBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventVersion' field.
      * @return The value.
      */
    public java.lang.String getEventVersion() {
      return EventVersion;
    }


    /**
      * Sets the value of the 'EventVersion' field.
      * @param value The value of 'EventVersion'.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder setEventVersion(java.lang.String value) {
      validate(fields()[9], value);
      this.EventVersion = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'EventVersion' field has been set.
      * @return True if the 'EventVersion' field has been set, false otherwise.
      */
    public boolean hasEventVersion() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'EventVersion' field.
      * @return This builder.
      */
    public com.anz.fastpayment.inward.avro.EventInformation.Builder clearEventVersion() {
      EventVersion = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventInformation build() {
      try {
        EventInformation record = new EventInformation();
        record.EventCode = fieldSetFlags()[0] ? this.EventCode : (java.lang.String) defaultValue(fields()[0]);
        record.EventDescription = fieldSetFlags()[1] ? this.EventDescription : (java.lang.String) defaultValue(fields()[1]);
        record.EventID = fieldSetFlags()[2] ? this.EventID : (java.lang.String) defaultValue(fields()[2]);
        record.EventType = fieldSetFlags()[3] ? this.EventType : (java.lang.String) defaultValue(fields()[3]);
        record.EventProducer = fieldSetFlags()[4] ? this.EventProducer : (java.lang.String) defaultValue(fields()[4]);
        record.EventTS = fieldSetFlags()[5] ? this.EventTS : (java.lang.String) defaultValue(fields()[5]);
        record.EventTopics = fieldSetFlags()[6] ? this.EventTopics : (java.lang.String) defaultValue(fields()[6]);
        record.SystemId = fieldSetFlags()[7] ? this.SystemId : (java.lang.String) defaultValue(fields()[7]);
        if (EventsBuilder != null) {
          try {
            record.Events = this.EventsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Events"));
            throw e;
          }
        } else {
          record.Events = fieldSetFlags()[8] ? this.Events : (com.anz.fastpayment.inward.avro.EventCollection) defaultValue(fields()[8]);
        }
        record.EventVersion = fieldSetFlags()[9] ? this.EventVersion : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventInformation>
    READER$ = (org.apache.avro.io.DatumReader<EventInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.EventCode == null) {
      throw new IllegalStateException("EventCode cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventCode);

    if (this.EventDescription == null) {
      throw new IllegalStateException("EventDescription cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventDescription);

    if (this.EventID == null) {
      throw new IllegalStateException("EventID cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventID);

    if (this.EventType == null) {
      throw new IllegalStateException("EventType cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventType);

    if (this.EventProducer == null) {
      throw new IllegalStateException("EventProducer cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventProducer);

    if (this.EventTS == null) {
      throw new IllegalStateException("EventTS cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventTS);

    if (this.EventTopics == null) {
      throw new IllegalStateException("EventTopics cannot be null for EventInformation encoding");
    }
    out.writeString(this.EventTopics);

    if (this.SystemId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.SystemId);
    }

    if (this.Events == null) {
      throw new IllegalStateException("Events cannot be null for EventInformation encoding");
    }
    this.Events.customEncode(out);

    if (this.EventVersion == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.EventVersion);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.EventCode = in.readString();

      this.EventDescription = in.readString();

      this.EventID = in.readString();

      this.EventType = in.readString();

      this.EventProducer = in.readString();

      this.EventTS = in.readString();

      this.EventTopics = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.SystemId = null;
      } else {
        this.SystemId = in.readString();
      }

      if (this.Events == null) {
        this.Events = new com.anz.fastpayment.inward.avro.EventCollection();
      }
      this.Events.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.EventVersion = null;
      } else {
        this.EventVersion = in.readString();
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.EventCode = in.readString();
          break;

        case 1:
          this.EventDescription = in.readString();
          break;

        case 2:
          this.EventID = in.readString();
          break;

        case 3:
          this.EventType = in.readString();
          break;

        case 4:
          this.EventProducer = in.readString();
          break;

        case 5:
          this.EventTS = in.readString();
          break;

        case 6:
          this.EventTopics = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.SystemId = null;
          } else {
            this.SystemId = in.readString();
          }
          break;

        case 8:
          if (this.Events == null) {
            this.Events = new com.anz.fastpayment.inward.avro.EventCollection();
          }
          this.Events.customDecode(in);
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.EventVersion = null;
          } else {
            this.EventVersion = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










